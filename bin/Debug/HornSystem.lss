
bin\Debug\HornSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00004ae8  00004b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ae8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001ba  008001ba  00004c56  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00004c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000351  00000000  00000000  00004e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034be  00000000  00000000  000051ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015b4  00000000  00000000  00008688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b89  00000000  00000000  00009c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  0000c7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  0000cae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_1>
       8:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_4>
      14:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	fa e4       	ldi	r31, 0x4A	; 74
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 3b       	cpi	r26, 0xBA	; 186
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa eb       	ldi	r26, 0xBA	; 186
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3b       	cpi	r26, 0xBD	; 189
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <main>
      9e:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
Revision: 1.0.0
Last Updated: 22/07/2019
Files Info: ADC functions File
************************************************/
#include "ADC.h"
void ADC_init(void){
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
      ae:	ec e7       	ldi	r30, 0x7C	; 124
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e4       	ldi	r24, 0x40	; 64
      b4:	80 83       	st	Z, r24
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	87 e8       	ldi	r24, 0x87	; 135
      bc:	80 83       	st	Z, r24
}
      be:	cf 91       	pop	r28
      c0:	df 91       	pop	r29
      c2:	08 95       	ret

000000c4 <ReadADC>:

int ReadADC(uint8_t pin){
      c4:	df 93       	push	r29
      c6:	cf 93       	push	r28
      c8:	00 d0       	rcall	.+0      	; 0xca <ReadADC+0x6>
      ca:	0f 92       	push	r0
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	8b 83       	std	Y+3, r24	; 0x03
        uint8_t low, high;
        if (pin >= 14) pin -= 14; // allow for channel or pin numbers
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	8e 30       	cpi	r24, 0x0E	; 14
      d6:	18 f0       	brcs	.+6      	; 0xde <ReadADC+0x1a>
      d8:	8b 81       	ldd	r24, Y+3	; 0x03
      da:	8e 50       	subi	r24, 0x0E	; 14
      dc:	8b 83       	std	Y+3, r24	; 0x03
        ADMUX = (REFS0<< 6) | (pin & 0x07);
      de:	ec e7       	ldi	r30, 0x7C	; 124
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	8b 81       	ldd	r24, Y+3	; 0x03
      e4:	87 70       	andi	r24, 0x07	; 7
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
        SET_BIT(ADCSRA, ADSC);
      ea:	aa e7       	ldi	r26, 0x7A	; 122
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	ea e7       	ldi	r30, 0x7A	; 122
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	80 64       	ori	r24, 0x40	; 64
      f6:	8c 93       	st	X, r24
        while (bit_is_set(ADCSRA, ADSC));
      f8:	ea e7       	ldi	r30, 0x7A	; 122
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	88 2f       	mov	r24, r24
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	80 74       	andi	r24, 0x40	; 64
     104:	90 70       	andi	r25, 0x00	; 0
     106:	00 97       	sbiw	r24, 0x00	; 0
     108:	b9 f7       	brne	.-18     	; 0xf8 <ReadADC+0x34>
        low  = ADCL;
     10a:	e8 e7       	ldi	r30, 0x78	; 120
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8a 83       	std	Y+2, r24	; 0x02
        high = ADCH;
     112:	e9 e7       	ldi	r30, 0x79	; 121
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	89 83       	std	Y+1, r24	; 0x01
        return (high << 8) | low;
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	88 2f       	mov	r24, r24
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	38 2f       	mov	r19, r24
     122:	22 27       	eor	r18, r18
     124:	8a 81       	ldd	r24, Y+2	; 0x02
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	82 2b       	or	r24, r18
     12c:	93 2b       	or	r25, r19
}
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	cf 91       	pop	r28
     136:	df 91       	pop	r29
     138:	08 95       	ret

0000013a <gpio_init>:
    volatile unsigned int FLAG_ISR2:1;            //ignition switch flag
    volatile unsigned int FLAG_ISR3:1;            //increment switch flag
    volatile unsigned int FLAG_ISR4:1;            //decrement switch flag
}FLAG_BIT;

void gpio_init(void){
     13a:	df 93       	push	r29
     13c:	cf 93       	push	r28
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	2e 97       	sbiw	r28, 0x0e	; 14
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
//LCD PORTS SETTINGS
    SET_BIT(DDRB,PB1);
     14e:	a4 e2       	ldi	r26, 0x24	; 36
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	e4 e2       	ldi	r30, 0x24	; 36
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	82 60       	ori	r24, 0x02	; 2
     15a:	8c 93       	st	X, r24
    SET_BIT(DDRB,PB2);
     15c:	a4 e2       	ldi	r26, 0x24	; 36
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e2       	ldi	r30, 0x24	; 36
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	84 60       	ori	r24, 0x04	; 4
     168:	8c 93       	st	X, r24
    SET_BIT(DDRB,PB3);
     16a:	a4 e2       	ldi	r26, 0x24	; 36
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e4 e2       	ldi	r30, 0x24	; 36
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 60       	ori	r24, 0x08	; 8
     176:	8c 93       	st	X, r24
    SET_BIT(DDRB,PB4);
     178:	a4 e2       	ldi	r26, 0x24	; 36
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e4 e2       	ldi	r30, 0x24	; 36
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	80 61       	ori	r24, 0x10	; 16
     184:	8c 93       	st	X, r24
    SET_BIT(DDRC,PC0);
     186:	a7 e2       	ldi	r26, 0x27	; 39
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	e7 e2       	ldi	r30, 0x27	; 39
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	81 60       	ori	r24, 0x01	; 1
     192:	8c 93       	st	X, r24
    SET_BIT(DDRC,PC2);
     194:	a7 e2       	ldi	r26, 0x27	; 39
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e7 e2       	ldi	r30, 0x27	; 39
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	84 60       	ori	r24, 0x04	; 4
     1a0:	8c 93       	st	X, r24

    SET_BIT(PORTB,PB1);
     1a2:	a5 e2       	ldi	r26, 0x25	; 37
     1a4:	b0 e0       	ldi	r27, 0x00	; 0
     1a6:	e5 e2       	ldi	r30, 0x25	; 37
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	82 60       	ori	r24, 0x02	; 2
     1ae:	8c 93       	st	X, r24
    SET_BIT(PORTB,PB2);
     1b0:	a5 e2       	ldi	r26, 0x25	; 37
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	e5 e2       	ldi	r30, 0x25	; 37
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	84 60       	ori	r24, 0x04	; 4
     1bc:	8c 93       	st	X, r24
    SET_BIT(PORTB,PB3);
     1be:	a5 e2       	ldi	r26, 0x25	; 37
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e5 e2       	ldi	r30, 0x25	; 37
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	88 60       	ori	r24, 0x08	; 8
     1ca:	8c 93       	st	X, r24
    SET_BIT(PORTB,PB4);
     1cc:	a5 e2       	ldi	r26, 0x25	; 37
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	e5 e2       	ldi	r30, 0x25	; 37
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	8c 93       	st	X, r24
    SET_BIT(PORTC,PC0);
     1da:	a8 e2       	ldi	r26, 0x28	; 40
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e8 e2       	ldi	r30, 0x28	; 40
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	81 60       	ori	r24, 0x01	; 1
     1e6:	8c 93       	st	X, r24
    SET_BIT(PORTC,PC2);
     1e8:	a8 e2       	ldi	r26, 0x28	; 40
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	e8 e2       	ldi	r30, 0x28	; 40
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	84 60       	ori	r24, 0x04	; 4
     1f4:	8c 93       	st	X, r24

//PINCHANGE INTRRUPT STTINGS
    SET_BIT(DDRC,PC6); //OUTPUT
     1f6:	a7 e2       	ldi	r26, 0x27	; 39
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e7 e2       	ldi	r30, 0x27	; 39
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	80 64       	ori	r24, 0x40	; 64
     202:	8c 93       	st	X, r24
    SET_BIT(DDRC,PC4); //OUTPUT
     204:	a7 e2       	ldi	r26, 0x27	; 39
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e7 e2       	ldi	r30, 0x27	; 39
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 61       	ori	r24, 0x10	; 16
     210:	8c 93       	st	X, r24
    SET_BIT(DDRD,PD1); //OUTPUT
     212:	aa e2       	ldi	r26, 0x2A	; 42
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	ea e2       	ldi	r30, 0x2A	; 42
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	82 60       	ori	r24, 0x02	; 2
     21e:	8c 93       	st	X, r24
    SET_BIT(DDRD,PD4); //OUTPUT
     220:	aa e2       	ldi	r26, 0x2A	; 42
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	ea e2       	ldi	r30, 0x2A	; 42
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	80 61       	ori	r24, 0x10	; 16
     22c:	8c 93       	st	X, r24

    CLR_BIT(DDRD,PD0); //INPUT
     22e:	aa e2       	ldi	r26, 0x2A	; 42
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	ea e2       	ldi	r30, 0x2A	; 42
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	8e 7f       	andi	r24, 0xFE	; 254
     23a:	8c 93       	st	X, r24
    CLR_BIT(DDRC,PC5); //INPUT
     23c:	a7 e2       	ldi	r26, 0x27	; 39
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e7 e2       	ldi	r30, 0x27	; 39
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8f 7d       	andi	r24, 0xDF	; 223
     248:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD2); //INPUT
     24a:	aa e2       	ldi	r26, 0x2A	; 42
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	ea e2       	ldi	r30, 0x2A	; 42
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	8b 7f       	andi	r24, 0xFB	; 251
     256:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PC3); //INPUT
     258:	aa e2       	ldi	r26, 0x2A	; 42
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	ea e2       	ldi	r30, 0x2A	; 42
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	87 7f       	andi	r24, 0xF7	; 247
     264:	8c 93       	st	X, r24

    SET_BIT(PORTD,PD0); //PULL UP
     266:	ab e2       	ldi	r26, 0x2B	; 43
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	eb e2       	ldi	r30, 0x2B	; 43
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	81 60       	ori	r24, 0x01	; 1
     272:	8c 93       	st	X, r24
    SET_BIT(PORTC,PC5); //PULL UP
     274:	a8 e2       	ldi	r26, 0x28	; 40
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e8 e2       	ldi	r30, 0x28	; 40
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	80 62       	ori	r24, 0x20	; 32
     280:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD2); //PULL UP
     282:	ab e2       	ldi	r26, 0x2B	; 43
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	eb e2       	ldi	r30, 0x2B	; 43
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	84 60       	ori	r24, 0x04	; 4
     28e:	8c 93       	st	X, r24
    SET_BIT(PORTD,PC3); //PULL UP
     290:	ab e2       	ldi	r26, 0x2B	; 43
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	eb e2       	ldi	r30, 0x2B	; 43
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	88 60       	ori	r24, 0x08	; 8
     29c:	8c 93       	st	X, r24

    SET_BIT(DDRD,PD6); //PWM PIN
     29e:	aa e2       	ldi	r26, 0x2A	; 42
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	ea e2       	ldi	r30, 0x2A	; 42
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 64       	ori	r24, 0x40	; 64
     2aa:	8c 93       	st	X, r24

    SET_BIT(PORTC,PC6);
     2ac:	a8 e2       	ldi	r26, 0x28	; 40
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e8 e2       	ldi	r30, 0x28	; 40
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 64       	ori	r24, 0x40	; 64
     2b8:	8c 93       	st	X, r24
    SET_BIT(PORTC,PC4);
     2ba:	a8 e2       	ldi	r26, 0x28	; 40
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
     2be:	e8 e2       	ldi	r30, 0x28	; 40
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	80 61       	ori	r24, 0x10	; 16
     2c6:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD1);
     2c8:	ab e2       	ldi	r26, 0x2B	; 43
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	eb e2       	ldi	r30, 0x2B	; 43
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	82 60       	ori	r24, 0x02	; 2
     2d4:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD4);
     2d6:	ab e2       	ldi	r26, 0x2B	; 43
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	eb e2       	ldi	r30, 0x2B	; 43
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	80 61       	ori	r24, 0x10	; 16
     2e2:	8c 93       	st	X, r24
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	aa ef       	ldi	r26, 0xFA	; 250
     2ea:	b3 e4       	ldi	r27, 0x43	; 67
     2ec:	8b 87       	std	Y+11, r24	; 0x0b
     2ee:	9c 87       	std	Y+12, r25	; 0x0c
     2f0:	ad 87       	std	Y+13, r26	; 0x0d
     2f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f4:	6b 85       	ldd	r22, Y+11	; 0x0b
     2f6:	7c 85       	ldd	r23, Y+12	; 0x0c
     2f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4a e7       	ldi	r20, 0x7A	; 122
     302:	55 e4       	ldi	r21, 0x45	; 69
     304:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	8f 83       	std	Y+7, r24	; 0x07
     30e:	98 87       	std	Y+8, r25	; 0x08
     310:	a9 87       	std	Y+9, r26	; 0x09
     312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     314:	6f 81       	ldd	r22, Y+7	; 0x07
     316:	78 85       	ldd	r23, Y+8	; 0x08
     318:	89 85       	ldd	r24, Y+9	; 0x09
     31a:	9a 85       	ldd	r25, Y+10	; 0x0a
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	40 e8       	ldi	r20, 0x80	; 128
     322:	5f e3       	ldi	r21, 0x3F	; 63
     324:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
     328:	88 23       	and	r24, r24
     32a:	2c f4       	brge	.+10     	; 0x336 <gpio_init+0x1fc>
		__ticks = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	9e 83       	std	Y+6, r25	; 0x06
     332:	8d 83       	std	Y+5, r24	; 0x05
     334:	3f c0       	rjmp	.+126    	; 0x3b4 <gpio_init+0x27a>
	else if (__tmp > 65535)
     336:	6f 81       	ldd	r22, Y+7	; 0x07
     338:	78 85       	ldd	r23, Y+8	; 0x08
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	3f ef       	ldi	r19, 0xFF	; 255
     342:	4f e7       	ldi	r20, 0x7F	; 127
     344:	57 e4       	ldi	r21, 0x47	; 71
     346:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
     34a:	18 16       	cp	r1, r24
     34c:	4c f5       	brge	.+82     	; 0x3a0 <gpio_init+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     34e:	6b 85       	ldd	r22, Y+11	; 0x0b
     350:	7c 85       	ldd	r23, Y+12	; 0x0c
     352:	8d 85       	ldd	r24, Y+13	; 0x0d
     354:	9e 85       	ldd	r25, Y+14	; 0x0e
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e2       	ldi	r20, 0x20	; 32
     35c:	51 e4       	ldi	r21, 0x41	; 65
     35e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	9e 83       	std	Y+6, r25	; 0x06
     374:	8d 83       	std	Y+5, r24	; 0x05
     376:	0f c0       	rjmp	.+30     	; 0x396 <gpio_init+0x25c>
     378:	80 e9       	ldi	r24, 0x90	; 144
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	9c 83       	std	Y+4, r25	; 0x04
     37e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	9c 81       	ldd	r25, Y+4	; 0x04
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <gpio_init+0x24a>
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	9e 81       	ldd	r25, Y+6	; 0x06
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	9e 83       	std	Y+6, r25	; 0x06
     394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     396:	8d 81       	ldd	r24, Y+5	; 0x05
     398:	9e 81       	ldd	r25, Y+6	; 0x06
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	69 f7       	brne	.-38     	; 0x378 <gpio_init+0x23e>
     39e:	14 c0       	rjmp	.+40     	; 0x3c8 <gpio_init+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3a0:	6f 81       	ldd	r22, Y+7	; 0x07
     3a2:	78 85       	ldd	r23, Y+8	; 0x08
     3a4:	89 85       	ldd	r24, Y+9	; 0x09
     3a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     3ac:	dc 01       	movw	r26, r24
     3ae:	cb 01       	movw	r24, r22
     3b0:	9e 83       	std	Y+6, r25	; 0x06
     3b2:	8d 83       	std	Y+5, r24	; 0x05
     3b4:	8d 81       	ldd	r24, Y+5	; 0x05
     3b6:	9e 81       	ldd	r25, Y+6	; 0x06
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	89 83       	std	Y+1, r24	; 0x01
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <gpio_init+0x286>
     3c4:	9a 83       	std	Y+2, r25	; 0x02
     3c6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    CLR_BIT(PORTC,PC6);
     3c8:	a8 e2       	ldi	r26, 0x28	; 40
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e8 e2       	ldi	r30, 0x28	; 40
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8f 7b       	andi	r24, 0xBF	; 191
     3d4:	8c 93       	st	X, r24
    CLR_BIT(PORTC,PC4);
     3d6:	a8 e2       	ldi	r26, 0x28	; 40
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e8 e2       	ldi	r30, 0x28	; 40
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	8f 7e       	andi	r24, 0xEF	; 239
     3e2:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD1);
     3e4:	ab e2       	ldi	r26, 0x2B	; 43
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	eb e2       	ldi	r30, 0x2B	; 43
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	8d 7f       	andi	r24, 0xFD	; 253
     3f0:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD4);
     3f2:	ab e2       	ldi	r26, 0x2B	; 43
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	eb e2       	ldi	r30, 0x2B	; 43
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	8f 7e       	andi	r24, 0xEF	; 239
     3fe:	8c 93       	st	X, r24
}
     400:	2e 96       	adiw	r28, 0x0e	; 14
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	08 95       	ret

00000412 <intrrupt_init>:

void intrrupt_init(void){
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(PCICR,PCIE2);
     41a:	a8 e6       	ldi	r26, 0x68	; 104
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	e8 e6       	ldi	r30, 0x68	; 104
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	84 60       	ori	r24, 0x04	; 4
     426:	8c 93       	st	X, r24
    SET_BIT(PCICR,PCIE1);
     428:	a8 e6       	ldi	r26, 0x68	; 104
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e8 e6       	ldi	r30, 0x68	; 104
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	82 60       	ori	r24, 0x02	; 2
     434:	8c 93       	st	X, r24
	SET_BIT(PCMSK2,PCINT16);
     436:	ad e6       	ldi	r26, 0x6D	; 109
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	ed e6       	ldi	r30, 0x6D	; 109
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	81 60       	ori	r24, 0x01	; 1
     442:	8c 93       	st	X, r24
	SET_BIT(PCMSK1,PCINT13);
     444:	ac e6       	ldi	r26, 0x6C	; 108
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	ec e6       	ldi	r30, 0x6C	; 108
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	8c 93       	st	X, r24
	EICRA |= (1 << ISC00);    // set interrupt to trigger on ANY logic change
     452:	a9 e6       	ldi	r26, 0x69	; 105
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	e9 e6       	ldi	r30, 0x69	; 105
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	8c 93       	st	X, r24
	EICRA |= (1 << ISC10);    // set interrupt to trigger on ANY logic change
     460:	a9 e6       	ldi	r26, 0x69	; 105
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	e9 e6       	ldi	r30, 0x69	; 105
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	84 60       	ori	r24, 0x04	; 4
     46c:	8c 93       	st	X, r24
    EIMSK |= (1 << INT0);     // Turns on INT0
     46e:	ad e3       	ldi	r26, 0x3D	; 61
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	ed e3       	ldi	r30, 0x3D	; 61
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	8c 93       	st	X, r24
    EIMSK |= (1 << INT1);     // Turns on INT0
     47c:	ad e3       	ldi	r26, 0x3D	; 61
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	ed e3       	ldi	r30, 0x3D	; 61
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	82 60       	ori	r24, 0x02	; 2
     488:	8c 93       	st	X, r24
	sei();
     48a:	78 94       	sei
	FLAG_BIT.FLAG_ISR1=0;
     48c:	80 91 bc 01 	lds	r24, 0x01BC
     490:	8e 7f       	andi	r24, 0xFE	; 254
     492:	80 93 bc 01 	sts	0x01BC, r24
	FLAG_BIT.FLAG_ISR2=0;
     496:	80 91 bc 01 	lds	r24, 0x01BC
     49a:	8d 7f       	andi	r24, 0xFD	; 253
     49c:	80 93 bc 01 	sts	0x01BC, r24
	FLAG_BIT.FLAG_ISR3=0;
     4a0:	80 91 bc 01 	lds	r24, 0x01BC
     4a4:	8b 7f       	andi	r24, 0xFB	; 251
     4a6:	80 93 bc 01 	sts	0x01BC, r24
	FLAG_BIT.FLAG_ISR4=0;
     4aa:	80 91 bc 01 	lds	r24, 0x01BC
     4ae:	87 7f       	andi	r24, 0xF7	; 247
     4b0:	80 93 bc 01 	sts	0x01BC, r24
}
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <hornCallback>:

//Function consist of all logics of horn system
void hornCallback(void){
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	a2 97       	sbiw	r28, 0x22	; 34
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
    temperature=ReadADC(17); //attached to adc3
     4ce:	81 e1       	ldi	r24, 0x11	; 17
     4d0:	0e 94 62 00 	call	0xc4	; 0xc4 <ReadADC>
     4d4:	90 93 bb 01 	sts	0x01BB, r25
     4d8:	80 93 ba 01 	sts	0x01BA, r24
    if(temperature<=500){
     4dc:	80 91 ba 01 	lds	r24, 0x01BA
     4e0:	90 91 bb 01 	lds	r25, 0x01BB
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	85 3f       	cpi	r24, 0xF5	; 245
     4e8:	92 07       	cpc	r25, r18
     4ea:	0c f0       	brlt	.+2      	; 0x4ee <hornCallback+0x34>
     4ec:	58 c1       	rjmp	.+688    	; 0x79e <hornCallback+0x2e4>
        if(FLAG_BIT.FLAG_ISR2 && FLAG_BIT.FLAG_ISR1){
     4ee:	80 91 bc 01 	lds	r24, 0x01BC
     4f2:	82 70       	andi	r24, 0x02	; 2
     4f4:	88 23       	and	r24, r24
     4f6:	a1 f0       	breq	.+40     	; 0x520 <hornCallback+0x66>
     4f8:	80 91 bc 01 	lds	r24, 0x01BC
     4fc:	81 70       	andi	r24, 0x01	; 1
     4fe:	88 23       	and	r24, r24
     500:	79 f0       	breq	.+30     	; 0x520 <hornCallback+0x66>
            pwm(DutyCycle);
     502:	80 91 00 01 	lds	r24, 0x0100
     506:	90 91 01 01 	lds	r25, 0x0101
     50a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <pwm>
            if(!FLAG_BIT.FLAG_ISR2)
     50e:	80 91 bc 01 	lds	r24, 0x01BC
     512:	82 70       	andi	r24, 0x02	; 2
     514:	88 23       	and	r24, r24
     516:	21 f4       	brne	.+8      	; 0x520 <hornCallback+0x66>
                pwm(0);
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <pwm>
        }
        if( !(FLAG_BIT.FLAG_ISR2)){
     520:	80 91 bc 01 	lds	r24, 0x01BC
     524:	82 70       	andi	r24, 0x02	; 2
     526:	88 23       	and	r24, r24
     528:	09 f0       	breq	.+2      	; 0x52c <hornCallback+0x72>
     52a:	39 c1       	rjmp	.+626    	; 0x79e <hornCallback+0x2e4>
            if(FLAG_BIT.FLAG_ISR3){
     52c:	80 91 bc 01 	lds	r24, 0x01BC
     530:	84 70       	andi	r24, 0x04	; 4
     532:	88 23       	and	r24, r24
     534:	09 f4       	brne	.+2      	; 0x538 <hornCallback+0x7e>
     536:	8d c0       	rjmp	.+282    	; 0x652 <hornCallback+0x198>
                DutyCycle += (DutyCycle>=260)?0:13; //Incrementing 5% duty cycle
     538:	80 91 00 01 	lds	r24, 0x0100
     53c:	90 91 01 01 	lds	r25, 0x0101
     540:	31 e0       	ldi	r19, 0x01	; 1
     542:	84 30       	cpi	r24, 0x04	; 4
     544:	93 07       	cpc	r25, r19
     546:	1c f0       	brlt	.+6      	; 0x54e <hornCallback+0x94>
     548:	1a a2       	std	Y+34, r1	; 0x22
     54a:	19 a2       	std	Y+33, r1	; 0x21
     54c:	04 c0       	rjmp	.+8      	; 0x556 <hornCallback+0x9c>
     54e:	8d e0       	ldi	r24, 0x0D	; 13
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9a a3       	std	Y+34, r25	; 0x22
     554:	89 a3       	std	Y+33, r24	; 0x21
     556:	80 91 00 01 	lds	r24, 0x0100
     55a:	90 91 01 01 	lds	r25, 0x0101
     55e:	29 a1       	ldd	r18, Y+33	; 0x21
     560:	3a a1       	ldd	r19, Y+34	; 0x22
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	90 93 01 01 	sts	0x0101, r25
     56a:	80 93 00 01 	sts	0x0100, r24
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	a8 e4       	ldi	r26, 0x48	; 72
     574:	b3 e4       	ldi	r27, 0x43	; 67
     576:	89 8f       	std	Y+25, r24	; 0x19
     578:	9a 8f       	std	Y+26, r25	; 0x1a
     57a:	ab 8f       	std	Y+27, r26	; 0x1b
     57c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     57e:	69 8d       	ldd	r22, Y+25	; 0x19
     580:	7a 8d       	ldd	r23, Y+26	; 0x1a
     582:	8b 8d       	ldd	r24, Y+27	; 0x1b
     584:	9c 8d       	ldd	r25, Y+28	; 0x1c
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	4a e7       	ldi	r20, 0x7A	; 122
     58c:	55 e4       	ldi	r21, 0x45	; 69
     58e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	8d 8b       	std	Y+21, r24	; 0x15
     598:	9e 8b       	std	Y+22, r25	; 0x16
     59a:	af 8b       	std	Y+23, r26	; 0x17
     59c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     59e:	6d 89       	ldd	r22, Y+21	; 0x15
     5a0:	7e 89       	ldd	r23, Y+22	; 0x16
     5a2:	8f 89       	ldd	r24, Y+23	; 0x17
     5a4:	98 8d       	ldd	r25, Y+24	; 0x18
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e8       	ldi	r20, 0x80	; 128
     5ac:	5f e3       	ldi	r21, 0x3F	; 63
     5ae:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
     5b2:	88 23       	and	r24, r24
     5b4:	2c f4       	brge	.+10     	; 0x5c0 <hornCallback+0x106>
		__ticks = 1;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	9c 8b       	std	Y+20, r25	; 0x14
     5bc:	8b 8b       	std	Y+19, r24	; 0x13
     5be:	3f c0       	rjmp	.+126    	; 0x63e <hornCallback+0x184>
	else if (__tmp > 65535)
     5c0:	6d 89       	ldd	r22, Y+21	; 0x15
     5c2:	7e 89       	ldd	r23, Y+22	; 0x16
     5c4:	8f 89       	ldd	r24, Y+23	; 0x17
     5c6:	98 8d       	ldd	r25, Y+24	; 0x18
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	3f ef       	ldi	r19, 0xFF	; 255
     5cc:	4f e7       	ldi	r20, 0x7F	; 127
     5ce:	57 e4       	ldi	r21, 0x47	; 71
     5d0:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
     5d4:	18 16       	cp	r1, r24
     5d6:	4c f5       	brge	.+82     	; 0x62a <hornCallback+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d8:	69 8d       	ldd	r22, Y+25	; 0x19
     5da:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5de:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e2       	ldi	r20, 0x20	; 32
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	9c 8b       	std	Y+20, r25	; 0x14
     5fe:	8b 8b       	std	Y+19, r24	; 0x13
     600:	0f c0       	rjmp	.+30     	; 0x620 <hornCallback+0x166>
     602:	80 e9       	ldi	r24, 0x90	; 144
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9a 8b       	std	Y+18, r25	; 0x12
     608:	89 8b       	std	Y+17, r24	; 0x11
     60a:	89 89       	ldd	r24, Y+17	; 0x11
     60c:	9a 89       	ldd	r25, Y+18	; 0x12
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <hornCallback+0x154>
     612:	9a 8b       	std	Y+18, r25	; 0x12
     614:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     616:	8b 89       	ldd	r24, Y+19	; 0x13
     618:	9c 89       	ldd	r25, Y+20	; 0x14
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	9c 8b       	std	Y+20, r25	; 0x14
     61e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     620:	8b 89       	ldd	r24, Y+19	; 0x13
     622:	9c 89       	ldd	r25, Y+20	; 0x14
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	69 f7       	brne	.-38     	; 0x602 <hornCallback+0x148>
     628:	14 c0       	rjmp	.+40     	; 0x652 <hornCallback+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     62a:	6d 89       	ldd	r22, Y+21	; 0x15
     62c:	7e 89       	ldd	r23, Y+22	; 0x16
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	98 8d       	ldd	r25, Y+24	; 0x18
     632:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	9c 8b       	std	Y+20, r25	; 0x14
     63c:	8b 8b       	std	Y+19, r24	; 0x13
     63e:	8b 89       	ldd	r24, Y+19	; 0x13
     640:	9c 89       	ldd	r25, Y+20	; 0x14
     642:	98 8b       	std	Y+16, r25	; 0x10
     644:	8f 87       	std	Y+15, r24	; 0x0f
     646:	8f 85       	ldd	r24, Y+15	; 0x0f
     648:	98 89       	ldd	r25, Y+16	; 0x10
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <hornCallback+0x190>
     64e:	98 8b       	std	Y+16, r25	; 0x10
     650:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(200);
            }
            if(FLAG_BIT.FLAG_ISR4){
     652:	80 91 bc 01 	lds	r24, 0x01BC
     656:	88 70       	andi	r24, 0x08	; 8
     658:	88 23       	and	r24, r24
     65a:	09 f4       	brne	.+2      	; 0x65e <hornCallback+0x1a4>
     65c:	90 c0       	rjmp	.+288    	; 0x77e <hornCallback+0x2c4>
                DutyCycle -= (DutyCycle<=0)?0:13;         //Decrementing 5% duty cycle
     65e:	80 91 00 01 	lds	r24, 0x0100
     662:	90 91 01 01 	lds	r25, 0x0101
     666:	98 a3       	std	Y+32, r25	; 0x20
     668:	8f 8f       	std	Y+31, r24	; 0x1f
     66a:	80 91 00 01 	lds	r24, 0x0100
     66e:	90 91 01 01 	lds	r25, 0x0101
     672:	18 16       	cp	r1, r24
     674:	19 06       	cpc	r1, r25
     676:	1c f0       	brlt	.+6      	; 0x67e <hornCallback+0x1c4>
     678:	1e 8e       	std	Y+30, r1	; 0x1e
     67a:	1d 8e       	std	Y+29, r1	; 0x1d
     67c:	04 c0       	rjmp	.+8      	; 0x686 <hornCallback+0x1cc>
     67e:	2d e0       	ldi	r18, 0x0D	; 13
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	3e 8f       	std	Y+30, r19	; 0x1e
     684:	2d 8f       	std	Y+29, r18	; 0x1d
     686:	8f 8d       	ldd	r24, Y+31	; 0x1f
     688:	98 a1       	ldd	r25, Y+32	; 0x20
     68a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     68c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	90 93 01 01 	sts	0x0101, r25
     696:	80 93 00 01 	sts	0x0100, r24
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a8 e4       	ldi	r26, 0x48	; 72
     6a0:	b3 e4       	ldi	r27, 0x43	; 67
     6a2:	8b 87       	std	Y+11, r24	; 0x0b
     6a4:	9c 87       	std	Y+12, r25	; 0x0c
     6a6:	ad 87       	std	Y+13, r26	; 0x0d
     6a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6aa:	6b 85       	ldd	r22, Y+11	; 0x0b
     6ac:	7c 85       	ldd	r23, Y+12	; 0x0c
     6ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4a e7       	ldi	r20, 0x7A	; 122
     6b8:	55 e4       	ldi	r21, 0x45	; 69
     6ba:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	8f 83       	std	Y+7, r24	; 0x07
     6c4:	98 87       	std	Y+8, r25	; 0x08
     6c6:	a9 87       	std	Y+9, r26	; 0x09
     6c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6ca:	6f 81       	ldd	r22, Y+7	; 0x07
     6cc:	78 85       	ldd	r23, Y+8	; 0x08
     6ce:	89 85       	ldd	r24, Y+9	; 0x09
     6d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
     6de:	88 23       	and	r24, r24
     6e0:	2c f4       	brge	.+10     	; 0x6ec <hornCallback+0x232>
		__ticks = 1;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9e 83       	std	Y+6, r25	; 0x06
     6e8:	8d 83       	std	Y+5, r24	; 0x05
     6ea:	3f c0       	rjmp	.+126    	; 0x76a <hornCallback+0x2b0>
	else if (__tmp > 65535)
     6ec:	6f 81       	ldd	r22, Y+7	; 0x07
     6ee:	78 85       	ldd	r23, Y+8	; 0x08
     6f0:	89 85       	ldd	r24, Y+9	; 0x09
     6f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	3f ef       	ldi	r19, 0xFF	; 255
     6f8:	4f e7       	ldi	r20, 0x7F	; 127
     6fa:	57 e4       	ldi	r21, 0x47	; 71
     6fc:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
     700:	18 16       	cp	r1, r24
     702:	4c f5       	brge	.+82     	; 0x756 <hornCallback+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     704:	6b 85       	ldd	r22, Y+11	; 0x0b
     706:	7c 85       	ldd	r23, Y+12	; 0x0c
     708:	8d 85       	ldd	r24, Y+13	; 0x0d
     70a:	9e 85       	ldd	r25, Y+14	; 0x0e
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e2       	ldi	r20, 0x20	; 32
     712:	51 e4       	ldi	r21, 0x41	; 65
     714:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	bc 01       	movw	r22, r24
     71e:	cd 01       	movw	r24, r26
     720:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	9e 83       	std	Y+6, r25	; 0x06
     72a:	8d 83       	std	Y+5, r24	; 0x05
     72c:	0f c0       	rjmp	.+30     	; 0x74c <hornCallback+0x292>
     72e:	80 e9       	ldi	r24, 0x90	; 144
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9c 83       	std	Y+4, r25	; 0x04
     734:	8b 83       	std	Y+3, r24	; 0x03
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <hornCallback+0x280>
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	9e 81       	ldd	r25, Y+6	; 0x06
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	9e 83       	std	Y+6, r25	; 0x06
     74a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74c:	8d 81       	ldd	r24, Y+5	; 0x05
     74e:	9e 81       	ldd	r25, Y+6	; 0x06
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	69 f7       	brne	.-38     	; 0x72e <hornCallback+0x274>
     754:	14 c0       	rjmp	.+40     	; 0x77e <hornCallback+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	6f 81       	ldd	r22, Y+7	; 0x07
     758:	78 85       	ldd	r23, Y+8	; 0x08
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	9e 83       	std	Y+6, r25	; 0x06
     768:	8d 83       	std	Y+5, r24	; 0x05
     76a:	8d 81       	ldd	r24, Y+5	; 0x05
     76c:	9e 81       	ldd	r25, Y+6	; 0x06
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <hornCallback+0x2bc>
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(200);
            }
            if(FLAG_BIT.FLAG_ISR1)
     77e:	80 91 bc 01 	lds	r24, 0x01BC
     782:	81 70       	andi	r24, 0x01	; 1
     784:	88 23       	and	r24, r24
     786:	39 f0       	breq	.+14     	; 0x796 <hornCallback+0x2dc>
                pwm(DutyCycle);
     788:	80 91 00 01 	lds	r24, 0x0100
     78c:	90 91 01 01 	lds	r25, 0x0101
     790:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <pwm>
     794:	04 c0       	rjmp	.+8      	; 0x79e <hornCallback+0x2e4>
            else
                pwm(0);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <pwm>
        }
    }
    if(temperature>500 && temperature<1000){
     79e:	80 91 ba 01 	lds	r24, 0x01BA
     7a2:	90 91 bb 01 	lds	r25, 0x01BB
     7a6:	31 e0       	ldi	r19, 0x01	; 1
     7a8:	85 3f       	cpi	r24, 0xF5	; 245
     7aa:	93 07       	cpc	r25, r19
     7ac:	64 f0       	brlt	.+24     	; 0x7c6 <hornCallback+0x30c>
     7ae:	80 91 ba 01 	lds	r24, 0x01BA
     7b2:	90 91 bb 01 	lds	r25, 0x01BB
     7b6:	23 e0       	ldi	r18, 0x03	; 3
     7b8:	88 3e       	cpi	r24, 0xE8	; 232
     7ba:	92 07       	cpc	r25, r18
     7bc:	24 f4       	brge	.+8      	; 0x7c6 <hornCallback+0x30c>
        pwm(30);     // Approximate PWM value for 10% duty cycle
     7be:	8e e1       	ldi	r24, 0x1E	; 30
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <pwm>
    }
    if(temperature>=1000){
     7c6:	80 91 ba 01 	lds	r24, 0x01BA
     7ca:	90 91 bb 01 	lds	r25, 0x01BB
     7ce:	33 e0       	ldi	r19, 0x03	; 3
     7d0:	88 3e       	cpi	r24, 0xE8	; 232
     7d2:	93 07       	cpc	r25, r19
     7d4:	24 f0       	brlt	.+8      	; 0x7de <hornCallback+0x324>
        pwm(0);
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <pwm>
    }
}
     7de:	a2 96       	adiw	r28, 0x22	; 34
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	cf 91       	pop	r28
     7ec:	df 91       	pop	r29
     7ee:	08 95       	ret

000007f0 <__vector_5>:
    volatile unsigned int FLAG_ISR2:1;
    volatile unsigned int FLAG_ISR3:1;
    volatile unsigned int FLAG_ISR4:1;
}FLAG_BIT;

ISR(PCINT2_vect){   //ISR for horn key
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	4f 93       	push	r20
     800:	5f 93       	push	r21
     802:	6f 93       	push	r22
     804:	7f 93       	push	r23
     806:	8f 93       	push	r24
     808:	9f 93       	push	r25
     80a:	af 93       	push	r26
     80c:	bf 93       	push	r27
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	00 d0       	rcall	.+0      	; 0x818 <__vector_5+0x28>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
    cli();
     81c:	f8 94       	cli
    FLAG_BIT.FLAG_ISR1=~FLAG_BIT.FLAG_ISR1;
     81e:	80 91 bc 01 	lds	r24, 0x01BC
     822:	81 70       	andi	r24, 0x01	; 1
     824:	80 95       	com	r24
     826:	81 70       	andi	r24, 0x01	; 1
     828:	98 2f       	mov	r25, r24
     82a:	91 70       	andi	r25, 0x01	; 1
     82c:	80 91 bc 01 	lds	r24, 0x01BC
     830:	8e 7f       	andi	r24, 0xFE	; 254
     832:	89 2b       	or	r24, r25
     834:	80 93 bc 01 	sts	0x01BC, r24
    if(FLAG_BIT.FLAG_ISR1){
     838:	80 91 bc 01 	lds	r24, 0x01BC
     83c:	81 70       	andi	r24, 0x01	; 1
     83e:	88 23       	and	r24, r24
     840:	09 f4       	brne	.+2      	; 0x844 <__vector_5+0x54>
     842:	58 c0       	rjmp	.+176    	; 0x8f4 <__vector_5+0x104>
        SET_BIT(PORTC,PC6);
     844:	a8 e2       	ldi	r26, 0x28	; 40
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e8 e2       	ldi	r30, 0x28	; 40
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	80 64       	ori	r24, 0x40	; 64
     850:	8c 93       	st	X, r24
        lcd_xy(0,1);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,1);
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("HORN ON");
     86a:	83 e1       	ldi	r24, 0x13	; 19
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	62 e0       	ldi	r22, 0x02	; 2
     876:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	62 e0       	ldi	r22, 0x02	; 2
     886:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     88a:	8b e1       	ldi	r24, 0x1B	; 27
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260; //Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     892:	80 91 00 01 	lds	r24, 0x0100
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	84 e6       	ldi	r24, 0x64	; 100
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	ac 01       	movw	r20, r24
     8a0:	24 9f       	mul	r18, r20
     8a2:	c0 01       	movw	r24, r0
     8a4:	25 9f       	mul	r18, r21
     8a6:	90 0d       	add	r25, r0
     8a8:	34 9f       	mul	r19, r20
     8aa:	90 0d       	add	r25, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	24 e0       	ldi	r18, 0x04	; 4
     8b0:	31 e0       	ldi	r19, 0x01	; 1
     8b2:	b9 01       	movw	r22, r18
     8b4:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     8b8:	cb 01       	movw	r24, r22
     8ba:	8a 83       	std	Y+2, r24	; 0x02
        lcd_int(duty);
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
        lcd_xy(0,3);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	63 e0       	ldi	r22, 0x03	; 3
     8ca:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP     ");
     8ce:	87 e2       	ldi	r24, 0x27	; 39
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,3);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	63 e0       	ldi	r22, 0x03	; 3
     8da:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP ");
     8de:	86 e3       	ldi	r24, 0x36	; 54
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_int(temperature);
     8e6:	80 91 ba 01 	lds	r24, 0x01BA
     8ea:	90 91 bb 01 	lds	r25, 0x01BB
     8ee:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
     8f2:	57 c0       	rjmp	.+174    	; 0x9a2 <__stack+0xa3>
    }
    else{
        CLR_BIT(PORTC,PC6);
     8f4:	a8 e2       	ldi	r26, 0x28	; 40
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e8 e2       	ldi	r30, 0x28	; 40
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8f 7b       	andi	r24, 0xBF	; 191
     900:	8c 93       	st	X, r24
        lcd_xy(0,1);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,1);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("HORN OFF");
     91a:	81 e4       	ldi	r24, 0x41	; 65
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	62 e0       	ldi	r22, 0x02	; 2
     926:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	62 e0       	ldi	r22, 0x02	; 2
     936:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     93a:	8b e1       	ldi	r24, 0x1B	; 27
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260;//Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     942:	80 91 00 01 	lds	r24, 0x0100
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	84 e6       	ldi	r24, 0x64	; 100
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	ac 01       	movw	r20, r24
     950:	24 9f       	mul	r18, r20
     952:	c0 01       	movw	r24, r0
     954:	25 9f       	mul	r18, r21
     956:	90 0d       	add	r25, r0
     958:	34 9f       	mul	r19, r20
     95a:	90 0d       	add	r25, r0
     95c:	11 24       	eor	r1, r1
     95e:	24 e0       	ldi	r18, 0x04	; 4
     960:	31 e0       	ldi	r19, 0x01	; 1
     962:	b9 01       	movw	r22, r18
     964:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     968:	cb 01       	movw	r24, r22
     96a:	89 83       	std	Y+1, r24	; 0x01
        lcd_int(duty);
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
        lcd_xy(0,3);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	63 e0       	ldi	r22, 0x03	; 3
     97a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP     ");
     97e:	87 e2       	ldi	r24, 0x27	; 39
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,3);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	63 e0       	ldi	r22, 0x03	; 3
     98a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP ");
     98e:	86 e3       	ldi	r24, 0x36	; 54
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_int(temperature);
     996:	80 91 ba 01 	lds	r24, 0x01BA
     99a:	90 91 bb 01 	lds	r25, 0x01BB
     99e:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
    }
    sei();
     9a2:	78 94       	sei
}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <__vector_4>:

ISR(PCINT1_vect){   //ISR for ignition switch
     9ce:	1f 92       	push	r1
     9d0:	0f 92       	push	r0
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	0f 92       	push	r0
     9d6:	11 24       	eor	r1, r1
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <__vector_4+0x28>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
    cli();
     9fa:	f8 94       	cli
    if(!(PINC & (1 << PINC5))){
     9fc:	e6 e2       	ldi	r30, 0x26	; 38
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	80 72       	andi	r24, 0x20	; 32
     a08:	90 70       	andi	r25, 0x00	; 0
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__vector_4+0x42>
     a0e:	5d c0       	rjmp	.+186    	; 0xaca <__vector_4+0xfc>
        FLAG_BIT.FLAG_ISR2=1;
     a10:	80 91 bc 01 	lds	r24, 0x01BC
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	80 93 bc 01 	sts	0x01BC, r24
        SET_BIT(PORTC,PC4);
     a1a:	a8 e2       	ldi	r26, 0x28	; 40
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e8 e2       	ldi	r30, 0x28	; 40
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	80 61       	ori	r24, 0x10	; 16
     a26:	8c 93       	st	X, r24
        lcd_xy(0,0);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,0);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("ENGINE ON");
     a40:	8a e4       	ldi	r24, 0x4A	; 74
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	62 e0       	ldi	r22, 0x02	; 2
     a4c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	62 e0       	ldi	r22, 0x02	; 2
     a5c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     a60:	8b e1       	ldi	r24, 0x1B	; 27
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260; //Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     a68:	80 91 00 01 	lds	r24, 0x0100
     a6c:	28 2f       	mov	r18, r24
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	84 e6       	ldi	r24, 0x64	; 100
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	ac 01       	movw	r20, r24
     a76:	24 9f       	mul	r18, r20
     a78:	c0 01       	movw	r24, r0
     a7a:	25 9f       	mul	r18, r21
     a7c:	90 0d       	add	r25, r0
     a7e:	34 9f       	mul	r19, r20
     a80:	90 0d       	add	r25, r0
     a82:	11 24       	eor	r1, r1
     a84:	24 e0       	ldi	r18, 0x04	; 4
     a86:	31 e0       	ldi	r19, 0x01	; 1
     a88:	b9 01       	movw	r22, r18
     a8a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     a8e:	cb 01       	movw	r24, r22
     a90:	8a 83       	std	Y+2, r24	; 0x02
        lcd_int(duty);
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	88 2f       	mov	r24, r24
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
        lcd_xy(0,3);
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	63 e0       	ldi	r22, 0x03	; 3
     aa0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP     ");
     aa4:	87 e2       	ldi	r24, 0x27	; 39
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,3);
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	63 e0       	ldi	r22, 0x03	; 3
     ab0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP ");
     ab4:	86 e3       	ldi	r24, 0x36	; 54
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_int(temperature);
     abc:	80 91 ba 01 	lds	r24, 0x01BA
     ac0:	90 91 bb 01 	lds	r25, 0x01BB
     ac4:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
     ac8:	46 c0       	rjmp	.+140    	; 0xb56 <__vector_4+0x188>
    }
    else{
        FLAG_BIT.FLAG_ISR2=0;
     aca:	80 91 bc 01 	lds	r24, 0x01BC
     ace:	8d 7f       	andi	r24, 0xFD	; 253
     ad0:	80 93 bc 01 	sts	0x01BC, r24
        CLR_BIT(PORTC,PC4);
     ad4:	a8 e2       	ldi	r26, 0x28	; 40
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	e8 e2       	ldi	r30, 0x28	; 40
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8f 7e       	andi	r24, 0xEF	; 239
     ae0:	8c 93       	st	X, r24
        lcd_xy(0,0);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,0);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("ENGINE OFF");
     afa:	84 e5       	ldi	r24, 0x54	; 84
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	62 e0       	ldi	r22, 0x02	; 2
     b16:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     b1a:	8b e1       	ldi	r24, 0x1B	; 27
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260;//Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     b22:	80 91 00 01 	lds	r24, 0x0100
     b26:	28 2f       	mov	r18, r24
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	84 e6       	ldi	r24, 0x64	; 100
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	ac 01       	movw	r20, r24
     b30:	24 9f       	mul	r18, r20
     b32:	c0 01       	movw	r24, r0
     b34:	25 9f       	mul	r18, r21
     b36:	90 0d       	add	r25, r0
     b38:	34 9f       	mul	r19, r20
     b3a:	90 0d       	add	r25, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	24 e0       	ldi	r18, 0x04	; 4
     b40:	31 e0       	ldi	r19, 0x01	; 1
     b42:	b9 01       	movw	r22, r18
     b44:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     b48:	cb 01       	movw	r24, r22
     b4a:	89 83       	std	Y+1, r24	; 0x01
        lcd_int(duty);
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
    }
    sei();
     b56:	78 94       	sei
}
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_1>:

ISR(INT0_vect){ //ISR for increment switch
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <__vector_1+0x28>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	cli();
     bae:	f8 94       	cli
    FLAG_BIT.FLAG_ISR3=~FLAG_BIT.FLAG_ISR3;
     bb0:	80 91 bc 01 	lds	r24, 0x01BC
     bb4:	86 95       	lsr	r24
     bb6:	86 95       	lsr	r24
     bb8:	81 70       	andi	r24, 0x01	; 1
     bba:	80 95       	com	r24
     bbc:	81 70       	andi	r24, 0x01	; 1
     bbe:	81 70       	andi	r24, 0x01	; 1
     bc0:	98 2f       	mov	r25, r24
     bc2:	99 0f       	add	r25, r25
     bc4:	99 0f       	add	r25, r25
     bc6:	80 91 bc 01 	lds	r24, 0x01BC
     bca:	8b 7f       	andi	r24, 0xFB	; 251
     bcc:	89 2b       	or	r24, r25
     bce:	80 93 bc 01 	sts	0x01BC, r24
    if(FLAG_BIT.FLAG_ISR3){
     bd2:	80 91 bc 01 	lds	r24, 0x01BC
     bd6:	84 70       	andi	r24, 0x04	; 4
     bd8:	88 23       	and	r24, r24
     bda:	09 f4       	brne	.+2      	; 0xbde <__vector_1+0x5c>
     bdc:	50 c0       	rjmp	.+160    	; 0xc7e <__vector_1+0xfc>
        SET_BIT(PORTD,PD1);
     bde:	ab e2       	ldi	r26, 0x2B	; 43
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	eb e2       	ldi	r30, 0x2B	; 43
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	8c 93       	st	X, r24
        lcd_xy(0,2);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	62 e0       	ldi	r22, 0x02	; 2
     bf0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     c04:	8b e1       	ldi	r24, 0x1B	; 27
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260;//Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     c0c:	80 91 00 01 	lds	r24, 0x0100
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	84 e6       	ldi	r24, 0x64	; 100
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	ac 01       	movw	r20, r24
     c1a:	24 9f       	mul	r18, r20
     c1c:	c0 01       	movw	r24, r0
     c1e:	25 9f       	mul	r18, r21
     c20:	90 0d       	add	r25, r0
     c22:	34 9f       	mul	r19, r20
     c24:	90 0d       	add	r25, r0
     c26:	11 24       	eor	r1, r1
     c28:	24 e0       	ldi	r18, 0x04	; 4
     c2a:	31 e0       	ldi	r19, 0x01	; 1
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     c32:	cb 01       	movw	r24, r22
     c34:	8a 83       	std	Y+2, r24	; 0x02
        if(duty==1)
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	29 f4       	brne	.+10     	; 0xc46 <__vector_1+0xc4>
            lcd_str("100");
     c3c:	8f e5       	ldi	r24, 0x5F	; 95
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__vector_1+0xce>
        else
        lcd_int(duty);
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
        lcd_xy(0,3);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	63 e0       	ldi	r22, 0x03	; 3
     c54:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP     ");
     c58:	87 e2       	ldi	r24, 0x27	; 39
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,3);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	63 e0       	ldi	r22, 0x03	; 3
     c64:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP ");
     c68:	86 e3       	ldi	r24, 0x36	; 54
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_int(temperature);
     c70:	80 91 ba 01 	lds	r24, 0x01BA
     c74:	90 91 bb 01 	lds	r25, 0x01BB
     c78:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
     c7c:	31 c0       	rjmp	.+98     	; 0xce0 <__vector_1+0x15e>
    }
    else{
        CLR_BIT(PORTD,PD1);
     c7e:	ab e2       	ldi	r26, 0x2B	; 43
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	eb e2       	ldi	r30, 0x2B	; 43
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8d 7f       	andi	r24, 0xFD	; 253
     c8a:	8c 93       	st	X, r24
        lcd_xy(0,2);
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     ca4:	8b e1       	ldi	r24, 0x1B	; 27
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260;//Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     cac:	80 91 00 01 	lds	r24, 0x0100
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	84 e6       	ldi	r24, 0x64	; 100
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	ac 01       	movw	r20, r24
     cba:	24 9f       	mul	r18, r20
     cbc:	c0 01       	movw	r24, r0
     cbe:	25 9f       	mul	r18, r21
     cc0:	90 0d       	add	r25, r0
     cc2:	34 9f       	mul	r19, r20
     cc4:	90 0d       	add	r25, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	24 e0       	ldi	r18, 0x04	; 4
     cca:	31 e0       	ldi	r19, 0x01	; 1
     ccc:	b9 01       	movw	r22, r18
     cce:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     cd2:	cb 01       	movw	r24, r22
     cd4:	89 83       	std	Y+1, r24	; 0x01
        lcd_int(duty);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
    }
    sei();
     ce0:	78 94       	sei
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <__vector_2>:

ISR(INT1_vect){ //ISR for decrement switch
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <__vector_2+0x28>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	cli();
     d38:	f8 94       	cli
    FLAG_BIT.FLAG_ISR4=~FLAG_BIT.FLAG_ISR4;
     d3a:	80 91 bc 01 	lds	r24, 0x01BC
     d3e:	86 95       	lsr	r24
     d40:	86 95       	lsr	r24
     d42:	86 95       	lsr	r24
     d44:	81 70       	andi	r24, 0x01	; 1
     d46:	80 95       	com	r24
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	81 70       	andi	r24, 0x01	; 1
     d4c:	98 2f       	mov	r25, r24
     d4e:	99 0f       	add	r25, r25
     d50:	99 0f       	add	r25, r25
     d52:	99 0f       	add	r25, r25
     d54:	80 91 bc 01 	lds	r24, 0x01BC
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	89 2b       	or	r24, r25
     d5c:	80 93 bc 01 	sts	0x01BC, r24
    if(FLAG_BIT.FLAG_ISR4){
     d60:	80 91 bc 01 	lds	r24, 0x01BC
     d64:	88 70       	andi	r24, 0x08	; 8
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <__vector_2+0x60>
     d6a:	48 c0       	rjmp	.+144    	; 0xdfc <__vector_2+0xf0>
        SET_BIT(PORTD,PD4);
     d6c:	ab e2       	ldi	r26, 0x2B	; 43
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	eb e2       	ldi	r30, 0x2B	; 43
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	8c 93       	st	X, r24
        lcd_xy(0,2);
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     d92:	8b e1       	ldi	r24, 0x1B	; 27
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260;//Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     d9a:	80 91 00 01 	lds	r24, 0x0100
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	84 e6       	ldi	r24, 0x64	; 100
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	ac 01       	movw	r20, r24
     da8:	24 9f       	mul	r18, r20
     daa:	c0 01       	movw	r24, r0
     dac:	25 9f       	mul	r18, r21
     dae:	90 0d       	add	r25, r0
     db0:	34 9f       	mul	r19, r20
     db2:	90 0d       	add	r25, r0
     db4:	11 24       	eor	r1, r1
     db6:	24 e0       	ldi	r18, 0x04	; 4
     db8:	31 e0       	ldi	r19, 0x01	; 1
     dba:	b9 01       	movw	r22, r18
     dbc:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     dc0:	cb 01       	movw	r24, r22
     dc2:	8a 83       	std	Y+2, r24	; 0x02
        lcd_int(duty);
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
        lcd_xy(0,3);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP     ");
     dd6:	87 e2       	ldi	r24, 0x27	; 39
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,3);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("COIL TEMP ");
     de6:	86 e3       	ldi	r24, 0x36	; 54
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_int(temperature);
     dee:	80 91 ba 01 	lds	r24, 0x01BA
     df2:	90 91 bb 01 	lds	r25, 0x01BB
     df6:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
     dfa:	31 c0       	rjmp	.+98     	; 0xe5e <__vector_2+0x152>
    }
    else{
        CLR_BIT(PORTD,PD4);
     dfc:	ab e2       	ldi	r26, 0x2B	; 43
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	eb e2       	ldi	r30, 0x2B	; 43
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7e       	andi	r24, 0xEF	; 239
     e08:	8c 93       	st	X, r24
        lcd_xy(0,2);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("                ");
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        lcd_xy(0,2);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	62 e0       	ldi	r22, 0x02	; 2
     e1e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
        lcd_str("DUTY CYCLE ");
     e22:	8b e1       	ldi	r24, 0x1B	; 27
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
        uint8_t duty=((DutyCycle)*100)/260;//Approximate value for Linear mapping of 0-255 to duty cycle 0-100
     e2a:	80 91 00 01 	lds	r24, 0x0100
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	84 e6       	ldi	r24, 0x64	; 100
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	ac 01       	movw	r20, r24
     e38:	24 9f       	mul	r18, r20
     e3a:	c0 01       	movw	r24, r0
     e3c:	25 9f       	mul	r18, r21
     e3e:	90 0d       	add	r25, r0
     e40:	34 9f       	mul	r19, r20
     e42:	90 0d       	add	r25, r0
     e44:	11 24       	eor	r1, r1
     e46:	24 e0       	ldi	r18, 0x04	; 4
     e48:	31 e0       	ldi	r19, 0x01	; 1
     e4a:	b9 01       	movw	r22, r18
     e4c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     e50:	cb 01       	movw	r24, r22
     e52:	89 83       	std	Y+1, r24	; 0x01
        lcd_int(duty);
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd_int>
    }
    sei();
     e5e:	78 94       	sei
}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <lcd_init>:
#include "GPIO.h"
#include "LCD.h"
extern uint8_t DutyCycle;

//LCD initialization
void lcd_init(void){
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	c2 5d       	subi	r28, 0xD2	; 210
     e98:	d0 40       	sbci	r29, 0x00	; 0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	fe 01       	movw	r30, r28
     ea6:	e1 53       	subi	r30, 0x31	; 49
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a8 ec       	ldi	r26, 0xC8	; 200
     eb0:	b2 e4       	ldi	r27, 0x42	; 66
     eb2:	80 83       	st	Z, r24
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	a2 83       	std	Z+2, r26	; 0x02
     eb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eba:	8e 01       	movw	r16, r28
     ebc:	05 53       	subi	r16, 0x35	; 53
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	fe 01       	movw	r30, r28
     ec2:	e1 53       	subi	r30, 0x31	; 49
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	55 e4       	ldi	r21, 0x45	; 69
     ed6:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	f8 01       	movw	r30, r16
     ee0:	80 83       	st	Z, r24
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	a2 83       	std	Z+2, r26	; 0x02
     ee6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ee8:	fe 01       	movw	r30, r28
     eea:	e5 53       	subi	r30, 0x35	; 53
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	44 f4       	brge	.+16     	; 0xf16 <lcd_init+0x8c>
		__ticks = 1;
     f06:	fe 01       	movw	r30, r28
     f08:	e7 53       	subi	r30, 0x37	; 55
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	64 c0       	rjmp	.+200    	; 0xfde <lcd_init+0x154>
	else if (__tmp > 65535)
     f16:	fe 01       	movw	r30, r28
     f18:	e5 53       	subi	r30, 0x35	; 53
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
     f30:	18 16       	cp	r1, r24
     f32:	0c f0       	brlt	.+2      	; 0xf36 <lcd_init+0xac>
     f34:	43 c0       	rjmp	.+134    	; 0xfbc <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	fe 01       	movw	r30, r28
     f38:	e1 53       	subi	r30, 0x31	; 49
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8e 01       	movw	r16, r28
     f56:	07 53       	subi	r16, 0x37	; 55
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	f8 01       	movw	r30, r16
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	1f c0       	rjmp	.+62     	; 0xfac <lcd_init+0x122>
     f6e:	fe 01       	movw	r30, r28
     f70:	e9 53       	subi	r30, 0x39	; 57
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 e9       	ldi	r24, 0x90	; 144
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
     f7c:	fe 01       	movw	r30, r28
     f7e:	e9 53       	subi	r30, 0x39	; 57
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <lcd_init+0xfc>
     f8a:	fe 01       	movw	r30, r28
     f8c:	e9 53       	subi	r30, 0x39	; 57
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	de 01       	movw	r26, r28
     f96:	a7 53       	subi	r26, 0x37	; 55
     f98:	bf 4f       	sbci	r27, 0xFF	; 255
     f9a:	fe 01       	movw	r30, r28
     f9c:	e7 53       	subi	r30, 0x37	; 55
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	11 96       	adiw	r26, 0x01	; 1
     fa8:	9c 93       	st	X, r25
     faa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fac:	fe 01       	movw	r30, r28
     fae:	e7 53       	subi	r30, 0x37	; 55
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	d1 f6       	brne	.-76     	; 0xf6e <lcd_init+0xe4>
     fba:	27 c0       	rjmp	.+78     	; 0x100a <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbc:	8e 01       	movw	r16, r28
     fbe:	07 53       	subi	r16, 0x37	; 55
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	fe 01       	movw	r30, r28
     fc4:	e5 53       	subi	r30, 0x35	; 53
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	60 81       	ld	r22, Z
     fca:	71 81       	ldd	r23, Z+1	; 0x01
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	f8 01       	movw	r30, r16
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
     fde:	de 01       	movw	r26, r28
     fe0:	ab 53       	subi	r26, 0x3B	; 59
     fe2:	bf 4f       	sbci	r27, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	e7 53       	subi	r30, 0x37	; 55
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	8d 93       	st	X+, r24
     ff0:	9c 93       	st	X, r25
     ff2:	fe 01       	movw	r30, r28
     ff4:	eb 53       	subi	r30, 0x3B	; 59
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <lcd_init+0x172>
    1000:	fe 01       	movw	r30, r28
    1002:	eb 53       	subi	r30, 0x3B	; 59
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
    _delay_ms(100);
    lcd_RS_port &= ~(1<<lcd_RS_bit);
    100a:	a8 e2       	ldi	r26, 0x28	; 40
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e2       	ldi	r30, 0x28	; 40
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8b 7f       	andi	r24, 0xFB	; 251
    1016:	8c 93       	st	X, r24
    lcd_E_port &= ~(1<<lcd_E_bit);
    1018:	a8 e2       	ldi	r26, 0x28	; 40
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e8 e2       	ldi	r30, 0x28	; 40
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
    lcd_write(lcd_FunctionReset);
    1026:	80 e3       	ldi	r24, 0x30	; 48
    1028:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
    102c:	fe 01       	movw	r30, r28
    102e:	ef 53       	subi	r30, 0x3F	; 63
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e2       	ldi	r26, 0x20	; 32
    1038:	b1 e4       	ldi	r27, 0x41	; 65
    103a:	80 83       	st	Z, r24
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	a2 83       	std	Z+2, r26	; 0x02
    1040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1042:	8e 01       	movw	r16, r28
    1044:	03 54       	subi	r16, 0x43	; 67
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	fe 01       	movw	r30, r28
    104a:	ef 53       	subi	r30, 0x3F	; 63
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a e7       	ldi	r20, 0x7A	; 122
    105c:	55 e4       	ldi	r21, 0x45	; 69
    105e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	f8 01       	movw	r30, r16
    1068:	80 83       	st	Z, r24
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	a2 83       	std	Z+2, r26	; 0x02
    106e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1070:	fe 01       	movw	r30, r28
    1072:	e3 54       	subi	r30, 0x43	; 67
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	5f e3       	ldi	r21, 0x3F	; 63
    1086:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    108a:	88 23       	and	r24, r24
    108c:	44 f4       	brge	.+16     	; 0x109e <lcd_init+0x214>
		__ticks = 1;
    108e:	fe 01       	movw	r30, r28
    1090:	e5 54       	subi	r30, 0x45	; 69
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
    109c:	64 c0       	rjmp	.+200    	; 0x1166 <lcd_init+0x2dc>
	else if (__tmp > 65535)
    109e:	fe 01       	movw	r30, r28
    10a0:	e3 54       	subi	r30, 0x43	; 67
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f e7       	ldi	r20, 0x7F	; 127
    10b2:	57 e4       	ldi	r21, 0x47	; 71
    10b4:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	0c f0       	brlt	.+2      	; 0x10be <lcd_init+0x234>
    10bc:	43 c0       	rjmp	.+134    	; 0x1144 <lcd_init+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10be:	fe 01       	movw	r30, r28
    10c0:	ef 53       	subi	r30, 0x3F	; 63
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8e 01       	movw	r16, r28
    10de:	05 54       	subi	r16, 0x45	; 69
    10e0:	1f 4f       	sbci	r17, 0xFF	; 255
    10e2:	bc 01       	movw	r22, r24
    10e4:	cd 01       	movw	r24, r26
    10e6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	f8 01       	movw	r30, r16
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
    10f4:	1f c0       	rjmp	.+62     	; 0x1134 <lcd_init+0x2aa>
    10f6:	fe 01       	movw	r30, r28
    10f8:	e7 54       	subi	r30, 0x47	; 71
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 e9       	ldi	r24, 0x90	; 144
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	fe 01       	movw	r30, r28
    1106:	e7 54       	subi	r30, 0x47	; 71
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <lcd_init+0x284>
    1112:	fe 01       	movw	r30, r28
    1114:	e7 54       	subi	r30, 0x47	; 71
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	de 01       	movw	r26, r28
    111e:	a5 54       	subi	r26, 0x45	; 69
    1120:	bf 4f       	sbci	r27, 0xFF	; 255
    1122:	fe 01       	movw	r30, r28
    1124:	e5 54       	subi	r30, 0x45	; 69
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	80 81       	ld	r24, Z
    112a:	91 81       	ldd	r25, Z+1	; 0x01
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	9c 93       	st	X, r25
    1132:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1134:	fe 01       	movw	r30, r28
    1136:	e5 54       	subi	r30, 0x45	; 69
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	d1 f6       	brne	.-76     	; 0x10f6 <lcd_init+0x26c>
    1142:	27 c0       	rjmp	.+78     	; 0x1192 <lcd_init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	8e 01       	movw	r16, r28
    1146:	05 54       	subi	r16, 0x45	; 69
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	fe 01       	movw	r30, r28
    114c:	e3 54       	subi	r30, 0x43	; 67
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	f8 01       	movw	r30, r16
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
    1166:	de 01       	movw	r26, r28
    1168:	a9 54       	subi	r26, 0x49	; 73
    116a:	bf 4f       	sbci	r27, 0xFF	; 255
    116c:	fe 01       	movw	r30, r28
    116e:	e5 54       	subi	r30, 0x45	; 69
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	8d 93       	st	X+, r24
    1178:	9c 93       	st	X, r25
    117a:	fe 01       	movw	r30, r28
    117c:	e9 54       	subi	r30, 0x49	; 73
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <lcd_init+0x2fa>
    1188:	fe 01       	movw	r30, r28
    118a:	e9 54       	subi	r30, 0x49	; 73
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    _delay_ms(10);
    lcd_write(lcd_FunctionReset);
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
    1198:	fe 01       	movw	r30, r28
    119a:	ed 54       	subi	r30, 0x4D	; 77
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a8 e4       	ldi	r26, 0x48	; 72
    11a4:	b3 e4       	ldi	r27, 0x43	; 67
    11a6:	80 83       	st	Z, r24
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	a2 83       	std	Z+2, r26	; 0x02
    11ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11ae:	8e 01       	movw	r16, r28
    11b0:	01 55       	subi	r16, 0x51	; 81
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	fe 01       	movw	r30, r28
    11b6:	ed 54       	subi	r30, 0x4D	; 77
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	2b ea       	ldi	r18, 0xAB	; 171
    11c4:	3a ea       	ldi	r19, 0xAA	; 170
    11c6:	4a ea       	ldi	r20, 0xAA	; 170
    11c8:	50 e4       	ldi	r21, 0x40	; 64
    11ca:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 83       	st	Z, r24
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	a2 83       	std	Z+2, r26	; 0x02
    11da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11dc:	fe 01       	movw	r30, r28
    11de:	e1 55       	subi	r30, 0x51	; 81
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	60 81       	ld	r22, Z
    11e4:	71 81       	ldd	r23, Z+1	; 0x01
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	34 f4       	brge	.+12     	; 0x1206 <lcd_init+0x37c>
		__ticks = 1;
    11fa:	fe 01       	movw	r30, r28
    11fc:	e2 55       	subi	r30, 0x52	; 82
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24
    1204:	e0 c0       	rjmp	.+448    	; 0x13c6 <lcd_init+0x53c>
	else if (__tmp > 255)
    1206:	fe 01       	movw	r30, r28
    1208:	e1 55       	subi	r30, 0x51	; 81
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1220:	18 16       	cp	r1, r24
    1222:	0c f0       	brlt	.+2      	; 0x1226 <lcd_init+0x39c>
    1224:	c0 c0       	rjmp	.+384    	; 0x13a6 <lcd_init+0x51c>
	{
		_delay_ms(__us / 1000.0);
    1226:	fe 01       	movw	r30, r28
    1228:	ed 54       	subi	r30, 0x4D	; 77
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a e7       	ldi	r20, 0x7A	; 122
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	fe 01       	movw	r30, r28
    1246:	e6 55       	subi	r30, 0x56	; 86
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 83       	st	Z, r24
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	a2 83       	std	Z+2, r26	; 0x02
    1250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	8e 01       	movw	r16, r28
    1254:	0a 55       	subi	r16, 0x5A	; 90
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	fe 01       	movw	r30, r28
    125a:	e6 55       	subi	r30, 0x56	; 86
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a e7       	ldi	r20, 0x7A	; 122
    126c:	55 e4       	ldi	r21, 0x45	; 69
    126e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	f8 01       	movw	r30, r16
    1278:	80 83       	st	Z, r24
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	a2 83       	std	Z+2, r26	; 0x02
    127e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1280:	fe 01       	movw	r30, r28
    1282:	ea 55       	subi	r30, 0x5A	; 90
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	44 f4       	brge	.+16     	; 0x12ae <lcd_init+0x424>
		__ticks = 1;
    129e:	fe 01       	movw	r30, r28
    12a0:	ec 55       	subi	r30, 0x5C	; 92
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
    12ac:	64 c0       	rjmp	.+200    	; 0x1376 <lcd_init+0x4ec>
	else if (__tmp > 65535)
    12ae:	fe 01       	movw	r30, r28
    12b0:	ea 55       	subi	r30, 0x5A	; 90
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	0c f0       	brlt	.+2      	; 0x12ce <lcd_init+0x444>
    12cc:	43 c0       	rjmp	.+134    	; 0x1354 <lcd_init+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ce:	fe 01       	movw	r30, r28
    12d0:	e6 55       	subi	r30, 0x56	; 86
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	93 81       	ldd	r25, Z+3	; 0x03
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	8e 01       	movw	r16, r28
    12ee:	0c 55       	subi	r16, 0x5C	; 92
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	f8 01       	movw	r30, r16
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
    1304:	1f c0       	rjmp	.+62     	; 0x1344 <lcd_init+0x4ba>
    1306:	fe 01       	movw	r30, r28
    1308:	ee 55       	subi	r30, 0x5E	; 94
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 e9       	ldi	r24, 0x90	; 144
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	80 83       	st	Z, r24
    1314:	fe 01       	movw	r30, r28
    1316:	ee 55       	subi	r30, 0x5E	; 94
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <lcd_init+0x494>
    1322:	fe 01       	movw	r30, r28
    1324:	ee 55       	subi	r30, 0x5E	; 94
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	de 01       	movw	r26, r28
    132e:	ac 55       	subi	r26, 0x5C	; 92
    1330:	bf 4f       	sbci	r27, 0xFF	; 255
    1332:	fe 01       	movw	r30, r28
    1334:	ec 55       	subi	r30, 0x5C	; 92
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	11 96       	adiw	r26, 0x01	; 1
    1340:	9c 93       	st	X, r25
    1342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	fe 01       	movw	r30, r28
    1346:	ec 55       	subi	r30, 0x5C	; 92
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	d1 f6       	brne	.-76     	; 0x1306 <lcd_init+0x47c>
    1352:	4b c0       	rjmp	.+150    	; 0x13ea <lcd_init+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	8e 01       	movw	r16, r28
    1356:	0c 55       	subi	r16, 0x5C	; 92
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	fe 01       	movw	r30, r28
    135c:	ea 55       	subi	r30, 0x5A	; 90
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	f8 01       	movw	r30, r16
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
    1376:	de 01       	movw	r26, r28
    1378:	a0 56       	subi	r26, 0x60	; 96
    137a:	bf 4f       	sbci	r27, 0xFF	; 255
    137c:	fe 01       	movw	r30, r28
    137e:	ec 55       	subi	r30, 0x5C	; 92
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	9c 93       	st	X, r25
    138a:	8e 93       	st	-X, r24
    138c:	fe 01       	movw	r30, r28
    138e:	e0 56       	subi	r30, 0x60	; 96
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <lcd_init+0x50c>
    139a:	fe 01       	movw	r30, r28
    139c:	e0 56       	subi	r30, 0x60	; 96
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	91 83       	std	Z+1, r25	; 0x01
    13a2:	80 83       	st	Z, r24
    13a4:	22 c0       	rjmp	.+68     	; 0x13ea <lcd_init+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13a6:	8e 01       	movw	r16, r28
    13a8:	02 55       	subi	r16, 0x52	; 82
    13aa:	1f 4f       	sbci	r17, 0xFF	; 255
    13ac:	fe 01       	movw	r30, r28
    13ae:	e1 55       	subi	r30, 0x51	; 81
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	f8 01       	movw	r30, r16
    13c4:	80 83       	st	Z, r24
    13c6:	de 01       	movw	r26, r28
    13c8:	a1 56       	subi	r26, 0x61	; 97
    13ca:	bf 4f       	sbci	r27, 0xFF	; 255
    13cc:	fe 01       	movw	r30, r28
    13ce:	e2 55       	subi	r30, 0x52	; 82
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13d6:	fe 01       	movw	r30, r28
    13d8:	e1 56       	subi	r30, 0x61	; 97
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	8a 95       	dec	r24
    13e0:	f1 f7       	brne	.-4      	; 0x13de <lcd_init+0x554>
    13e2:	fe 01       	movw	r30, r28
    13e4:	e1 56       	subi	r30, 0x61	; 97
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	80 83       	st	Z, r24
    _delay_us(200);
    lcd_write(lcd_FunctionReset);
    13ea:	80 e3       	ldi	r24, 0x30	; 48
    13ec:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
    13f0:	fe 01       	movw	r30, r28
    13f2:	e5 56       	subi	r30, 0x65	; 101
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a8 e4       	ldi	r26, 0x48	; 72
    13fc:	b3 e4       	ldi	r27, 0x43	; 67
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1406:	8e 01       	movw	r16, r28
    1408:	09 56       	subi	r16, 0x69	; 105
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	fe 01       	movw	r30, r28
    140e:	e5 56       	subi	r30, 0x65	; 101
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	2b ea       	ldi	r18, 0xAB	; 171
    141c:	3a ea       	ldi	r19, 0xAA	; 170
    141e:	4a ea       	ldi	r20, 0xAA	; 170
    1420:	50 e4       	ldi	r21, 0x40	; 64
    1422:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	f8 01       	movw	r30, r16
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1434:	fe 01       	movw	r30, r28
    1436:	e9 56       	subi	r30, 0x69	; 105
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	34 f4       	brge	.+12     	; 0x145e <lcd_init+0x5d4>
		__ticks = 1;
    1452:	fe 01       	movw	r30, r28
    1454:	ea 56       	subi	r30, 0x6A	; 106
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	80 83       	st	Z, r24
    145c:	e0 c0       	rjmp	.+448    	; 0x161e <lcd_init+0x794>
	else if (__tmp > 255)
    145e:	fe 01       	movw	r30, r28
    1460:	e9 56       	subi	r30, 0x69	; 105
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	53 e4       	ldi	r21, 0x43	; 67
    1474:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	0c f0       	brlt	.+2      	; 0x147e <lcd_init+0x5f4>
    147c:	c0 c0       	rjmp	.+384    	; 0x15fe <lcd_init+0x774>
	{
		_delay_ms(__us / 1000.0);
    147e:	fe 01       	movw	r30, r28
    1480:	e5 56       	subi	r30, 0x65	; 101
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	60 81       	ld	r22, Z
    1486:	71 81       	ldd	r23, Z+1	; 0x01
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	4a e7       	ldi	r20, 0x7A	; 122
    1492:	54 e4       	ldi	r21, 0x44	; 68
    1494:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	fe 01       	movw	r30, r28
    149e:	ee 56       	subi	r30, 0x6E	; 110
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	8e 01       	movw	r16, r28
    14ac:	02 57       	subi	r16, 0x72	; 114
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	ee 56       	subi	r30, 0x6E	; 110
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	55 e4       	ldi	r21, 0x45	; 69
    14c6:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	fe 01       	movw	r30, r28
    14da:	e2 57       	subi	r30, 0x72	; 114
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	44 f4       	brge	.+16     	; 0x1506 <lcd_init+0x67c>
		__ticks = 1;
    14f6:	fe 01       	movw	r30, r28
    14f8:	e4 57       	subi	r30, 0x74	; 116
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	64 c0       	rjmp	.+200    	; 0x15ce <lcd_init+0x744>
	else if (__tmp > 65535)
    1506:	fe 01       	movw	r30, r28
    1508:	e2 57       	subi	r30, 0x72	; 114
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	0c f0       	brlt	.+2      	; 0x1526 <lcd_init+0x69c>
    1524:	43 c0       	rjmp	.+134    	; 0x15ac <lcd_init+0x722>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	fe 01       	movw	r30, r28
    1528:	ee 56       	subi	r30, 0x6E	; 110
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8e 01       	movw	r16, r28
    1546:	04 57       	subi	r16, 0x74	; 116
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
    155c:	1f c0       	rjmp	.+62     	; 0x159c <lcd_init+0x712>
    155e:	fe 01       	movw	r30, r28
    1560:	e6 57       	subi	r30, 0x76	; 118
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 e9       	ldi	r24, 0x90	; 144
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156c:	fe 01       	movw	r30, r28
    156e:	e6 57       	subi	r30, 0x76	; 118
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <lcd_init+0x6ec>
    157a:	fe 01       	movw	r30, r28
    157c:	e6 57       	subi	r30, 0x76	; 118
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1584:	de 01       	movw	r26, r28
    1586:	a4 57       	subi	r26, 0x74	; 116
    1588:	bf 4f       	sbci	r27, 0xFF	; 255
    158a:	fe 01       	movw	r30, r28
    158c:	e4 57       	subi	r30, 0x74	; 116
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	9c 93       	st	X, r25
    159a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	fe 01       	movw	r30, r28
    159e:	e4 57       	subi	r30, 0x74	; 116
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	d1 f6       	brne	.-76     	; 0x155e <lcd_init+0x6d4>
    15aa:	4b c0       	rjmp	.+150    	; 0x1642 <lcd_init+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	8e 01       	movw	r16, r28
    15ae:	04 57       	subi	r16, 0x74	; 116
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	e2 57       	subi	r30, 0x72	; 114
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	de 01       	movw	r26, r28
    15d0:	a8 57       	subi	r26, 0x78	; 120
    15d2:	bf 4f       	sbci	r27, 0xFF	; 255
    15d4:	fe 01       	movw	r30, r28
    15d6:	e4 57       	subi	r30, 0x74	; 116
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	9c 93       	st	X, r25
    15e2:	8e 93       	st	-X, r24
    15e4:	fe 01       	movw	r30, r28
    15e6:	e8 57       	subi	r30, 0x78	; 120
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <lcd_init+0x764>
    15f2:	fe 01       	movw	r30, r28
    15f4:	e8 57       	subi	r30, 0x78	; 120
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	22 c0       	rjmp	.+68     	; 0x1642 <lcd_init+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15fe:	8e 01       	movw	r16, r28
    1600:	0a 56       	subi	r16, 0x6A	; 106
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	fe 01       	movw	r30, r28
    1606:	e9 56       	subi	r30, 0x69	; 105
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
    161e:	de 01       	movw	r26, r28
    1620:	a9 57       	subi	r26, 0x79	; 121
    1622:	bf 4f       	sbci	r27, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	ea 56       	subi	r30, 0x6A	; 106
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    162e:	fe 01       	movw	r30, r28
    1630:	e9 57       	subi	r30, 0x79	; 121
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	8a 95       	dec	r24
    1638:	f1 f7       	brne	.-4      	; 0x1636 <lcd_init+0x7ac>
    163a:	fe 01       	movw	r30, r28
    163c:	e9 57       	subi	r30, 0x79	; 121
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 83       	st	Z, r24
    _delay_us(200);
    lcd_write(lcd_FunctionSet4bit);
    1642:	88 e2       	ldi	r24, 0x28	; 40
    1644:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
    1648:	fe 01       	movw	r30, r28
    164a:	ed 57       	subi	r30, 0x7D	; 125
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 ea       	ldi	r26, 0xA0	; 160
    1654:	b2 e4       	ldi	r27, 0x42	; 66
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    165e:	8e 01       	movw	r16, r28
    1660:	01 58       	subi	r16, 0x81	; 129
    1662:	1f 4f       	sbci	r17, 0xFF	; 255
    1664:	fe 01       	movw	r30, r28
    1666:	ed 57       	subi	r30, 0x7D	; 125
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	2b ea       	ldi	r18, 0xAB	; 171
    1674:	3a ea       	ldi	r19, 0xAA	; 170
    1676:	4a ea       	ldi	r20, 0xAA	; 170
    1678:	50 e4       	ldi	r21, 0x40	; 64
    167a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	f8 01       	movw	r30, r16
    1684:	80 83       	st	Z, r24
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	a2 83       	std	Z+2, r26	; 0x02
    168a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    168c:	fe 01       	movw	r30, r28
    168e:	e1 58       	subi	r30, 0x81	; 129
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	34 f4       	brge	.+12     	; 0x16b6 <lcd_init+0x82c>
		__ticks = 1;
    16aa:	fe 01       	movw	r30, r28
    16ac:	e2 58       	subi	r30, 0x82	; 130
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	80 83       	st	Z, r24
    16b4:	e0 c0       	rjmp	.+448    	; 0x1876 <lcd_init+0x9ec>
	else if (__tmp > 255)
    16b6:	fe 01       	movw	r30, r28
    16b8:	e1 58       	subi	r30, 0x81	; 129
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <lcd_init+0x84c>
    16d4:	c0 c0       	rjmp	.+384    	; 0x1856 <lcd_init+0x9cc>
	{
		_delay_ms(__us / 1000.0);
    16d6:	fe 01       	movw	r30, r28
    16d8:	ed 57       	subi	r30, 0x7D	; 125
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a e7       	ldi	r20, 0x7A	; 122
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	fe 01       	movw	r30, r28
    16f6:	e6 58       	subi	r30, 0x86	; 134
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 83       	st	Z, r24
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	a2 83       	std	Z+2, r26	; 0x02
    1700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	8e 01       	movw	r16, r28
    1704:	0a 58       	subi	r16, 0x8A	; 138
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e6 58       	subi	r30, 0x86	; 134
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a e7       	ldi	r20, 0x7A	; 122
    171c:	55 e4       	ldi	r21, 0x45	; 69
    171e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	f8 01       	movw	r30, r16
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1730:	fe 01       	movw	r30, r28
    1732:	ea 58       	subi	r30, 0x8A	; 138
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	44 f4       	brge	.+16     	; 0x175e <lcd_init+0x8d4>
		__ticks = 1;
    174e:	fe 01       	movw	r30, r28
    1750:	ec 58       	subi	r30, 0x8C	; 140
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	64 c0       	rjmp	.+200    	; 0x1826 <lcd_init+0x99c>
	else if (__tmp > 65535)
    175e:	fe 01       	movw	r30, r28
    1760:	ea 58       	subi	r30, 0x8A	; 138
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	0c f0       	brlt	.+2      	; 0x177e <lcd_init+0x8f4>
    177c:	43 c0       	rjmp	.+134    	; 0x1804 <lcd_init+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	fe 01       	movw	r30, r28
    1780:	e6 58       	subi	r30, 0x86	; 134
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8e 01       	movw	r16, r28
    179e:	0c 58       	subi	r16, 0x8C	; 140
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	f8 01       	movw	r30, r16
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	1f c0       	rjmp	.+62     	; 0x17f4 <lcd_init+0x96a>
    17b6:	fe 01       	movw	r30, r28
    17b8:	ee 58       	subi	r30, 0x8E	; 142
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 e9       	ldi	r24, 0x90	; 144
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c4:	fe 01       	movw	r30, r28
    17c6:	ee 58       	subi	r30, 0x8E	; 142
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <lcd_init+0x944>
    17d2:	fe 01       	movw	r30, r28
    17d4:	ee 58       	subi	r30, 0x8E	; 142
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	de 01       	movw	r26, r28
    17de:	ac 58       	subi	r26, 0x8C	; 140
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	fe 01       	movw	r30, r28
    17e4:	ec 58       	subi	r30, 0x8C	; 140
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	11 96       	adiw	r26, 0x01	; 1
    17f0:	9c 93       	st	X, r25
    17f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	fe 01       	movw	r30, r28
    17f6:	ec 58       	subi	r30, 0x8C	; 140
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	d1 f6       	brne	.-76     	; 0x17b6 <lcd_init+0x92c>
    1802:	4b c0       	rjmp	.+150    	; 0x189a <lcd_init+0xa10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	8e 01       	movw	r16, r28
    1806:	0c 58       	subi	r16, 0x8C	; 140
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	fe 01       	movw	r30, r28
    180c:	ea 58       	subi	r30, 0x8A	; 138
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	f8 01       	movw	r30, r16
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	de 01       	movw	r26, r28
    1828:	a0 59       	subi	r26, 0x90	; 144
    182a:	bf 4f       	sbci	r27, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	ec 58       	subi	r30, 0x8C	; 140
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	11 96       	adiw	r26, 0x01	; 1
    1838:	9c 93       	st	X, r25
    183a:	8e 93       	st	-X, r24
    183c:	fe 01       	movw	r30, r28
    183e:	e0 59       	subi	r30, 0x90	; 144
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <lcd_init+0x9bc>
    184a:	fe 01       	movw	r30, r28
    184c:	e0 59       	subi	r30, 0x90	; 144
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	22 c0       	rjmp	.+68     	; 0x189a <lcd_init+0xa10>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1856:	8e 01       	movw	r16, r28
    1858:	02 58       	subi	r16, 0x82	; 130
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	e1 58       	subi	r30, 0x81	; 129
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	80 83       	st	Z, r24
    1876:	de 01       	movw	r26, r28
    1878:	a1 59       	subi	r26, 0x91	; 145
    187a:	bf 4f       	sbci	r27, 0xFF	; 255
    187c:	fe 01       	movw	r30, r28
    187e:	e2 58       	subi	r30, 0x82	; 130
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 81       	ld	r24, Z
    1884:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1886:	fe 01       	movw	r30, r28
    1888:	e1 59       	subi	r30, 0x91	; 145
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 81       	ld	r24, Z
    188e:	8a 95       	dec	r24
    1890:	f1 f7       	brne	.-4      	; 0x188e <lcd_init+0xa04>
    1892:	fe 01       	movw	r30, r28
    1894:	e1 59       	subi	r30, 0x91	; 145
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 83       	st	Z, r24
    _delay_us(80);
    lcd_cmd(lcd_FunctionSet4bit);
    189a:	88 e2       	ldi	r24, 0x28	; 40
    189c:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    18a0:	fe 01       	movw	r30, r28
    18a2:	e5 59       	subi	r30, 0x95	; 149
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 ea       	ldi	r26, 0xA0	; 160
    18ac:	b2 e4       	ldi	r27, 0x42	; 66
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18b6:	8e 01       	movw	r16, r28
    18b8:	09 59       	subi	r16, 0x99	; 153
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e5 59       	subi	r30, 0x95	; 149
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	2b ea       	ldi	r18, 0xAB	; 171
    18cc:	3a ea       	ldi	r19, 0xAA	; 170
    18ce:	4a ea       	ldi	r20, 0xAA	; 170
    18d0:	50 e4       	ldi	r21, 0x40	; 64
    18d2:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e4:	fe 01       	movw	r30, r28
    18e6:	e9 59       	subi	r30, 0x99	; 153
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	34 f4       	brge	.+12     	; 0x190e <lcd_init+0xa84>
		__ticks = 1;
    1902:	fe 01       	movw	r30, r28
    1904:	ea 59       	subi	r30, 0x9A	; 154
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 83       	st	Z, r24
    190c:	e0 c0       	rjmp	.+448    	; 0x1ace <lcd_init+0xc44>
	else if (__tmp > 255)
    190e:	fe 01       	movw	r30, r28
    1910:	e9 59       	subi	r30, 0x99	; 153
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	53 e4       	ldi	r21, 0x43	; 67
    1924:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	0c f0       	brlt	.+2      	; 0x192e <lcd_init+0xaa4>
    192c:	c0 c0       	rjmp	.+384    	; 0x1aae <lcd_init+0xc24>
	{
		_delay_ms(__us / 1000.0);
    192e:	fe 01       	movw	r30, r28
    1930:	e5 59       	subi	r30, 0x95	; 149
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	fe 01       	movw	r30, r28
    194e:	ee 59       	subi	r30, 0x9E	; 158
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 83       	st	Z, r24
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	a2 83       	std	Z+2, r26	; 0x02
    1958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	8e 01       	movw	r16, r28
    195c:	02 5a       	subi	r16, 0xA2	; 162
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	fe 01       	movw	r30, r28
    1962:	ee 59       	subi	r30, 0x9E	; 158
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a e7       	ldi	r20, 0x7A	; 122
    1974:	55 e4       	ldi	r21, 0x45	; 69
    1976:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	f8 01       	movw	r30, r16
    1980:	80 83       	st	Z, r24
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	a2 83       	std	Z+2, r26	; 0x02
    1986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1988:	fe 01       	movw	r30, r28
    198a:	e2 5a       	subi	r30, 0xA2	; 162
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	44 f4       	brge	.+16     	; 0x19b6 <lcd_init+0xb2c>
		__ticks = 1;
    19a6:	fe 01       	movw	r30, r28
    19a8:	e4 5a       	subi	r30, 0xA4	; 164
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	64 c0       	rjmp	.+200    	; 0x1a7e <lcd_init+0xbf4>
	else if (__tmp > 65535)
    19b6:	fe 01       	movw	r30, r28
    19b8:	e2 5a       	subi	r30, 0xA2	; 162
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	0c f0       	brlt	.+2      	; 0x19d6 <lcd_init+0xb4c>
    19d4:	43 c0       	rjmp	.+134    	; 0x1a5c <lcd_init+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	fe 01       	movw	r30, r28
    19d8:	ee 59       	subi	r30, 0x9E	; 158
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8e 01       	movw	r16, r28
    19f6:	04 5a       	subi	r16, 0xA4	; 164
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	f8 01       	movw	r30, r16
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	80 83       	st	Z, r24
    1a0c:	1f c0       	rjmp	.+62     	; 0x1a4c <lcd_init+0xbc2>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e6 5a       	subi	r30, 0xA6	; 166
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 e9       	ldi	r24, 0x90	; 144
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e6 5a       	subi	r30, 0xA6	; 166
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <lcd_init+0xb9c>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e6 5a       	subi	r30, 0xA6	; 166
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	de 01       	movw	r26, r28
    1a36:	a4 5a       	subi	r26, 0xA4	; 164
    1a38:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e4 5a       	subi	r30, 0xA4	; 164
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	9c 93       	st	X, r25
    1a4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e4 5a       	subi	r30, 0xA4	; 164
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	d1 f6       	brne	.-76     	; 0x1a0e <lcd_init+0xb84>
    1a5a:	4b c0       	rjmp	.+150    	; 0x1af2 <lcd_init+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	04 5a       	subi	r16, 0xA4	; 164
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	e2 5a       	subi	r30, 0xA2	; 162
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	f8 01       	movw	r30, r16
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
    1a7e:	de 01       	movw	r26, r28
    1a80:	a8 5a       	subi	r26, 0xA8	; 168
    1a82:	bf 4f       	sbci	r27, 0xFF	; 255
    1a84:	fe 01       	movw	r30, r28
    1a86:	e4 5a       	subi	r30, 0xA4	; 164
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
    1a94:	fe 01       	movw	r30, r28
    1a96:	e8 5a       	subi	r30, 0xA8	; 168
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <lcd_init+0xc14>
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e8 5a       	subi	r30, 0xA8	; 168
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	80 83       	st	Z, r24
    1aac:	22 c0       	rjmp	.+68     	; 0x1af2 <lcd_init+0xc68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aae:	8e 01       	movw	r16, r28
    1ab0:	0a 59       	subi	r16, 0x9A	; 154
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 59       	subi	r30, 0x99	; 153
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	f8 01       	movw	r30, r16
    1acc:	80 83       	st	Z, r24
    1ace:	de 01       	movw	r26, r28
    1ad0:	a9 5a       	subi	r26, 0xA9	; 169
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ea 59       	subi	r30, 0x9A	; 154
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e9 5a       	subi	r30, 0xA9	; 169
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8a 95       	dec	r24
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <lcd_init+0xc5c>
    1aea:	fe 01       	movw	r30, r28
    1aec:	e9 5a       	subi	r30, 0xA9	; 169
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 83       	st	Z, r24
    _delay_us(80);
    lcd_cmd(lcd_DisplayOff);
    1af2:	88 e0       	ldi	r24, 0x08	; 8
    1af4:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    1af8:	fe 01       	movw	r30, r28
    1afa:	ed 5a       	subi	r30, 0xAD	; 173
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 ea       	ldi	r26, 0xA0	; 160
    1b04:	b2 e4       	ldi	r27, 0x42	; 66
    1b06:	80 83       	st	Z, r24
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	a2 83       	std	Z+2, r26	; 0x02
    1b0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b0e:	8e 01       	movw	r16, r28
    1b10:	01 5b       	subi	r16, 0xB1	; 177
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	fe 01       	movw	r30, r28
    1b16:	ed 5a       	subi	r30, 0xAD	; 173
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	2b ea       	ldi	r18, 0xAB	; 171
    1b24:	3a ea       	ldi	r19, 0xAA	; 170
    1b26:	4a ea       	ldi	r20, 0xAA	; 170
    1b28:	50 e4       	ldi	r21, 0x40	; 64
    1b2a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	f8 01       	movw	r30, r16
    1b34:	80 83       	st	Z, r24
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	a2 83       	std	Z+2, r26	; 0x02
    1b3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e1 5b       	subi	r30, 0xB1	; 177
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	34 f4       	brge	.+12     	; 0x1b66 <lcd_init+0xcdc>
		__ticks = 1;
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e2 5b       	subi	r30, 0xB2	; 178
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 83       	st	Z, r24
    1b64:	e0 c0       	rjmp	.+448    	; 0x1d26 <lcd_init+0xe9c>
	else if (__tmp > 255)
    1b66:	fe 01       	movw	r30, r28
    1b68:	e1 5b       	subi	r30, 0xB1	; 177
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	53 e4       	ldi	r21, 0x43	; 67
    1b7c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <lcd_init+0xcfc>
    1b84:	c0 c0       	rjmp	.+384    	; 0x1d06 <lcd_init+0xe7c>
	{
		_delay_ms(__us / 1000.0);
    1b86:	fe 01       	movw	r30, r28
    1b88:	ed 5a       	subi	r30, 0xAD	; 173
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e6 5b       	subi	r30, 0xB6	; 182
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 83       	st	Z, r24
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	a2 83       	std	Z+2, r26	; 0x02
    1bb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0a 5b       	subi	r16, 0xBA	; 186
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e6 5b       	subi	r30, 0xB6	; 182
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a e7       	ldi	r20, 0x7A	; 122
    1bcc:	55 e4       	ldi	r21, 0x45	; 69
    1bce:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 83       	st	Z, r24
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	a2 83       	std	Z+2, r26	; 0x02
    1bde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be0:	fe 01       	movw	r30, r28
    1be2:	ea 5b       	subi	r30, 0xBA	; 186
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	44 f4       	brge	.+16     	; 0x1c0e <lcd_init+0xd84>
		__ticks = 1;
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ec 5b       	subi	r30, 0xBC	; 188
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
    1c0c:	64 c0       	rjmp	.+200    	; 0x1cd6 <lcd_init+0xe4c>
	else if (__tmp > 65535)
    1c0e:	fe 01       	movw	r30, r28
    1c10:	ea 5b       	subi	r30, 0xBA	; 186
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <lcd_init+0xda4>
    1c2c:	43 c0       	rjmp	.+134    	; 0x1cb4 <lcd_init+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e6 5b       	subi	r30, 0xB6	; 182
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8e 01       	movw	r16, r28
    1c4e:	0c 5b       	subi	r16, 0xBC	; 188
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
    1c64:	1f c0       	rjmp	.+62     	; 0x1ca4 <lcd_init+0xe1a>
    1c66:	fe 01       	movw	r30, r28
    1c68:	ee 5b       	subi	r30, 0xBE	; 190
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 e9       	ldi	r24, 0x90	; 144
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c74:	fe 01       	movw	r30, r28
    1c76:	ee 5b       	subi	r30, 0xBE	; 190
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <lcd_init+0xdf4>
    1c82:	fe 01       	movw	r30, r28
    1c84:	ee 5b       	subi	r30, 0xBE	; 190
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	de 01       	movw	r26, r28
    1c8e:	ac 5b       	subi	r26, 0xBC	; 188
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	ec 5b       	subi	r30, 0xBC	; 188
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	9c 93       	st	X, r25
    1ca2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ec 5b       	subi	r30, 0xBC	; 188
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	d1 f6       	brne	.-76     	; 0x1c66 <lcd_init+0xddc>
    1cb2:	42 c0       	rjmp	.+132    	; 0x1d38 <lcd_init+0xeae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	0c 5b       	subi	r16, 0xBC	; 188
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ea 5b       	subi	r30, 0xBA	; 186
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	de 01       	movw	r26, r28
    1cd8:	a0 5c       	subi	r26, 0xC0	; 192
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	ec 5b       	subi	r30, 0xBC	; 188
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	11 96       	adiw	r26, 0x01	; 1
    1ce8:	9c 93       	st	X, r25
    1cea:	8e 93       	st	-X, r24
    1cec:	fe 01       	movw	r30, r28
    1cee:	e0 5c       	subi	r30, 0xC0	; 192
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <lcd_init+0xe6c>
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e0 5c       	subi	r30, 0xC0	; 192
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	19 c0       	rjmp	.+50     	; 0x1d38 <lcd_init+0xeae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d06:	8e 01       	movw	r16, r28
    1d08:	02 5b       	subi	r16, 0xB2	; 178
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e1 5b       	subi	r30, 0xB1	; 177
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	f8 01       	movw	r30, r16
    1d24:	80 83       	st	Z, r24
    1d26:	fe 01       	movw	r30, r28
    1d28:	e2 5b       	subi	r30, 0xB2	; 178
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d30:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d32:	8a 95       	dec	r24
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <lcd_init+0xea8>
    1d36:	8f af       	std	Y+63, r24	; 0x3f
    _delay_us(80);
    lcd_cmd(lcd_Clear);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e8       	ldi	r26, 0x80	; 128
    1d44:	b0 e4       	ldi	r27, 0x40	; 64
    1d46:	8b af       	std	Y+59, r24	; 0x3b
    1d48:	9c af       	std	Y+60, r25	; 0x3c
    1d4a:	ad af       	std	Y+61, r26	; 0x3d
    1d4c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d50:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	55 e4       	ldi	r21, 0x45	; 69
    1d5e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8f ab       	std	Y+55, r24	; 0x37
    1d68:	98 af       	std	Y+56, r25	; 0x38
    1d6a:	a9 af       	std	Y+57, r26	; 0x39
    1d6c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d6e:	6f a9       	ldd	r22, Y+55	; 0x37
    1d70:	78 ad       	ldd	r23, Y+56	; 0x38
    1d72:	89 ad       	ldd	r24, Y+57	; 0x39
    1d74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <lcd_init+0xf06>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9e ab       	std	Y+54, r25	; 0x36
    1d8c:	8d ab       	std	Y+53, r24	; 0x35
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <lcd_init+0xf84>
	else if (__tmp > 65535)
    1d90:	6f a9       	ldd	r22, Y+55	; 0x37
    1d92:	78 ad       	ldd	r23, Y+56	; 0x38
    1d94:	89 ad       	ldd	r24, Y+57	; 0x39
    1d96:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <lcd_init+0xf70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1daa:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9e ab       	std	Y+54, r25	; 0x36
    1dce:	8d ab       	std	Y+53, r24	; 0x35
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <lcd_init+0xf66>
    1dd2:	80 e9       	ldi	r24, 0x90	; 144
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	9c ab       	std	Y+52, r25	; 0x34
    1dd8:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dda:	8b a9       	ldd	r24, Y+51	; 0x33
    1ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <lcd_init+0xf54>
    1de2:	9c ab       	std	Y+52, r25	; 0x34
    1de4:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8d a9       	ldd	r24, Y+53	; 0x35
    1de8:	9e a9       	ldd	r25, Y+54	; 0x36
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9e ab       	std	Y+54, r25	; 0x36
    1dee:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8d a9       	ldd	r24, Y+53	; 0x35
    1df2:	9e a9       	ldd	r25, Y+54	; 0x36
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <lcd_init+0xf48>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <lcd_init+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6f a9       	ldd	r22, Y+55	; 0x37
    1dfc:	78 ad       	ldd	r23, Y+56	; 0x38
    1dfe:	89 ad       	ldd	r24, Y+57	; 0x39
    1e00:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e02:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e ab       	std	Y+54, r25	; 0x36
    1e0c:	8d ab       	std	Y+53, r24	; 0x35
    1e0e:	8d a9       	ldd	r24, Y+53	; 0x35
    1e10:	9e a9       	ldd	r25, Y+54	; 0x36
    1e12:	9a ab       	std	Y+50, r25	; 0x32
    1e14:	89 ab       	std	Y+49, r24	; 0x31
    1e16:	89 a9       	ldd	r24, Y+49	; 0x31
    1e18:	9a a9       	ldd	r25, Y+50	; 0x32
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <lcd_init+0xf90>
    1e1e:	9a ab       	std	Y+50, r25	; 0x32
    1e20:	89 ab       	std	Y+49, r24	; 0x31
    _delay_ms(4);
    lcd_cmd(lcd_EntryMode);
    1e22:	86 e0       	ldi	r24, 0x06	; 6
    1e24:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e2e:	b2 e4       	ldi	r27, 0x42	; 66
    1e30:	8d a7       	std	Y+45, r24	; 0x2d
    1e32:	9e a7       	std	Y+46, r25	; 0x2e
    1e34:	af a7       	std	Y+47, r26	; 0x2f
    1e36:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	2b ea       	ldi	r18, 0xAB	; 171
    1e42:	3a ea       	ldi	r19, 0xAA	; 170
    1e44:	4a ea       	ldi	r20, 0xAA	; 170
    1e46:	50 e4       	ldi	r21, 0x40	; 64
    1e48:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	89 a7       	std	Y+41, r24	; 0x29
    1e52:	9a a7       	std	Y+42, r25	; 0x2a
    1e54:	ab a7       	std	Y+43, r26	; 0x2b
    1e56:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e58:	69 a5       	ldd	r22, Y+41	; 0x29
    1e5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	1c f4       	brge	.+6      	; 0x1e76 <lcd_init+0xfec>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	88 a7       	std	Y+40, r24	; 0x28
    1e74:	91 c0       	rjmp	.+290    	; 0x1f98 <lcd_init+0x110e>
	else if (__tmp > 255)
    1e76:	69 a5       	ldd	r22, Y+41	; 0x29
    1e78:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	53 e4       	ldi	r21, 0x43	; 67
    1e86:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <lcd_init+0x1006>
    1e8e:	7b c0       	rjmp	.+246    	; 0x1f86 <lcd_init+0x10fc>
	{
		_delay_ms(__us / 1000.0);
    1e90:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e92:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e96:	98 a9       	ldd	r25, Y+48	; 0x30
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a e7       	ldi	r20, 0x7A	; 122
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8c a3       	std	Y+36, r24	; 0x24
    1eaa:	9d a3       	std	Y+37, r25	; 0x25
    1eac:	ae a3       	std	Y+38, r26	; 0x26
    1eae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	6c a1       	ldd	r22, Y+36	; 0x24
    1eb2:	7d a1       	ldd	r23, Y+37	; 0x25
    1eb4:	8e a1       	ldd	r24, Y+38	; 0x26
    1eb6:	9f a1       	ldd	r25, Y+39	; 0x27
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a e7       	ldi	r20, 0x7A	; 122
    1ebe:	55 e4       	ldi	r21, 0x45	; 69
    1ec0:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	88 a3       	std	Y+32, r24	; 0x20
    1eca:	99 a3       	std	Y+33, r25	; 0x21
    1ecc:	aa a3       	std	Y+34, r26	; 0x22
    1ece:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ed0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ed2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ed4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ed6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <lcd_init+0x1068>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9f 8f       	std	Y+31, r25	; 0x1f
    1eee:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <lcd_init+0x10e6>
	else if (__tmp > 65535)
    1ef2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ef4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ef6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef8:	9b a1       	ldd	r25, Y+35	; 0x23
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <lcd_init+0x10d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f0c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f0e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f10:	9f a1       	ldd	r25, Y+39	; 0x27
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f30:	8e 8f       	std	Y+30, r24	; 0x1e
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <lcd_init+0x10c8>
    1f34:	80 e9       	ldi	r24, 0x90	; 144
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	9d 8f       	std	Y+29, r25	; 0x1d
    1f3a:	8c 8f       	std	Y+28, r24	; 0x1c
    1f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <lcd_init+0x10b6>
    1f44:	9d 8f       	std	Y+29, r25	; 0x1d
    1f46:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f50:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f54:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <lcd_init+0x10aa>
    1f5a:	24 c0       	rjmp	.+72     	; 0x1fa4 <lcd_init+0x111a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f60:	8a a1       	ldd	r24, Y+34	; 0x22
    1f62:	9b a1       	ldd	r25, Y+35	; 0x23
    1f64:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f74:	9b 8f       	std	Y+27, r25	; 0x1b
    1f76:	8a 8f       	std	Y+26, r24	; 0x1a
    1f78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <lcd_init+0x10f2>
    1f80:	9b 8f       	std	Y+27, r25	; 0x1b
    1f82:	8a 8f       	std	Y+26, r24	; 0x1a
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <lcd_init+0x111a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f86:	69 a5       	ldd	r22, Y+41	; 0x29
    1f88:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	88 a7       	std	Y+40, r24	; 0x28
    1f98:	88 a5       	ldd	r24, Y+40	; 0x28
    1f9a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f9c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f9e:	8a 95       	dec	r24
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <lcd_init+0x1114>
    1fa2:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(80);
    lcd_cmd(lcd_DisplayOn);
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 ea       	ldi	r26, 0xA0	; 160
    1fb0:	b2 e4       	ldi	r27, 0x42	; 66
    1fb2:	8d 8b       	std	Y+21, r24	; 0x15
    1fb4:	9e 8b       	std	Y+22, r25	; 0x16
    1fb6:	af 8b       	std	Y+23, r26	; 0x17
    1fb8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fba:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	2b ea       	ldi	r18, 0xAB	; 171
    1fc4:	3a ea       	ldi	r19, 0xAA	; 170
    1fc6:	4a ea       	ldi	r20, 0xAA	; 170
    1fc8:	50 e4       	ldi	r21, 0x40	; 64
    1fca:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	89 8b       	std	Y+17, r24	; 0x11
    1fd4:	9a 8b       	std	Y+18, r25	; 0x12
    1fd6:	ab 8b       	std	Y+19, r26	; 0x13
    1fd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fda:	69 89       	ldd	r22, Y+17	; 0x11
    1fdc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fde:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	1c f4       	brge	.+6      	; 0x1ff8 <lcd_init+0x116e>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	88 8b       	std	Y+16, r24	; 0x10
    1ff6:	91 c0       	rjmp	.+290    	; 0x211a <lcd_init+0x1290>
	else if (__tmp > 255)
    1ff8:	69 89       	ldd	r22, Y+17	; 0x11
    1ffa:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	53 e4       	ldi	r21, 0x43	; 67
    2008:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	0c f0       	brlt	.+2      	; 0x2012 <lcd_init+0x1188>
    2010:	7b c0       	rjmp	.+246    	; 0x2108 <lcd_init+0x127e>
	{
		_delay_ms(__us / 1000.0);
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a e7       	ldi	r20, 0x7A	; 122
    2020:	54 e4       	ldi	r21, 0x44	; 68
    2022:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8c 87       	std	Y+12, r24	; 0x0c
    202c:	9d 87       	std	Y+13, r25	; 0x0d
    202e:	ae 87       	std	Y+14, r26	; 0x0e
    2030:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6c 85       	ldd	r22, Y+12	; 0x0c
    2034:	7d 85       	ldd	r23, Y+13	; 0x0d
    2036:	8e 85       	ldd	r24, Y+14	; 0x0e
    2038:	9f 85       	ldd	r25, Y+15	; 0x0f
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	55 e4       	ldi	r21, 0x45	; 69
    2042:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	88 87       	std	Y+8, r24	; 0x08
    204c:	99 87       	std	Y+9, r25	; 0x09
    204e:	aa 87       	std	Y+10, r26	; 0x0a
    2050:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2052:	68 85       	ldd	r22, Y+8	; 0x08
    2054:	79 85       	ldd	r23, Y+9	; 0x09
    2056:	8a 85       	ldd	r24, Y+10	; 0x0a
    2058:	9b 85       	ldd	r25, Y+11	; 0x0b
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <lcd_init+0x11ea>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9f 83       	std	Y+7, r25	; 0x07
    2070:	8e 83       	std	Y+6, r24	; 0x06
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <lcd_init+0x1268>
	else if (__tmp > 65535)
    2074:	68 85       	ldd	r22, Y+8	; 0x08
    2076:	79 85       	ldd	r23, Y+9	; 0x09
    2078:	8a 85       	ldd	r24, Y+10	; 0x0a
    207a:	9b 85       	ldd	r25, Y+11	; 0x0b
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <lcd_init+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6c 85       	ldd	r22, Y+12	; 0x0c
    208e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2090:	8e 85       	ldd	r24, Y+14	; 0x0e
    2092:	9f 85       	ldd	r25, Y+15	; 0x0f
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9f 83       	std	Y+7, r25	; 0x07
    20b2:	8e 83       	std	Y+6, r24	; 0x06
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <lcd_init+0x124a>
    20b6:	80 e9       	ldi	r24, 0x90	; 144
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	9d 83       	std	Y+5, r25	; 0x05
    20bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <lcd_init+0x1238>
    20c6:	9d 83       	std	Y+5, r25	; 0x05
    20c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8e 81       	ldd	r24, Y+6	; 0x06
    20cc:	9f 81       	ldd	r25, Y+7	; 0x07
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9f 83       	std	Y+7, r25	; 0x07
    20d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	9f 81       	ldd	r25, Y+7	; 0x07
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <lcd_init+0x122c>
    20dc:	24 c0       	rjmp	.+72     	; 0x2126 <lcd_init+0x129c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	68 85       	ldd	r22, Y+8	; 0x08
    20e0:	79 85       	ldd	r23, Y+9	; 0x09
    20e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9f 83       	std	Y+7, r25	; 0x07
    20f0:	8e 83       	std	Y+6, r24	; 0x06
    20f2:	8e 81       	ldd	r24, Y+6	; 0x06
    20f4:	9f 81       	ldd	r25, Y+7	; 0x07
    20f6:	9b 83       	std	Y+3, r25	; 0x03
    20f8:	8a 83       	std	Y+2, r24	; 0x02
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <lcd_init+0x1274>
    2102:	9b 83       	std	Y+3, r25	; 0x03
    2104:	8a 83       	std	Y+2, r24	; 0x02
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <lcd_init+0x129c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2108:	69 89       	ldd	r22, Y+17	; 0x11
    210a:	7a 89       	ldd	r23, Y+18	; 0x12
    210c:	8b 89       	ldd	r24, Y+19	; 0x13
    210e:	9c 89       	ldd	r25, Y+20	; 0x14
    2110:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	88 8b       	std	Y+16, r24	; 0x10
    211a:	88 89       	ldd	r24, Y+16	; 0x10
    211c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	8a 95       	dec	r24
    2122:	f1 f7       	brne	.-4      	; 0x2120 <lcd_init+0x1296>
    2124:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(80);
}
    2126:	ce 52       	subi	r28, 0x2E	; 46
    2128:	df 4f       	sbci	r29, 0xFF	; 255
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	08 95       	ret

0000213e <lcd_str>:

//LCD string write
void lcd_str(char Str[]){
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	6c 97       	sbiw	r28, 0x1c	; 28
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	9c 8f       	std	Y+28, r25	; 0x1c
    2154:	8b 8f       	std	Y+27, r24	; 0x1b
    volatile int i = 0;
    2156:	1a 8e       	std	Y+26, r1	; 0x1a
    2158:	19 8e       	std	Y+25, r1	; 0x19
    215a:	ce c0       	rjmp	.+412    	; 0x22f8 <lcd_str+0x1ba>
    while (Str[i] != 0){
        lcd_char(Str[i]);
    215c:	89 8d       	ldd	r24, Y+25	; 0x19
    215e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2160:	9c 01       	movw	r18, r24
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	fc 01       	movw	r30, r24
    2168:	e2 0f       	add	r30, r18
    216a:	f3 1f       	adc	r31, r19
    216c:	80 81       	ld	r24, Z
    216e:	0e 94 91 11 	call	0x2322	; 0x2322 <lcd_char>
        i++;
    2172:	89 8d       	ldd	r24, Y+25	; 0x19
    2174:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	9a 8f       	std	Y+26, r25	; 0x1a
    217a:	89 8f       	std	Y+25, r24	; 0x19
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 ea       	ldi	r26, 0xA0	; 160
    2182:	b2 e4       	ldi	r27, 0x42	; 66
    2184:	8d 8b       	std	Y+21, r24	; 0x15
    2186:	9e 8b       	std	Y+22, r25	; 0x16
    2188:	af 8b       	std	Y+23, r26	; 0x17
    218a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	2b ea       	ldi	r18, 0xAB	; 171
    2196:	3a ea       	ldi	r19, 0xAA	; 170
    2198:	4a ea       	ldi	r20, 0xAA	; 170
    219a:	50 e4       	ldi	r21, 0x40	; 64
    219c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 8b       	std	Y+17, r24	; 0x11
    21a6:	9a 8b       	std	Y+18, r25	; 0x12
    21a8:	ab 8b       	std	Y+19, r26	; 0x13
    21aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ac:	69 89       	ldd	r22, Y+17	; 0x11
    21ae:	7a 89       	ldd	r23, Y+18	; 0x12
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	1c f4       	brge	.+6      	; 0x21ca <lcd_str+0x8c>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	88 8b       	std	Y+16, r24	; 0x10
    21c8:	91 c0       	rjmp	.+290    	; 0x22ec <lcd_str+0x1ae>
	else if (__tmp > 255)
    21ca:	69 89       	ldd	r22, Y+17	; 0x11
    21cc:	7a 89       	ldd	r23, Y+18	; 0x12
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <lcd_str+0xa6>
    21e2:	7b c0       	rjmp	.+246    	; 0x22da <lcd_str+0x19c>
	{
		_delay_ms(__us / 1000.0);
    21e4:	6d 89       	ldd	r22, Y+21	; 0x15
    21e6:	7e 89       	ldd	r23, Y+22	; 0x16
    21e8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ea:	98 8d       	ldd	r25, Y+24	; 0x18
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e7       	ldi	r20, 0x7A	; 122
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8c 87       	std	Y+12, r24	; 0x0c
    21fe:	9d 87       	std	Y+13, r25	; 0x0d
    2200:	ae 87       	std	Y+14, r26	; 0x0e
    2202:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6c 85       	ldd	r22, Y+12	; 0x0c
    2206:	7d 85       	ldd	r23, Y+13	; 0x0d
    2208:	8e 85       	ldd	r24, Y+14	; 0x0e
    220a:	9f 85       	ldd	r25, Y+15	; 0x0f
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a e7       	ldi	r20, 0x7A	; 122
    2212:	55 e4       	ldi	r21, 0x45	; 69
    2214:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	88 87       	std	Y+8, r24	; 0x08
    221e:	99 87       	std	Y+9, r25	; 0x09
    2220:	aa 87       	std	Y+10, r26	; 0x0a
    2222:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2224:	68 85       	ldd	r22, Y+8	; 0x08
    2226:	79 85       	ldd	r23, Y+9	; 0x09
    2228:	8a 85       	ldd	r24, Y+10	; 0x0a
    222a:	9b 85       	ldd	r25, Y+11	; 0x0b
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <lcd_str+0x108>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <lcd_str+0x186>
	else if (__tmp > 65535)
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <lcd_str+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2260:	7d 85       	ldd	r23, Y+13	; 0x0d
    2262:	8e 85       	ldd	r24, Y+14	; 0x0e
    2264:	9f 85       	ldd	r25, Y+15	; 0x0f
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9f 83       	std	Y+7, r25	; 0x07
    2284:	8e 83       	std	Y+6, r24	; 0x06
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <lcd_str+0x168>
    2288:	80 e9       	ldi	r24, 0x90	; 144
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	9d 83       	std	Y+5, r25	; 0x05
    228e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <lcd_str+0x156>
    2298:	9d 83       	std	Y+5, r25	; 0x05
    229a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9f 83       	std	Y+7, r25	; 0x07
    22a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <lcd_str+0x14a>
    22ae:	24 c0       	rjmp	.+72     	; 0x22f8 <lcd_str+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	68 85       	ldd	r22, Y+8	; 0x08
    22b2:	79 85       	ldd	r23, Y+9	; 0x09
    22b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	8e 83       	std	Y+6, r24	; 0x06
    22c4:	8e 81       	ldd	r24, Y+6	; 0x06
    22c6:	9f 81       	ldd	r25, Y+7	; 0x07
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <lcd_str+0x192>
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <lcd_str+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	88 8b       	std	Y+16, r24	; 0x10
    22ec:	88 89       	ldd	r24, Y+16	; 0x10
    22ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	8a 95       	dec	r24
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <lcd_str+0x1b4>
    22f6:	89 83       	std	Y+1, r24	; 0x01
}

//LCD string write
void lcd_str(char Str[]){
    volatile int i = 0;
    while (Str[i] != 0){
    22f8:	89 8d       	ldd	r24, Y+25	; 0x19
    22fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22fc:	9c 01       	movw	r18, r24
    22fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 81       	ld	r24, Z
    230a:	88 23       	and	r24, r24
    230c:	09 f0       	breq	.+2      	; 0x2310 <lcd_str+0x1d2>
    230e:	26 cf       	rjmp	.-436    	; 0x215c <lcd_str+0x1e>
        lcd_char(Str[i]);
        i++;
        _delay_us(80);
    }
}
    2310:	6c 96       	adiw	r28, 0x1c	; 28
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <lcd_char>:

//LCD char write
void lcd_char(uint8_t theData){
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	0f 92       	push	r0
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	89 83       	std	Y+1, r24	; 0x01
    lcd_RS_port |= (1<<lcd_RS_bit);
    232e:	a8 e2       	ldi	r26, 0x28	; 40
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e8 e2       	ldi	r30, 0x28	; 40
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	84 60       	ori	r24, 0x04	; 4
    233a:	8c 93       	st	X, r24
    lcd_E_port &= ~(1<<lcd_E_bit);
    233c:	a8 e2       	ldi	r26, 0x28	; 40
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e8 e2       	ldi	r30, 0x28	; 40
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	8e 7f       	andi	r24, 0xFE	; 254
    2348:	8c 93       	st	X, r24
    lcd_write(theData);
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
    lcd_write(theData << 4);
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	82 95       	swap	r24
    2354:	80 7f       	andi	r24, 0xF0	; 240
    2356:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
}
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <lcd_cmd>:

//LCD cmd write
void lcd_cmd(uint8_t theInstruction){
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	0f 92       	push	r0
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	89 83       	std	Y+1, r24	; 0x01
    lcd_RS_port &= ~(1<<lcd_RS_bit);
    236e:	a8 e2       	ldi	r26, 0x28	; 40
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e8 e2       	ldi	r30, 0x28	; 40
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8b 7f       	andi	r24, 0xFB	; 251
    237a:	8c 93       	st	X, r24
    lcd_E_port &= ~(1<<lcd_E_bit);
    237c:	a8 e2       	ldi	r26, 0x28	; 40
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e8 e2       	ldi	r30, 0x28	; 40
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	8e 7f       	andi	r24, 0xFE	; 254
    2388:	8c 93       	st	X, r24
    lcd_write(theInstruction);
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
    lcd_write(theInstruction << 4);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	82 95       	swap	r24
    2394:	80 7f       	andi	r24, 0xF0	; 240
    2396:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <lcd_write>
}
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <lcd_write>:

void lcd_write(uint8_t theByte){
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	e1 97       	sbiw	r28, 0x31	; 49
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	89 ab       	std	Y+49, r24	; 0x31
    lcd_D7_port &= ~(1<<lcd_D7_bit);
    23b8:	a5 e2       	ldi	r26, 0x25	; 37
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e5 e2       	ldi	r30, 0x25	; 37
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8d 7f       	andi	r24, 0xFD	; 253
    23c4:	8c 93       	st	X, r24
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);
    23c6:	89 a9       	ldd	r24, Y+49	; 0x31
    23c8:	88 23       	and	r24, r24
    23ca:	3c f4       	brge	.+14     	; 0x23da <lcd_write+0x38>
    23cc:	a5 e2       	ldi	r26, 0x25	; 37
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e5 e2       	ldi	r30, 0x25	; 37
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	82 60       	ori	r24, 0x02	; 2
    23d8:	8c 93       	st	X, r24
    lcd_D6_port &= ~(1<<lcd_D6_bit);
    23da:	a5 e2       	ldi	r26, 0x25	; 37
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e5 e2       	ldi	r30, 0x25	; 37
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8b 7f       	andi	r24, 0xFB	; 251
    23e6:	8c 93       	st	X, r24
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
    23e8:	89 a9       	ldd	r24, Y+49	; 0x31
    23ea:	88 2f       	mov	r24, r24
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	80 74       	andi	r24, 0x40	; 64
    23f0:	90 70       	andi	r25, 0x00	; 0
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	39 f0       	breq	.+14     	; 0x2404 <lcd_write+0x62>
    23f6:	a5 e2       	ldi	r26, 0x25	; 37
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e5 e2       	ldi	r30, 0x25	; 37
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	84 60       	ori	r24, 0x04	; 4
    2402:	8c 93       	st	X, r24
    lcd_D5_port &= ~(1<<lcd_D5_bit);
    2404:	a5 e2       	ldi	r26, 0x25	; 37
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e5 e2       	ldi	r30, 0x25	; 37
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	87 7f       	andi	r24, 0xF7	; 247
    2410:	8c 93       	st	X, r24
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
    2412:	89 a9       	ldd	r24, Y+49	; 0x31
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	80 72       	andi	r24, 0x20	; 32
    241a:	90 70       	andi	r25, 0x00	; 0
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	39 f0       	breq	.+14     	; 0x242e <lcd_write+0x8c>
    2420:	a5 e2       	ldi	r26, 0x25	; 37
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e5 e2       	ldi	r30, 0x25	; 37
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 60       	ori	r24, 0x08	; 8
    242c:	8c 93       	st	X, r24
    lcd_D4_port &= ~(1<<lcd_D4_bit);
    242e:	a5 e2       	ldi	r26, 0x25	; 37
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e5 e2       	ldi	r30, 0x25	; 37
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8f 7e       	andi	r24, 0xEF	; 239
    243a:	8c 93       	st	X, r24
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
    243c:	89 a9       	ldd	r24, Y+49	; 0x31
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	80 71       	andi	r24, 0x10	; 16
    2444:	90 70       	andi	r25, 0x00	; 0
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	39 f0       	breq	.+14     	; 0x2458 <lcd_write+0xb6>
    244a:	a5 e2       	ldi	r26, 0x25	; 37
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e5 e2       	ldi	r30, 0x25	; 37
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	80 61       	ori	r24, 0x10	; 16
    2456:	8c 93       	st	X, r24
    lcd_E_port |= (1<<lcd_E_bit);
    2458:	a8 e2       	ldi	r26, 0x28	; 40
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e8 e2       	ldi	r30, 0x28	; 40
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	81 60       	ori	r24, 0x01	; 1
    2464:	8c 93       	st	X, r24
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e8       	ldi	r26, 0x80	; 128
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	8d a7       	std	Y+45, r24	; 0x2d
    2470:	9e a7       	std	Y+46, r25	; 0x2e
    2472:	af a7       	std	Y+47, r26	; 0x2f
    2474:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2476:	6d a5       	ldd	r22, Y+45	; 0x2d
    2478:	7e a5       	ldd	r23, Y+46	; 0x2e
    247a:	8f a5       	ldd	r24, Y+47	; 0x2f
    247c:	98 a9       	ldd	r25, Y+48	; 0x30
    247e:	2b ea       	ldi	r18, 0xAB	; 171
    2480:	3a ea       	ldi	r19, 0xAA	; 170
    2482:	4a ea       	ldi	r20, 0xAA	; 170
    2484:	50 e4       	ldi	r21, 0x40	; 64
    2486:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	89 a7       	std	Y+41, r24	; 0x29
    2490:	9a a7       	std	Y+42, r25	; 0x2a
    2492:	ab a7       	std	Y+43, r26	; 0x2b
    2494:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2496:	69 a5       	ldd	r22, Y+41	; 0x29
    2498:	7a a5       	ldd	r23, Y+42	; 0x2a
    249a:	8b a5       	ldd	r24, Y+43	; 0x2b
    249c:	9c a5       	ldd	r25, Y+44	; 0x2c
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	1c f4       	brge	.+6      	; 0x24b4 <lcd_write+0x112>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	88 a7       	std	Y+40, r24	; 0x28
    24b2:	91 c0       	rjmp	.+290    	; 0x25d6 <lcd_write+0x234>
	else if (__tmp > 255)
    24b4:	69 a5       	ldd	r22, Y+41	; 0x29
    24b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    24b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	53 e4       	ldi	r21, 0x43	; 67
    24c4:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	0c f0       	brlt	.+2      	; 0x24ce <lcd_write+0x12c>
    24cc:	7b c0       	rjmp	.+246    	; 0x25c4 <lcd_write+0x222>
	{
		_delay_ms(__us / 1000.0);
    24ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    24d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    24d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d4:	98 a9       	ldd	r25, Y+48	; 0x30
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	54 e4       	ldi	r21, 0x44	; 68
    24de:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8c a3       	std	Y+36, r24	; 0x24
    24e8:	9d a3       	std	Y+37, r25	; 0x25
    24ea:	ae a3       	std	Y+38, r26	; 0x26
    24ec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	6c a1       	ldd	r22, Y+36	; 0x24
    24f0:	7d a1       	ldd	r23, Y+37	; 0x25
    24f2:	8e a1       	ldd	r24, Y+38	; 0x26
    24f4:	9f a1       	ldd	r25, Y+39	; 0x27
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a e7       	ldi	r20, 0x7A	; 122
    24fc:	55 e4       	ldi	r21, 0x45	; 69
    24fe:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	88 a3       	std	Y+32, r24	; 0x20
    2508:	99 a3       	std	Y+33, r25	; 0x21
    250a:	aa a3       	std	Y+34, r26	; 0x22
    250c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    250e:	68 a1       	ldd	r22, Y+32	; 0x20
    2510:	79 a1       	ldd	r23, Y+33	; 0x21
    2512:	8a a1       	ldd	r24, Y+34	; 0x22
    2514:	9b a1       	ldd	r25, Y+35	; 0x23
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <lcd_write+0x18e>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9f 8f       	std	Y+31, r25	; 0x1f
    252c:	8e 8f       	std	Y+30, r24	; 0x1e
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <lcd_write+0x20c>
	else if (__tmp > 65535)
    2530:	68 a1       	ldd	r22, Y+32	; 0x20
    2532:	79 a1       	ldd	r23, Y+33	; 0x21
    2534:	8a a1       	ldd	r24, Y+34	; 0x22
    2536:	9b a1       	ldd	r25, Y+35	; 0x23
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <lcd_write+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	6c a1       	ldd	r22, Y+36	; 0x24
    254a:	7d a1       	ldd	r23, Y+37	; 0x25
    254c:	8e a1       	ldd	r24, Y+38	; 0x26
    254e:	9f a1       	ldd	r25, Y+39	; 0x27
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9f 8f       	std	Y+31, r25	; 0x1f
    256e:	8e 8f       	std	Y+30, r24	; 0x1e
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <lcd_write+0x1ee>
    2572:	80 e9       	ldi	r24, 0x90	; 144
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	9d 8f       	std	Y+29, r25	; 0x1d
    2578:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    257a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    257c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <lcd_write+0x1dc>
    2582:	9d 8f       	std	Y+29, r25	; 0x1d
    2584:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2588:	9f 8d       	ldd	r25, Y+31	; 0x1f
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9f 8f       	std	Y+31, r25	; 0x1f
    258e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2592:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <lcd_write+0x1d0>
    2598:	24 c0       	rjmp	.+72     	; 0x25e2 <lcd_write+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	68 a1       	ldd	r22, Y+32	; 0x20
    259c:	79 a1       	ldd	r23, Y+33	; 0x21
    259e:	8a a1       	ldd	r24, Y+34	; 0x22
    25a0:	9b a1       	ldd	r25, Y+35	; 0x23
    25a2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9f 8f       	std	Y+31, r25	; 0x1f
    25ac:	8e 8f       	std	Y+30, r24	; 0x1e
    25ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25b2:	9b 8f       	std	Y+27, r25	; 0x1b
    25b4:	8a 8f       	std	Y+26, r24	; 0x1a
    25b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <lcd_write+0x218>
    25be:	9b 8f       	std	Y+27, r25	; 0x1b
    25c0:	8a 8f       	std	Y+26, r24	; 0x1a
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <lcd_write+0x240>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25c4:	69 a5       	ldd	r22, Y+41	; 0x29
    25c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    25c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    25cc:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	88 a7       	std	Y+40, r24	; 0x28
    25d6:	88 a5       	ldd	r24, Y+40	; 0x28
    25d8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25da:	89 8d       	ldd	r24, Y+25	; 0x19
    25dc:	8a 95       	dec	r24
    25de:	f1 f7       	brne	.-4      	; 0x25dc <lcd_write+0x23a>
    25e0:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    lcd_E_port &= ~(1<<lcd_E_bit);
    25e2:	a8 e2       	ldi	r26, 0x28	; 40
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e8 e2       	ldi	r30, 0x28	; 40
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	8e 7f       	andi	r24, 0xFE	; 254
    25ee:	8c 93       	st	X, r24
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e8       	ldi	r26, 0x80	; 128
    25f6:	bf e3       	ldi	r27, 0x3F	; 63
    25f8:	8d 8b       	std	Y+21, r24	; 0x15
    25fa:	9e 8b       	std	Y+22, r25	; 0x16
    25fc:	af 8b       	std	Y+23, r26	; 0x17
    25fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	2b ea       	ldi	r18, 0xAB	; 171
    260a:	3a ea       	ldi	r19, 0xAA	; 170
    260c:	4a ea       	ldi	r20, 0xAA	; 170
    260e:	50 e4       	ldi	r21, 0x40	; 64
    2610:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	89 8b       	std	Y+17, r24	; 0x11
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	ab 8b       	std	Y+19, r26	; 0x13
    261e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2620:	69 89       	ldd	r22, Y+17	; 0x11
    2622:	7a 89       	ldd	r23, Y+18	; 0x12
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	1c f4       	brge	.+6      	; 0x263e <lcd_write+0x29c>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	88 8b       	std	Y+16, r24	; 0x10
    263c:	91 c0       	rjmp	.+290    	; 0x2760 <lcd_write+0x3be>
	else if (__tmp > 255)
    263e:	69 89       	ldd	r22, Y+17	; 0x11
    2640:	7a 89       	ldd	r23, Y+18	; 0x12
    2642:	8b 89       	ldd	r24, Y+19	; 0x13
    2644:	9c 89       	ldd	r25, Y+20	; 0x14
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	53 e4       	ldi	r21, 0x43	; 67
    264e:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	0c f0       	brlt	.+2      	; 0x2658 <lcd_write+0x2b6>
    2656:	7b c0       	rjmp	.+246    	; 0x274e <lcd_write+0x3ac>
	{
		_delay_ms(__us / 1000.0);
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 ad 21 	call	0x435a	; 0x435a <__divsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8c 87       	std	Y+12, r24	; 0x0c
    2672:	9d 87       	std	Y+13, r25	; 0x0d
    2674:	ae 87       	std	Y+14, r26	; 0x0e
    2676:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2678:	6c 85       	ldd	r22, Y+12	; 0x0c
    267a:	7d 85       	ldd	r23, Y+13	; 0x0d
    267c:	8e 85       	ldd	r24, Y+14	; 0x0e
    267e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	55 e4       	ldi	r21, 0x45	; 69
    2688:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	88 87       	std	Y+8, r24	; 0x08
    2692:	99 87       	std	Y+9, r25	; 0x09
    2694:	aa 87       	std	Y+10, r26	; 0x0a
    2696:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2698:	68 85       	ldd	r22, Y+8	; 0x08
    269a:	79 85       	ldd	r23, Y+9	; 0x09
    269c:	8a 85       	ldd	r24, Y+10	; 0x0a
    269e:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	2c f4       	brge	.+10     	; 0x26ba <lcd_write+0x318>
		__ticks = 1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9f 83       	std	Y+7, r25	; 0x07
    26b6:	8e 83       	std	Y+6, r24	; 0x06
    26b8:	3f c0       	rjmp	.+126    	; 0x2738 <lcd_write+0x396>
	else if (__tmp > 65535)
    26ba:	68 85       	ldd	r22, Y+8	; 0x08
    26bc:	79 85       	ldd	r23, Y+9	; 0x09
    26be:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	57 e4       	ldi	r21, 0x47	; 71
    26ca:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	4c f5       	brge	.+82     	; 0x2724 <lcd_write+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9f 83       	std	Y+7, r25	; 0x07
    26f8:	8e 83       	std	Y+6, r24	; 0x06
    26fa:	0f c0       	rjmp	.+30     	; 0x271a <lcd_write+0x378>
    26fc:	80 e9       	ldi	r24, 0x90	; 144
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	9d 83       	std	Y+5, r25	; 0x05
    2702:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	9d 81       	ldd	r25, Y+5	; 0x05
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <lcd_write+0x366>
    270c:	9d 83       	std	Y+5, r25	; 0x05
    270e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	9f 81       	ldd	r25, Y+7	; 0x07
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	9f 83       	std	Y+7, r25	; 0x07
    2718:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271a:	8e 81       	ldd	r24, Y+6	; 0x06
    271c:	9f 81       	ldd	r25, Y+7	; 0x07
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	69 f7       	brne	.-38     	; 0x26fc <lcd_write+0x35a>
    2722:	24 c0       	rjmp	.+72     	; 0x276c <lcd_write+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2724:	68 85       	ldd	r22, Y+8	; 0x08
    2726:	79 85       	ldd	r23, Y+9	; 0x09
    2728:	8a 85       	ldd	r24, Y+10	; 0x0a
    272a:	9b 85       	ldd	r25, Y+11	; 0x0b
    272c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9f 83       	std	Y+7, r25	; 0x07
    2736:	8e 83       	std	Y+6, r24	; 0x06
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	9f 81       	ldd	r25, Y+7	; 0x07
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <lcd_write+0x3a2>
    2748:	9b 83       	std	Y+3, r25	; 0x03
    274a:	8a 83       	std	Y+2, r24	; 0x02
    274c:	0f c0       	rjmp	.+30     	; 0x276c <lcd_write+0x3ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    274e:	69 89       	ldd	r22, Y+17	; 0x11
    2750:	7a 89       	ldd	r23, Y+18	; 0x12
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	88 8b       	std	Y+16, r24	; 0x10
    2760:	88 89       	ldd	r24, Y+16	; 0x10
    2762:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	8a 95       	dec	r24
    2768:	f1 f7       	brne	.-4      	; 0x2766 <lcd_write+0x3c4>
    276a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
}
    276c:	e1 96       	adiw	r28, 0x31	; 49
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	08 95       	ret

0000277e <lcd_int>:
void lcd_int(int value){
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	2c 97       	sbiw	r28, 0x0c	; 12
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	9c 87       	std	Y+12, r25	; 0x0c
    2794:	8b 87       	std	Y+11, r24	; 0x0b
	char string[10];
	itoa(value, string, 10);
    2796:	8b 85       	ldd	r24, Y+11	; 0x0b
    2798:	9c 85       	ldd	r25, Y+12	; 0x0c
    279a:	9e 01       	movw	r18, r28
    279c:	2f 5f       	subi	r18, 0xFF	; 255
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	b9 01       	movw	r22, r18
    27a2:	4a e0       	ldi	r20, 0x0A	; 10
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	0e 94 41 25 	call	0x4a82	; 0x4a82 <itoa>
	lcd_str(string);
    27aa:	ce 01       	movw	r24, r28
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
}
    27b2:	2c 96       	adiw	r28, 0x0c	; 12
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <lcd_xy>:

void lcd_xy(uint8_t x, uint8_t y)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <lcd_xy+0x6>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	6a 83       	std	Y+2, r22	; 0x02
	if(y==0)
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	88 23       	and	r24, r24
    27d6:	21 f4       	brne	.+8      	; 0x27e0 <lcd_xy+0x1c>
        lcd_cmd( lcd_SetCursor | (lcd_LineOne + x));
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	80 68       	ori	r24, 0x80	; 128
    27dc:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    if(y==1)
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	29 f4       	brne	.+10     	; 0x27f0 <lcd_xy+0x2c>
        lcd_cmd( lcd_SetCursor | (lcd_LineTwo + x));
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	80 5c       	subi	r24, 0xC0	; 192
    27ea:	80 68       	ori	r24, 0x80	; 128
    27ec:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    if(y==2)
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	82 30       	cpi	r24, 0x02	; 2
    27f4:	29 f4       	brne	.+10     	; 0x2800 <lcd_xy+0x3c>
        lcd_cmd( lcd_SetCursor | (lcd_LineThree + x));
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	8c 5e       	subi	r24, 0xEC	; 236
    27fa:	80 68       	ori	r24, 0x80	; 128
    27fc:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
    if(y==3)
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	83 30       	cpi	r24, 0x03	; 3
    2804:	29 f4       	brne	.+10     	; 0x2810 <lcd_xy+0x4c>
        lcd_cmd( lcd_SetCursor | (lcd_lineFour + x));
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	8c 5a       	subi	r24, 0xAC	; 172
    280a:	80 68       	ori	r24, 0x80	; 128
    280c:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <lcd_clear>:
void lcd_clear(void){
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    lcd_cmd(lcd_Clear);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0e 94 b1 11 	call	0x2362	; 0x2362 <lcd_cmd>
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <lcd_animation>:

void lcd_animation(void){
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	c0 5e       	subi	r28, 0xE0	; 224
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    lcd_clear();
    2848:	0e 94 0d 14 	call	0x281a	; 0x281a <lcd_clear>
    lcd_xy(0,0);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str(" HORN SYSTEM FOR");
    2854:	83 e6       	ldi	r24, 0x63	; 99
    2856:	91 e0       	ldi	r25, 0x01	; 1
    2858:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    lcd_xy(0,1);
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str("     VEHICLE");
    2864:	84 e7       	ldi	r24, 0x74	; 116
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
//    lcd_xy(0,2);
//    lcd_str("  PLEASE  WAIT  ");
    lcd_xy(0,3);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	63 e0       	ldi	r22, 0x03	; 3
    2870:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str(" CALIBRATING");
    2874:	81 e8       	ldi	r24, 0x81	; 129
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    lcd_str(".");
    287c:	8e e8       	ldi	r24, 0x8E	; 142
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    2884:	fe 01       	movw	r30, r28
    2886:	e3 52       	subi	r30, 0x23	; 35
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	a8 ec       	ldi	r26, 0xC8	; 200
    2890:	b2 e4       	ldi	r27, 0x42	; 66
    2892:	80 83       	st	Z, r24
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	a2 83       	std	Z+2, r26	; 0x02
    2898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289a:	8e 01       	movw	r16, r28
    289c:	07 52       	subi	r16, 0x27	; 39
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	e3 52       	subi	r30, 0x23	; 35
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	93 81       	ldd	r25, Z+3	; 0x03
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4a e7       	ldi	r20, 0x7A	; 122
    28b4:	55 e4       	ldi	r21, 0x45	; 69
    28b6:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	f8 01       	movw	r30, r16
    28c0:	80 83       	st	Z, r24
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	a2 83       	std	Z+2, r26	; 0x02
    28c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c8:	fe 01       	movw	r30, r28
    28ca:	e7 52       	subi	r30, 0x27	; 39
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	44 f4       	brge	.+16     	; 0x28f6 <lcd_animation+0xc8>
		__ticks = 1;
    28e6:	fe 01       	movw	r30, r28
    28e8:	e9 52       	subi	r30, 0x29	; 41
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
    28f4:	64 c0       	rjmp	.+200    	; 0x29be <lcd_animation+0x190>
	else if (__tmp > 65535)
    28f6:	fe 01       	movw	r30, r28
    28f8:	e7 52       	subi	r30, 0x27	; 39
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	0c f0       	brlt	.+2      	; 0x2916 <lcd_animation+0xe8>
    2914:	43 c0       	rjmp	.+134    	; 0x299c <lcd_animation+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	fe 01       	movw	r30, r28
    2918:	e3 52       	subi	r30, 0x23	; 35
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8e 01       	movw	r16, r28
    2936:	09 52       	subi	r16, 0x29	; 41
    2938:	1f 4f       	sbci	r17, 0xFF	; 255
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	f8 01       	movw	r30, r16
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
    294c:	1f c0       	rjmp	.+62     	; 0x298c <lcd_animation+0x15e>
    294e:	fe 01       	movw	r30, r28
    2950:	eb 52       	subi	r30, 0x2B	; 43
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 e9       	ldi	r24, 0x90	; 144
    2956:	91 e0       	ldi	r25, 0x01	; 1
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    295c:	fe 01       	movw	r30, r28
    295e:	eb 52       	subi	r30, 0x2B	; 43
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <lcd_animation+0x138>
    296a:	fe 01       	movw	r30, r28
    296c:	eb 52       	subi	r30, 0x2B	; 43
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2974:	de 01       	movw	r26, r28
    2976:	a9 52       	subi	r26, 0x29	; 41
    2978:	bf 4f       	sbci	r27, 0xFF	; 255
    297a:	fe 01       	movw	r30, r28
    297c:	e9 52       	subi	r30, 0x29	; 41
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	11 96       	adiw	r26, 0x01	; 1
    2988:	9c 93       	st	X, r25
    298a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298c:	fe 01       	movw	r30, r28
    298e:	e9 52       	subi	r30, 0x29	; 41
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	91 81       	ldd	r25, Z+1	; 0x01
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	d1 f6       	brne	.-76     	; 0x294e <lcd_animation+0x120>
    299a:	27 c0       	rjmp	.+78     	; 0x29ea <lcd_animation+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	8e 01       	movw	r16, r28
    299e:	09 52       	subi	r16, 0x29	; 41
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	fe 01       	movw	r30, r28
    29a4:	e7 52       	subi	r30, 0x27	; 39
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	f8 01       	movw	r30, r16
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
    29be:	de 01       	movw	r26, r28
    29c0:	ad 52       	subi	r26, 0x2D	; 45
    29c2:	bf 4f       	sbci	r27, 0xFF	; 255
    29c4:	fe 01       	movw	r30, r28
    29c6:	e9 52       	subi	r30, 0x29	; 41
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	8d 93       	st	X+, r24
    29d0:	9c 93       	st	X, r25
    29d2:	fe 01       	movw	r30, r28
    29d4:	ed 52       	subi	r30, 0x2D	; 45
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <lcd_animation+0x1ae>
    29e0:	fe 01       	movw	r30, r28
    29e2:	ed 52       	subi	r30, 0x2D	; 45
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    _delay_ms(100);
    lcd_str(".");
    29ea:	8e e8       	ldi	r24, 0x8E	; 142
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    29f2:	fe 01       	movw	r30, r28
    29f4:	e1 53       	subi	r30, 0x31	; 49
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a6 e1       	ldi	r26, 0x16	; 22
    29fe:	b3 e4       	ldi	r27, 0x43	; 67
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	05 53       	subi	r16, 0x35	; 53
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e1 53       	subi	r30, 0x31	; 49
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	55 e4       	ldi	r21, 0x45	; 69
    2a24:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	80 83       	st	Z, r24
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	a2 83       	std	Z+2, r26	; 0x02
    2a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a36:	fe 01       	movw	r30, r28
    2a38:	e5 53       	subi	r30, 0x35	; 53
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	44 f4       	brge	.+16     	; 0x2a64 <lcd_animation+0x236>
		__ticks = 1;
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 53       	subi	r30, 0x37	; 55
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	64 c0       	rjmp	.+200    	; 0x2b2c <lcd_animation+0x2fe>
	else if (__tmp > 65535)
    2a64:	fe 01       	movw	r30, r28
    2a66:	e5 53       	subi	r30, 0x35	; 53
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	0c f0       	brlt	.+2      	; 0x2a84 <lcd_animation+0x256>
    2a82:	43 c0       	rjmp	.+134    	; 0x2b0a <lcd_animation+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	fe 01       	movw	r30, r28
    2a86:	e1 53       	subi	r30, 0x31	; 49
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8e 01       	movw	r16, r28
    2aa4:	07 53       	subi	r16, 0x37	; 55
    2aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24
    2aba:	1f c0       	rjmp	.+62     	; 0x2afa <lcd_animation+0x2cc>
    2abc:	fe 01       	movw	r30, r28
    2abe:	e9 53       	subi	r30, 0x39	; 57
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 e9       	ldi	r24, 0x90	; 144
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	fe 01       	movw	r30, r28
    2acc:	e9 53       	subi	r30, 0x39	; 57
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <lcd_animation+0x2a6>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 53       	subi	r30, 0x39	; 57
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	de 01       	movw	r26, r28
    2ae4:	a7 53       	subi	r26, 0x37	; 55
    2ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 53       	subi	r30, 0x37	; 55
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	11 96       	adiw	r26, 0x01	; 1
    2af6:	9c 93       	st	X, r25
    2af8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e7 53       	subi	r30, 0x37	; 55
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	d1 f6       	brne	.-76     	; 0x2abc <lcd_animation+0x28e>
    2b08:	27 c0       	rjmp	.+78     	; 0x2b58 <lcd_animation+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	07 53       	subi	r16, 0x37	; 55
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e5 53       	subi	r30, 0x35	; 53
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	de 01       	movw	r26, r28
    2b2e:	ab 53       	subi	r26, 0x3B	; 59
    2b30:	bf 4f       	sbci	r27, 0xFF	; 255
    2b32:	fe 01       	movw	r30, r28
    2b34:	e7 53       	subi	r30, 0x37	; 55
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	8d 93       	st	X+, r24
    2b3e:	9c 93       	st	X, r25
    2b40:	fe 01       	movw	r30, r28
    2b42:	eb 53       	subi	r30, 0x3B	; 59
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <lcd_animation+0x31c>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	eb 53       	subi	r30, 0x3B	; 59
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    _delay_ms(150);
    lcd_str(".");
    2b58:	8e e8       	ldi	r24, 0x8E	; 142
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    2b60:	fe 01       	movw	r30, r28
    2b62:	ef 53       	subi	r30, 0x3F	; 63
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a8 e4       	ldi	r26, 0x48	; 72
    2b6c:	b3 e4       	ldi	r27, 0x43	; 67
    2b6e:	80 83       	st	Z, r24
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	a2 83       	std	Z+2, r26	; 0x02
    2b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	8e 01       	movw	r16, r28
    2b78:	03 54       	subi	r16, 0x43	; 67
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ef 53       	subi	r30, 0x3F	; 63
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a e7       	ldi	r20, 0x7A	; 122
    2b90:	55 e4       	ldi	r21, 0x45	; 69
    2b92:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	80 83       	st	Z, r24
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	a2 83       	std	Z+2, r26	; 0x02
    2ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 54       	subi	r30, 0x43	; 67
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	44 f4       	brge	.+16     	; 0x2bd2 <lcd_animation+0x3a4>
		__ticks = 1;
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e5 54       	subi	r30, 0x45	; 69
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	64 c0       	rjmp	.+200    	; 0x2c9a <lcd_animation+0x46c>
	else if (__tmp > 65535)
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e3 54       	subi	r30, 0x43	; 67
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	3f ef       	ldi	r19, 0xFF	; 255
    2be4:	4f e7       	ldi	r20, 0x7F	; 127
    2be6:	57 e4       	ldi	r21, 0x47	; 71
    2be8:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2bec:	18 16       	cp	r1, r24
    2bee:	0c f0       	brlt	.+2      	; 0x2bf2 <lcd_animation+0x3c4>
    2bf0:	43 c0       	rjmp	.+134    	; 0x2c78 <lcd_animation+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ef 53       	subi	r30, 0x3F	; 63
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e2       	ldi	r20, 0x20	; 32
    2c06:	51 e4       	ldi	r21, 0x41	; 65
    2c08:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	8e 01       	movw	r16, r28
    2c12:	05 54       	subi	r16, 0x45	; 69
    2c14:	1f 4f       	sbci	r17, 0xFF	; 255
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	f8 01       	movw	r30, r16
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	80 83       	st	Z, r24
    2c28:	1f c0       	rjmp	.+62     	; 0x2c68 <lcd_animation+0x43a>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e7 54       	subi	r30, 0x47	; 71
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 e9       	ldi	r24, 0x90	; 144
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	80 83       	st	Z, r24
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e7 54       	subi	r30, 0x47	; 71
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <lcd_animation+0x414>
    2c46:	fe 01       	movw	r30, r28
    2c48:	e7 54       	subi	r30, 0x47	; 71
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	91 83       	std	Z+1, r25	; 0x01
    2c4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	de 01       	movw	r26, r28
    2c52:	a5 54       	subi	r26, 0x45	; 69
    2c54:	bf 4f       	sbci	r27, 0xFF	; 255
    2c56:	fe 01       	movw	r30, r28
    2c58:	e5 54       	subi	r30, 0x45	; 69
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	11 96       	adiw	r26, 0x01	; 1
    2c64:	9c 93       	st	X, r25
    2c66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e5 54       	subi	r30, 0x45	; 69
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	91 81       	ldd	r25, Z+1	; 0x01
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	d1 f6       	brne	.-76     	; 0x2c2a <lcd_animation+0x3fc>
    2c76:	27 c0       	rjmp	.+78     	; 0x2cc6 <lcd_animation+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	8e 01       	movw	r16, r28
    2c7a:	05 54       	subi	r16, 0x45	; 69
    2c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e3 54       	subi	r30, 0x43	; 67
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	f8 01       	movw	r30, r16
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	80 83       	st	Z, r24
    2c9a:	de 01       	movw	r26, r28
    2c9c:	a9 54       	subi	r26, 0x49	; 73
    2c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e5 54       	subi	r30, 0x45	; 69
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	91 81       	ldd	r25, Z+1	; 0x01
    2caa:	8d 93       	st	X+, r24
    2cac:	9c 93       	st	X, r25
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e9 54       	subi	r30, 0x49	; 73
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <lcd_animation+0x48a>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e9 54       	subi	r30, 0x49	; 73
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    _delay_ms(200);
    lcd_str(".");
    2cc6:	8e e8       	ldi	r24, 0x8E	; 142
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 54       	subi	r30, 0x4D	; 77
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	aa e7       	ldi	r26, 0x7A	; 122
    2cda:	b3 e4       	ldi	r27, 0x43	; 67
    2cdc:	80 83       	st	Z, r24
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	a2 83       	std	Z+2, r26	; 0x02
    2ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	01 55       	subi	r16, 0x51	; 81
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	fe 01       	movw	r30, r28
    2cec:	ed 54       	subi	r30, 0x4D	; 77
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a e7       	ldi	r20, 0x7A	; 122
    2cfe:	55 e4       	ldi	r21, 0x45	; 69
    2d00:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	f8 01       	movw	r30, r16
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d12:	fe 01       	movw	r30, r28
    2d14:	e1 55       	subi	r30, 0x51	; 81
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2d2c:	88 23       	and	r24, r24
    2d2e:	44 f4       	brge	.+16     	; 0x2d40 <lcd_animation+0x512>
		__ticks = 1;
    2d30:	fe 01       	movw	r30, r28
    2d32:	e3 55       	subi	r30, 0x53	; 83
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	64 c0       	rjmp	.+200    	; 0x2e08 <lcd_animation+0x5da>
	else if (__tmp > 65535)
    2d40:	fe 01       	movw	r30, r28
    2d42:	e1 55       	subi	r30, 0x51	; 81
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	0c f0       	brlt	.+2      	; 0x2d60 <lcd_animation+0x532>
    2d5e:	43 c0       	rjmp	.+134    	; 0x2de6 <lcd_animation+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	fe 01       	movw	r30, r28
    2d62:	ed 54       	subi	r30, 0x4D	; 77
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8e 01       	movw	r16, r28
    2d80:	03 55       	subi	r16, 0x53	; 83
    2d82:	1f 4f       	sbci	r17, 0xFF	; 255
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	f8 01       	movw	r30, r16
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
    2d96:	1f c0       	rjmp	.+62     	; 0x2dd6 <lcd_animation+0x5a8>
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e5 55       	subi	r30, 0x55	; 85
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 e9       	ldi	r24, 0x90	; 144
    2da0:	91 e0       	ldi	r25, 0x01	; 1
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
    2da6:	fe 01       	movw	r30, r28
    2da8:	e5 55       	subi	r30, 0x55	; 85
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <lcd_animation+0x582>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e5 55       	subi	r30, 0x55	; 85
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbe:	de 01       	movw	r26, r28
    2dc0:	a3 55       	subi	r26, 0x53	; 83
    2dc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e3 55       	subi	r30, 0x53	; 83
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	11 96       	adiw	r26, 0x01	; 1
    2dd2:	9c 93       	st	X, r25
    2dd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e3 55       	subi	r30, 0x53	; 83
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	d1 f6       	brne	.-76     	; 0x2d98 <lcd_animation+0x56a>
    2de4:	27 c0       	rjmp	.+78     	; 0x2e34 <lcd_animation+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de6:	8e 01       	movw	r16, r28
    2de8:	03 55       	subi	r16, 0x53	; 83
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	fe 01       	movw	r30, r28
    2dee:	e1 55       	subi	r30, 0x51	; 81
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	f8 01       	movw	r30, r16
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	de 01       	movw	r26, r28
    2e0a:	a7 55       	subi	r26, 0x57	; 87
    2e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e3 55       	subi	r30, 0x53	; 83
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	91 81       	ldd	r25, Z+1	; 0x01
    2e18:	8d 93       	st	X+, r24
    2e1a:	9c 93       	st	X, r25
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e7 55       	subi	r30, 0x57	; 87
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <lcd_animation+0x5f8>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e7 55       	subi	r30, 0x57	; 87
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
    _delay_ms(250);
    lcd_str(".");
    2e34:	8e e8       	ldi	r24, 0x8E	; 142
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	eb 55       	subi	r30, 0x5B	; 91
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a6 e9       	ldi	r26, 0x96	; 150
    2e48:	b3 e4       	ldi	r27, 0x43	; 67
    2e4a:	80 83       	st	Z, r24
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	a2 83       	std	Z+2, r26	; 0x02
    2e50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e52:	8e 01       	movw	r16, r28
    2e54:	0f 55       	subi	r16, 0x5F	; 95
    2e56:	1f 4f       	sbci	r17, 0xFF	; 255
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 55       	subi	r30, 0x5B	; 91
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a e7       	ldi	r20, 0x7A	; 122
    2e6c:	55 e4       	ldi	r21, 0x45	; 69
    2e6e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	f8 01       	movw	r30, r16
    2e78:	80 83       	st	Z, r24
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	a2 83       	std	Z+2, r26	; 0x02
    2e7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e80:	fe 01       	movw	r30, r28
    2e82:	ef 55       	subi	r30, 0x5F	; 95
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e8       	ldi	r20, 0x80	; 128
    2e94:	5f e3       	ldi	r21, 0x3F	; 63
    2e96:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    2e9a:	88 23       	and	r24, r24
    2e9c:	44 f4       	brge	.+16     	; 0x2eae <lcd_animation+0x680>
		__ticks = 1;
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e1 56       	subi	r30, 0x61	; 97
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
    2eac:	64 c0       	rjmp	.+200    	; 0x2f76 <lcd_animation+0x748>
	else if (__tmp > 65535)
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ef 55       	subi	r30, 0x5F	; 95
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	3f ef       	ldi	r19, 0xFF	; 255
    2ec0:	4f e7       	ldi	r20, 0x7F	; 127
    2ec2:	57 e4       	ldi	r21, 0x47	; 71
    2ec4:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    2ec8:	18 16       	cp	r1, r24
    2eca:	0c f0       	brlt	.+2      	; 0x2ece <lcd_animation+0x6a0>
    2ecc:	43 c0       	rjmp	.+134    	; 0x2f54 <lcd_animation+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ece:	fe 01       	movw	r30, r28
    2ed0:	eb 55       	subi	r30, 0x5B	; 91
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8e 01       	movw	r16, r28
    2eee:	01 56       	subi	r16, 0x61	; 97
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	bc 01       	movw	r22, r24
    2ef4:	cd 01       	movw	r24, r26
    2ef6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	f8 01       	movw	r30, r16
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	80 83       	st	Z, r24
    2f04:	1f c0       	rjmp	.+62     	; 0x2f44 <lcd_animation+0x716>
    2f06:	fe 01       	movw	r30, r28
    2f08:	e3 56       	subi	r30, 0x63	; 99
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 e9       	ldi	r24, 0x90	; 144
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    2f14:	fe 01       	movw	r30, r28
    2f16:	e3 56       	subi	r30, 0x63	; 99
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <lcd_animation+0x6f0>
    2f22:	fe 01       	movw	r30, r28
    2f24:	e3 56       	subi	r30, 0x63	; 99
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2c:	de 01       	movw	r26, r28
    2f2e:	a1 56       	subi	r26, 0x61	; 97
    2f30:	bf 4f       	sbci	r27, 0xFF	; 255
    2f32:	fe 01       	movw	r30, r28
    2f34:	e1 56       	subi	r30, 0x61	; 97
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	11 96       	adiw	r26, 0x01	; 1
    2f40:	9c 93       	st	X, r25
    2f42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f44:	fe 01       	movw	r30, r28
    2f46:	e1 56       	subi	r30, 0x61	; 97
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	d1 f6       	brne	.-76     	; 0x2f06 <lcd_animation+0x6d8>
    2f52:	27 c0       	rjmp	.+78     	; 0x2fa2 <lcd_animation+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f54:	8e 01       	movw	r16, r28
    2f56:	01 56       	subi	r16, 0x61	; 97
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ef 55       	subi	r30, 0x5F	; 95
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	60 81       	ld	r22, Z
    2f62:	71 81       	ldd	r23, Z+1	; 0x01
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	93 81       	ldd	r25, Z+3	; 0x03
    2f68:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	f8 01       	movw	r30, r16
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	80 83       	st	Z, r24
    2f76:	de 01       	movw	r26, r28
    2f78:	a5 56       	subi	r26, 0x65	; 101
    2f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e1 56       	subi	r30, 0x61	; 97
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	80 81       	ld	r24, Z
    2f84:	91 81       	ldd	r25, Z+1	; 0x01
    2f86:	8d 93       	st	X+, r24
    2f88:	9c 93       	st	X, r25
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	e5 56       	subi	r30, 0x65	; 101
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	91 81       	ldd	r25, Z+1	; 0x01
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <lcd_animation+0x766>
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e5 56       	subi	r30, 0x65	; 101
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
    _delay_ms(300);
    lcd_xy(0,3);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	63 e0       	ldi	r22, 0x03	; 3
    2fa6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str(" CALIBRATING    ");
    2faa:	80 e9       	ldi	r24, 0x90	; 144
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    lcd_xy(0,3);
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	63 e0       	ldi	r22, 0x03	; 3
    2fb6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str(" CALIBRATING");
    2fba:	81 e8       	ldi	r24, 0x81	; 129
    2fbc:	91 e0       	ldi	r25, 0x01	; 1
    2fbe:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    lcd_str(".");
    2fc2:	8e e8       	ldi	r24, 0x8E	; 142
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e9 56       	subi	r30, 0x69	; 105
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	af ea       	ldi	r26, 0xAF	; 175
    2fd6:	b3 e4       	ldi	r27, 0x43	; 67
    2fd8:	80 83       	st	Z, r24
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	a2 83       	std	Z+2, r26	; 0x02
    2fde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe0:	8e 01       	movw	r16, r28
    2fe2:	0d 56       	subi	r16, 0x6D	; 109
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e9 56       	subi	r30, 0x69	; 105
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	4a e7       	ldi	r20, 0x7A	; 122
    2ffa:	55 e4       	ldi	r21, 0x45	; 69
    2ffc:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	f8 01       	movw	r30, r16
    3006:	80 83       	st	Z, r24
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	a2 83       	std	Z+2, r26	; 0x02
    300c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    300e:	fe 01       	movw	r30, r28
    3010:	ed 56       	subi	r30, 0x6D	; 109
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	60 81       	ld	r22, Z
    3016:	71 81       	ldd	r23, Z+1	; 0x01
    3018:	82 81       	ldd	r24, Z+2	; 0x02
    301a:	93 81       	ldd	r25, Z+3	; 0x03
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	44 f4       	brge	.+16     	; 0x303c <lcd_animation+0x80e>
		__ticks = 1;
    302c:	fe 01       	movw	r30, r28
    302e:	ef 56       	subi	r30, 0x6F	; 111
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
    303a:	64 c0       	rjmp	.+200    	; 0x3104 <lcd_animation+0x8d6>
	else if (__tmp > 65535)
    303c:	fe 01       	movw	r30, r28
    303e:	ed 56       	subi	r30, 0x6D	; 109
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f e7       	ldi	r20, 0x7F	; 127
    3050:	57 e4       	ldi	r21, 0x47	; 71
    3052:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    3056:	18 16       	cp	r1, r24
    3058:	0c f0       	brlt	.+2      	; 0x305c <lcd_animation+0x82e>
    305a:	43 c0       	rjmp	.+134    	; 0x30e2 <lcd_animation+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305c:	fe 01       	movw	r30, r28
    305e:	e9 56       	subi	r30, 0x69	; 105
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	60 81       	ld	r22, Z
    3064:	71 81       	ldd	r23, Z+1	; 0x01
    3066:	82 81       	ldd	r24, Z+2	; 0x02
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e2       	ldi	r20, 0x20	; 32
    3070:	51 e4       	ldi	r21, 0x41	; 65
    3072:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	8e 01       	movw	r16, r28
    307c:	0f 56       	subi	r16, 0x6F	; 111
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	bc 01       	movw	r22, r24
    3082:	cd 01       	movw	r24, r26
    3084:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	f8 01       	movw	r30, r16
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
    3092:	1f c0       	rjmp	.+62     	; 0x30d2 <lcd_animation+0x8a4>
    3094:	fe 01       	movw	r30, r28
    3096:	e1 57       	subi	r30, 0x71	; 113
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 e9       	ldi	r24, 0x90	; 144
    309c:	91 e0       	ldi	r25, 0x01	; 1
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	80 83       	st	Z, r24
    30a2:	fe 01       	movw	r30, r28
    30a4:	e1 57       	subi	r30, 0x71	; 113
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <lcd_animation+0x87e>
    30b0:	fe 01       	movw	r30, r28
    30b2:	e1 57       	subi	r30, 0x71	; 113
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ba:	de 01       	movw	r26, r28
    30bc:	af 56       	subi	r26, 0x6F	; 111
    30be:	bf 4f       	sbci	r27, 0xFF	; 255
    30c0:	fe 01       	movw	r30, r28
    30c2:	ef 56       	subi	r30, 0x6F	; 111
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	11 96       	adiw	r26, 0x01	; 1
    30ce:	9c 93       	st	X, r25
    30d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d2:	fe 01       	movw	r30, r28
    30d4:	ef 56       	subi	r30, 0x6F	; 111
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	d1 f6       	brne	.-76     	; 0x3094 <lcd_animation+0x866>
    30e0:	27 c0       	rjmp	.+78     	; 0x3130 <lcd_animation+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	8e 01       	movw	r16, r28
    30e4:	0f 56       	subi	r16, 0x6F	; 111
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	fe 01       	movw	r30, r28
    30ea:	ed 56       	subi	r30, 0x6D	; 109
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	f8 01       	movw	r30, r16
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	80 83       	st	Z, r24
    3104:	de 01       	movw	r26, r28
    3106:	a3 57       	subi	r26, 0x73	; 115
    3108:	bf 4f       	sbci	r27, 0xFF	; 255
    310a:	fe 01       	movw	r30, r28
    310c:	ef 56       	subi	r30, 0x6F	; 111
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	8d 93       	st	X+, r24
    3116:	9c 93       	st	X, r25
    3118:	fe 01       	movw	r30, r28
    311a:	e3 57       	subi	r30, 0x73	; 115
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <lcd_animation+0x8f4>
    3126:	fe 01       	movw	r30, r28
    3128:	e3 57       	subi	r30, 0x73	; 115
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	91 83       	std	Z+1, r25	; 0x01
    312e:	80 83       	st	Z, r24
    _delay_ms(350);
    lcd_str(".");
    3130:	8e e8       	ldi	r24, 0x8E	; 142
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3138:	fe 01       	movw	r30, r28
    313a:	e7 57       	subi	r30, 0x77	; 119
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a8 ec       	ldi	r26, 0xC8	; 200
    3144:	b3 e4       	ldi	r27, 0x43	; 67
    3146:	80 83       	st	Z, r24
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	a2 83       	std	Z+2, r26	; 0x02
    314c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314e:	8e 01       	movw	r16, r28
    3150:	0b 57       	subi	r16, 0x7B	; 123
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	fe 01       	movw	r30, r28
    3156:	e7 57       	subi	r30, 0x77	; 119
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	4a e7       	ldi	r20, 0x7A	; 122
    3168:	55 e4       	ldi	r21, 0x45	; 69
    316a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	f8 01       	movw	r30, r16
    3174:	80 83       	st	Z, r24
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	a2 83       	std	Z+2, r26	; 0x02
    317a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    317c:	fe 01       	movw	r30, r28
    317e:	eb 57       	subi	r30, 0x7B	; 123
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e8       	ldi	r20, 0x80	; 128
    3190:	5f e3       	ldi	r21, 0x3F	; 63
    3192:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3196:	88 23       	and	r24, r24
    3198:	44 f4       	brge	.+16     	; 0x31aa <lcd_animation+0x97c>
		__ticks = 1;
    319a:	fe 01       	movw	r30, r28
    319c:	ed 57       	subi	r30, 0x7D	; 125
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
    31a8:	64 c0       	rjmp	.+200    	; 0x3272 <lcd_animation+0xa44>
	else if (__tmp > 65535)
    31aa:	fe 01       	movw	r30, r28
    31ac:	eb 57       	subi	r30, 0x7B	; 123
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	0c f0       	brlt	.+2      	; 0x31ca <lcd_animation+0x99c>
    31c8:	43 c0       	rjmp	.+134    	; 0x3250 <lcd_animation+0xa22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	fe 01       	movw	r30, r28
    31cc:	e7 57       	subi	r30, 0x77	; 119
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	60 81       	ld	r22, Z
    31d2:	71 81       	ldd	r23, Z+1	; 0x01
    31d4:	82 81       	ldd	r24, Z+2	; 0x02
    31d6:	93 81       	ldd	r25, Z+3	; 0x03
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	8e 01       	movw	r16, r28
    31ea:	0d 57       	subi	r16, 0x7D	; 125
    31ec:	1f 4f       	sbci	r17, 0xFF	; 255
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	f8 01       	movw	r30, r16
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
    3200:	1f c0       	rjmp	.+62     	; 0x3240 <lcd_animation+0xa12>
    3202:	fe 01       	movw	r30, r28
    3204:	ef 57       	subi	r30, 0x7F	; 127
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 e9       	ldi	r24, 0x90	; 144
    320a:	91 e0       	ldi	r25, 0x01	; 1
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	fe 01       	movw	r30, r28
    3212:	ef 57       	subi	r30, 0x7F	; 127
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <lcd_animation+0x9ec>
    321e:	fe 01       	movw	r30, r28
    3220:	ef 57       	subi	r30, 0x7F	; 127
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3228:	de 01       	movw	r26, r28
    322a:	ad 57       	subi	r26, 0x7D	; 125
    322c:	bf 4f       	sbci	r27, 0xFF	; 255
    322e:	fe 01       	movw	r30, r28
    3230:	ed 57       	subi	r30, 0x7D	; 125
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	11 96       	adiw	r26, 0x01	; 1
    323c:	9c 93       	st	X, r25
    323e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3240:	fe 01       	movw	r30, r28
    3242:	ed 57       	subi	r30, 0x7D	; 125
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	d1 f6       	brne	.-76     	; 0x3202 <lcd_animation+0x9d4>
    324e:	27 c0       	rjmp	.+78     	; 0x329e <lcd_animation+0xa70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	8e 01       	movw	r16, r28
    3252:	0d 57       	subi	r16, 0x7D	; 125
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	eb 57       	subi	r30, 0x7B	; 123
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
    3272:	de 01       	movw	r26, r28
    3274:	a1 58       	subi	r26, 0x81	; 129
    3276:	bf 4f       	sbci	r27, 0xFF	; 255
    3278:	fe 01       	movw	r30, r28
    327a:	ed 57       	subi	r30, 0x7D	; 125
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	8d 93       	st	X+, r24
    3284:	9c 93       	st	X, r25
    3286:	fe 01       	movw	r30, r28
    3288:	e1 58       	subi	r30, 0x81	; 129
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	91 81       	ldd	r25, Z+1	; 0x01
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <lcd_animation+0xa62>
    3294:	fe 01       	movw	r30, r28
    3296:	e1 58       	subi	r30, 0x81	; 129
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    _delay_ms(400);
    lcd_str(".");
    329e:	8e e8       	ldi	r24, 0x8E	; 142
    32a0:	91 e0       	ldi	r25, 0x01	; 1
    32a2:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    32a6:	fe 01       	movw	r30, r28
    32a8:	e5 58       	subi	r30, 0x85	; 133
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a1 ee       	ldi	r26, 0xE1	; 225
    32b2:	b3 e4       	ldi	r27, 0x43	; 67
    32b4:	80 83       	st	Z, r24
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	a2 83       	std	Z+2, r26	; 0x02
    32ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	8e 01       	movw	r16, r28
    32be:	09 58       	subi	r16, 0x89	; 137
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	fe 01       	movw	r30, r28
    32c4:	e5 58       	subi	r30, 0x85	; 133
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a e7       	ldi	r20, 0x7A	; 122
    32d6:	55 e4       	ldi	r21, 0x45	; 69
    32d8:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	f8 01       	movw	r30, r16
    32e2:	80 83       	st	Z, r24
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	a2 83       	std	Z+2, r26	; 0x02
    32e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ea:	fe 01       	movw	r30, r28
    32ec:	e9 58       	subi	r30, 0x89	; 137
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e8       	ldi	r20, 0x80	; 128
    32fe:	5f e3       	ldi	r21, 0x3F	; 63
    3300:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3304:	88 23       	and	r24, r24
    3306:	44 f4       	brge	.+16     	; 0x3318 <lcd_animation+0xaea>
		__ticks = 1;
    3308:	fe 01       	movw	r30, r28
    330a:	eb 58       	subi	r30, 0x8B	; 139
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	80 83       	st	Z, r24
    3316:	64 c0       	rjmp	.+200    	; 0x33e0 <lcd_animation+0xbb2>
	else if (__tmp > 65535)
    3318:	fe 01       	movw	r30, r28
    331a:	e9 58       	subi	r30, 0x89	; 137
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	0c f0       	brlt	.+2      	; 0x3338 <lcd_animation+0xb0a>
    3336:	43 c0       	rjmp	.+134    	; 0x33be <lcd_animation+0xb90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	fe 01       	movw	r30, r28
    333a:	e5 58       	subi	r30, 0x85	; 133
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8e 01       	movw	r16, r28
    3358:	0b 58       	subi	r16, 0x8B	; 139
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	f8 01       	movw	r30, r16
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	1f c0       	rjmp	.+62     	; 0x33ae <lcd_animation+0xb80>
    3370:	fe 01       	movw	r30, r28
    3372:	ed 58       	subi	r30, 0x8D	; 141
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 e9       	ldi	r24, 0x90	; 144
    3378:	91 e0       	ldi	r25, 0x01	; 1
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    337e:	fe 01       	movw	r30, r28
    3380:	ed 58       	subi	r30, 0x8D	; 141
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <lcd_animation+0xb5a>
    338c:	fe 01       	movw	r30, r28
    338e:	ed 58       	subi	r30, 0x8D	; 141
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	de 01       	movw	r26, r28
    3398:	ab 58       	subi	r26, 0x8B	; 139
    339a:	bf 4f       	sbci	r27, 0xFF	; 255
    339c:	fe 01       	movw	r30, r28
    339e:	eb 58       	subi	r30, 0x8B	; 139
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	11 96       	adiw	r26, 0x01	; 1
    33aa:	9c 93       	st	X, r25
    33ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ae:	fe 01       	movw	r30, r28
    33b0:	eb 58       	subi	r30, 0x8B	; 139
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	d1 f6       	brne	.-76     	; 0x3370 <lcd_animation+0xb42>
    33bc:	27 c0       	rjmp	.+78     	; 0x340c <lcd_animation+0xbde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33be:	8e 01       	movw	r16, r28
    33c0:	0b 58       	subi	r16, 0x8B	; 139
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	fe 01       	movw	r30, r28
    33c6:	e9 58       	subi	r30, 0x89	; 137
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	f8 01       	movw	r30, r16
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
    33e0:	de 01       	movw	r26, r28
    33e2:	af 58       	subi	r26, 0x8F	; 143
    33e4:	bf 4f       	sbci	r27, 0xFF	; 255
    33e6:	fe 01       	movw	r30, r28
    33e8:	eb 58       	subi	r30, 0x8B	; 139
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	8d 93       	st	X+, r24
    33f2:	9c 93       	st	X, r25
    33f4:	fe 01       	movw	r30, r28
    33f6:	ef 58       	subi	r30, 0x8F	; 143
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	80 81       	ld	r24, Z
    33fc:	91 81       	ldd	r25, Z+1	; 0x01
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <lcd_animation+0xbd0>
    3402:	fe 01       	movw	r30, r28
    3404:	ef 58       	subi	r30, 0x8F	; 143
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    _delay_ms(450);
    lcd_str(".");
    340c:	8e e8       	ldi	r24, 0x8E	; 142
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3414:	fe 01       	movw	r30, r28
    3416:	e3 59       	subi	r30, 0x93	; 147
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	aa ef       	ldi	r26, 0xFA	; 250
    3420:	b3 e4       	ldi	r27, 0x43	; 67
    3422:	80 83       	st	Z, r24
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	a2 83       	std	Z+2, r26	; 0x02
    3428:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342a:	8e 01       	movw	r16, r28
    342c:	07 59       	subi	r16, 0x97	; 151
    342e:	1f 4f       	sbci	r17, 0xFF	; 255
    3430:	fe 01       	movw	r30, r28
    3432:	e3 59       	subi	r30, 0x93	; 147
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	60 81       	ld	r22, Z
    3438:	71 81       	ldd	r23, Z+1	; 0x01
    343a:	82 81       	ldd	r24, Z+2	; 0x02
    343c:	93 81       	ldd	r25, Z+3	; 0x03
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	4a e7       	ldi	r20, 0x7A	; 122
    3444:	55 e4       	ldi	r21, 0x45	; 69
    3446:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	f8 01       	movw	r30, r16
    3450:	80 83       	st	Z, r24
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	a2 83       	std	Z+2, r26	; 0x02
    3456:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3458:	fe 01       	movw	r30, r28
    345a:	e7 59       	subi	r30, 0x97	; 151
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	60 81       	ld	r22, Z
    3460:	71 81       	ldd	r23, Z+1	; 0x01
    3462:	82 81       	ldd	r24, Z+2	; 0x02
    3464:	93 81       	ldd	r25, Z+3	; 0x03
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e8       	ldi	r20, 0x80	; 128
    346c:	5f e3       	ldi	r21, 0x3F	; 63
    346e:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3472:	88 23       	and	r24, r24
    3474:	44 f4       	brge	.+16     	; 0x3486 <lcd_animation+0xc58>
		__ticks = 1;
    3476:	fe 01       	movw	r30, r28
    3478:	e9 59       	subi	r30, 0x99	; 153
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	80 83       	st	Z, r24
    3484:	64 c0       	rjmp	.+200    	; 0x354e <lcd_animation+0xd20>
	else if (__tmp > 65535)
    3486:	fe 01       	movw	r30, r28
    3488:	e7 59       	subi	r30, 0x97	; 151
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	60 81       	ld	r22, Z
    348e:	71 81       	ldd	r23, Z+1	; 0x01
    3490:	82 81       	ldd	r24, Z+2	; 0x02
    3492:	93 81       	ldd	r25, Z+3	; 0x03
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	3f ef       	ldi	r19, 0xFF	; 255
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	57 e4       	ldi	r21, 0x47	; 71
    349c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    34a0:	18 16       	cp	r1, r24
    34a2:	0c f0       	brlt	.+2      	; 0x34a6 <lcd_animation+0xc78>
    34a4:	43 c0       	rjmp	.+134    	; 0x352c <lcd_animation+0xcfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a6:	fe 01       	movw	r30, r28
    34a8:	e3 59       	subi	r30, 0x93	; 147
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	60 81       	ld	r22, Z
    34ae:	71 81       	ldd	r23, Z+1	; 0x01
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	93 81       	ldd	r25, Z+3	; 0x03
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e2       	ldi	r20, 0x20	; 32
    34ba:	51 e4       	ldi	r21, 0x41	; 65
    34bc:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	8e 01       	movw	r16, r28
    34c6:	09 59       	subi	r16, 0x99	; 153
    34c8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ca:	bc 01       	movw	r22, r24
    34cc:	cd 01       	movw	r24, r26
    34ce:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	f8 01       	movw	r30, r16
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	80 83       	st	Z, r24
    34dc:	1f c0       	rjmp	.+62     	; 0x351c <lcd_animation+0xcee>
    34de:	fe 01       	movw	r30, r28
    34e0:	eb 59       	subi	r30, 0x9B	; 155
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	80 e9       	ldi	r24, 0x90	; 144
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	91 83       	std	Z+1, r25	; 0x01
    34ea:	80 83       	st	Z, r24
    34ec:	fe 01       	movw	r30, r28
    34ee:	eb 59       	subi	r30, 0x9B	; 155
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <lcd_animation+0xcc8>
    34fa:	fe 01       	movw	r30, r28
    34fc:	eb 59       	subi	r30, 0x9B	; 155
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3504:	de 01       	movw	r26, r28
    3506:	a9 59       	subi	r26, 0x99	; 153
    3508:	bf 4f       	sbci	r27, 0xFF	; 255
    350a:	fe 01       	movw	r30, r28
    350c:	e9 59       	subi	r30, 0x99	; 153
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	11 96       	adiw	r26, 0x01	; 1
    3518:	9c 93       	st	X, r25
    351a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351c:	fe 01       	movw	r30, r28
    351e:	e9 59       	subi	r30, 0x99	; 153
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	d1 f6       	brne	.-76     	; 0x34de <lcd_animation+0xcb0>
    352a:	27 c0       	rjmp	.+78     	; 0x357a <lcd_animation+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352c:	8e 01       	movw	r16, r28
    352e:	09 59       	subi	r16, 0x99	; 153
    3530:	1f 4f       	sbci	r17, 0xFF	; 255
    3532:	fe 01       	movw	r30, r28
    3534:	e7 59       	subi	r30, 0x97	; 151
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	f8 01       	movw	r30, r16
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	80 83       	st	Z, r24
    354e:	de 01       	movw	r26, r28
    3550:	ad 59       	subi	r26, 0x9D	; 157
    3552:	bf 4f       	sbci	r27, 0xFF	; 255
    3554:	fe 01       	movw	r30, r28
    3556:	e9 59       	subi	r30, 0x99	; 153
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	8d 93       	st	X+, r24
    3560:	9c 93       	st	X, r25
    3562:	fe 01       	movw	r30, r28
    3564:	ed 59       	subi	r30, 0x9D	; 157
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	80 81       	ld	r24, Z
    356a:	91 81       	ldd	r25, Z+1	; 0x01
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <lcd_animation+0xd3e>
    3570:	fe 01       	movw	r30, r28
    3572:	ed 59       	subi	r30, 0x9D	; 157
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
    _delay_ms(500);
    lcd_str(".");
    357a:	8e e8       	ldi	r24, 0x8E	; 142
    357c:	91 e0       	ldi	r25, 0x01	; 1
    357e:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3582:	fe 01       	movw	r30, r28
    3584:	e1 5a       	subi	r30, 0xA1	; 161
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e8       	ldi	r25, 0x80	; 128
    358c:	a9 e0       	ldi	r26, 0x09	; 9
    358e:	b4 e4       	ldi	r27, 0x44	; 68
    3590:	80 83       	st	Z, r24
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	a2 83       	std	Z+2, r26	; 0x02
    3596:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3598:	8e 01       	movw	r16, r28
    359a:	05 5a       	subi	r16, 0xA5	; 165
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
    359e:	fe 01       	movw	r30, r28
    35a0:	e1 5a       	subi	r30, 0xA1	; 161
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4a e7       	ldi	r20, 0x7A	; 122
    35b2:	55 e4       	ldi	r21, 0x45	; 69
    35b4:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	f8 01       	movw	r30, r16
    35be:	80 83       	st	Z, r24
    35c0:	91 83       	std	Z+1, r25	; 0x01
    35c2:	a2 83       	std	Z+2, r26	; 0x02
    35c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35c6:	fe 01       	movw	r30, r28
    35c8:	e5 5a       	subi	r30, 0xA5	; 165
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	60 81       	ld	r22, Z
    35ce:	71 81       	ldd	r23, Z+1	; 0x01
    35d0:	82 81       	ldd	r24, Z+2	; 0x02
    35d2:	93 81       	ldd	r25, Z+3	; 0x03
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e8       	ldi	r20, 0x80	; 128
    35da:	5f e3       	ldi	r21, 0x3F	; 63
    35dc:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    35e0:	88 23       	and	r24, r24
    35e2:	44 f4       	brge	.+16     	; 0x35f4 <lcd_animation+0xdc6>
		__ticks = 1;
    35e4:	fe 01       	movw	r30, r28
    35e6:	e7 5a       	subi	r30, 0xA7	; 167
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
    35f2:	64 c0       	rjmp	.+200    	; 0x36bc <lcd_animation+0xe8e>
	else if (__tmp > 65535)
    35f4:	fe 01       	movw	r30, r28
    35f6:	e5 5a       	subi	r30, 0xA5	; 165
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	93 81       	ldd	r25, Z+3	; 0x03
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	3f ef       	ldi	r19, 0xFF	; 255
    3606:	4f e7       	ldi	r20, 0x7F	; 127
    3608:	57 e4       	ldi	r21, 0x47	; 71
    360a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    360e:	18 16       	cp	r1, r24
    3610:	0c f0       	brlt	.+2      	; 0x3614 <lcd_animation+0xde6>
    3612:	43 c0       	rjmp	.+134    	; 0x369a <lcd_animation+0xe6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3614:	fe 01       	movw	r30, r28
    3616:	e1 5a       	subi	r30, 0xA1	; 161
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e2       	ldi	r20, 0x20	; 32
    3628:	51 e4       	ldi	r21, 0x41	; 65
    362a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	8e 01       	movw	r16, r28
    3634:	07 5a       	subi	r16, 0xA7	; 167
    3636:	1f 4f       	sbci	r17, 0xFF	; 255
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	f8 01       	movw	r30, r16
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
    364a:	1f c0       	rjmp	.+62     	; 0x368a <lcd_animation+0xe5c>
    364c:	fe 01       	movw	r30, r28
    364e:	e9 5a       	subi	r30, 0xA9	; 169
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 e9       	ldi	r24, 0x90	; 144
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	80 83       	st	Z, r24
    365a:	fe 01       	movw	r30, r28
    365c:	e9 5a       	subi	r30, 0xA9	; 169
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 81       	ld	r24, Z
    3662:	91 81       	ldd	r25, Z+1	; 0x01
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <lcd_animation+0xe36>
    3668:	fe 01       	movw	r30, r28
    366a:	e9 5a       	subi	r30, 0xA9	; 169
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	91 83       	std	Z+1, r25	; 0x01
    3670:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3672:	de 01       	movw	r26, r28
    3674:	a7 5a       	subi	r26, 0xA7	; 167
    3676:	bf 4f       	sbci	r27, 0xFF	; 255
    3678:	fe 01       	movw	r30, r28
    367a:	e7 5a       	subi	r30, 0xA7	; 167
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	11 96       	adiw	r26, 0x01	; 1
    3686:	9c 93       	st	X, r25
    3688:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368a:	fe 01       	movw	r30, r28
    368c:	e7 5a       	subi	r30, 0xA7	; 167
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	d1 f6       	brne	.-76     	; 0x364c <lcd_animation+0xe1e>
    3698:	27 c0       	rjmp	.+78     	; 0x36e8 <lcd_animation+0xeba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369a:	8e 01       	movw	r16, r28
    369c:	07 5a       	subi	r16, 0xA7	; 167
    369e:	1f 4f       	sbci	r17, 0xFF	; 255
    36a0:	fe 01       	movw	r30, r28
    36a2:	e5 5a       	subi	r30, 0xA5	; 165
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	93 81       	ldd	r25, Z+3	; 0x03
    36ae:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	f8 01       	movw	r30, r16
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	80 83       	st	Z, r24
    36bc:	de 01       	movw	r26, r28
    36be:	ab 5a       	subi	r26, 0xAB	; 171
    36c0:	bf 4f       	sbci	r27, 0xFF	; 255
    36c2:	fe 01       	movw	r30, r28
    36c4:	e7 5a       	subi	r30, 0xA7	; 167
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	8d 93       	st	X+, r24
    36ce:	9c 93       	st	X, r25
    36d0:	fe 01       	movw	r30, r28
    36d2:	eb 5a       	subi	r30, 0xAB	; 171
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <lcd_animation+0xeac>
    36de:	fe 01       	movw	r30, r28
    36e0:	eb 5a       	subi	r30, 0xAB	; 171
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    _delay_ms(550);

    lcd_xy(0,3);
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	63 e0       	ldi	r22, 0x03	; 3
    36ec:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str(" CALIBRATING    ");
    36f0:	80 e9       	ldi	r24, 0x90	; 144
    36f2:	91 e0       	ldi	r25, 0x01	; 1
    36f4:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    lcd_xy(0,3);
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	63 e0       	ldi	r22, 0x03	; 3
    36fc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str(" CALIBRATING");
    3700:	81 e8       	ldi	r24, 0x81	; 129
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    lcd_str(".");
    3708:	8e e8       	ldi	r24, 0x8E	; 142
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3710:	fe 01       	movw	r30, r28
    3712:	ef 5a       	subi	r30, 0xAF	; 175
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	aa ef       	ldi	r26, 0xFA	; 250
    371c:	b3 e4       	ldi	r27, 0x43	; 67
    371e:	80 83       	st	Z, r24
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	a2 83       	std	Z+2, r26	; 0x02
    3724:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3726:	8e 01       	movw	r16, r28
    3728:	03 5b       	subi	r16, 0xB3	; 179
    372a:	1f 4f       	sbci	r17, 0xFF	; 255
    372c:	fe 01       	movw	r30, r28
    372e:	ef 5a       	subi	r30, 0xAF	; 175
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	4a e7       	ldi	r20, 0x7A	; 122
    3740:	55 e4       	ldi	r21, 0x45	; 69
    3742:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	f8 01       	movw	r30, r16
    374c:	80 83       	st	Z, r24
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	a2 83       	std	Z+2, r26	; 0x02
    3752:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3754:	fe 01       	movw	r30, r28
    3756:	e3 5b       	subi	r30, 0xB3	; 179
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	60 81       	ld	r22, Z
    375c:	71 81       	ldd	r23, Z+1	; 0x01
    375e:	82 81       	ldd	r24, Z+2	; 0x02
    3760:	93 81       	ldd	r25, Z+3	; 0x03
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e8       	ldi	r20, 0x80	; 128
    3768:	5f e3       	ldi	r21, 0x3F	; 63
    376a:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    376e:	88 23       	and	r24, r24
    3770:	44 f4       	brge	.+16     	; 0x3782 <lcd_animation+0xf54>
		__ticks = 1;
    3772:	fe 01       	movw	r30, r28
    3774:	e5 5b       	subi	r30, 0xB5	; 181
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	80 83       	st	Z, r24
    3780:	64 c0       	rjmp	.+200    	; 0x384a <lcd_animation+0x101c>
	else if (__tmp > 65535)
    3782:	fe 01       	movw	r30, r28
    3784:	e3 5b       	subi	r30, 0xB3	; 179
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	60 81       	ld	r22, Z
    378a:	71 81       	ldd	r23, Z+1	; 0x01
    378c:	82 81       	ldd	r24, Z+2	; 0x02
    378e:	93 81       	ldd	r25, Z+3	; 0x03
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	3f ef       	ldi	r19, 0xFF	; 255
    3794:	4f e7       	ldi	r20, 0x7F	; 127
    3796:	57 e4       	ldi	r21, 0x47	; 71
    3798:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    379c:	18 16       	cp	r1, r24
    379e:	0c f0       	brlt	.+2      	; 0x37a2 <lcd_animation+0xf74>
    37a0:	43 c0       	rjmp	.+134    	; 0x3828 <lcd_animation+0xffa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a2:	fe 01       	movw	r30, r28
    37a4:	ef 5a       	subi	r30, 0xAF	; 175
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	60 81       	ld	r22, Z
    37aa:	71 81       	ldd	r23, Z+1	; 0x01
    37ac:	82 81       	ldd	r24, Z+2	; 0x02
    37ae:	93 81       	ldd	r25, Z+3	; 0x03
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e2       	ldi	r20, 0x20	; 32
    37b6:	51 e4       	ldi	r21, 0x41	; 65
    37b8:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	8e 01       	movw	r16, r28
    37c2:	05 5b       	subi	r16, 0xB5	; 181
    37c4:	1f 4f       	sbci	r17, 0xFF	; 255
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	f8 01       	movw	r30, r16
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	80 83       	st	Z, r24
    37d8:	1f c0       	rjmp	.+62     	; 0x3818 <lcd_animation+0xfea>
    37da:	fe 01       	movw	r30, r28
    37dc:	e7 5b       	subi	r30, 0xB7	; 183
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	80 e9       	ldi	r24, 0x90	; 144
    37e2:	91 e0       	ldi	r25, 0x01	; 1
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
    37e8:	fe 01       	movw	r30, r28
    37ea:	e7 5b       	subi	r30, 0xB7	; 183
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <lcd_animation+0xfc4>
    37f6:	fe 01       	movw	r30, r28
    37f8:	e7 5b       	subi	r30, 0xB7	; 183
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	91 83       	std	Z+1, r25	; 0x01
    37fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3800:	de 01       	movw	r26, r28
    3802:	a5 5b       	subi	r26, 0xB5	; 181
    3804:	bf 4f       	sbci	r27, 0xFF	; 255
    3806:	fe 01       	movw	r30, r28
    3808:	e5 5b       	subi	r30, 0xB5	; 181
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	80 81       	ld	r24, Z
    380e:	91 81       	ldd	r25, Z+1	; 0x01
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	11 96       	adiw	r26, 0x01	; 1
    3814:	9c 93       	st	X, r25
    3816:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3818:	fe 01       	movw	r30, r28
    381a:	e5 5b       	subi	r30, 0xB5	; 181
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 81       	ld	r24, Z
    3820:	91 81       	ldd	r25, Z+1	; 0x01
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	d1 f6       	brne	.-76     	; 0x37da <lcd_animation+0xfac>
    3826:	27 c0       	rjmp	.+78     	; 0x3876 <lcd_animation+0x1048>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3828:	8e 01       	movw	r16, r28
    382a:	05 5b       	subi	r16, 0xB5	; 181
    382c:	1f 4f       	sbci	r17, 0xFF	; 255
    382e:	fe 01       	movw	r30, r28
    3830:	e3 5b       	subi	r30, 0xB3	; 179
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	60 81       	ld	r22, Z
    3836:	71 81       	ldd	r23, Z+1	; 0x01
    3838:	82 81       	ldd	r24, Z+2	; 0x02
    383a:	93 81       	ldd	r25, Z+3	; 0x03
    383c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	f8 01       	movw	r30, r16
    3846:	91 83       	std	Z+1, r25	; 0x01
    3848:	80 83       	st	Z, r24
    384a:	de 01       	movw	r26, r28
    384c:	a9 5b       	subi	r26, 0xB9	; 185
    384e:	bf 4f       	sbci	r27, 0xFF	; 255
    3850:	fe 01       	movw	r30, r28
    3852:	e5 5b       	subi	r30, 0xB5	; 181
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	8d 93       	st	X+, r24
    385c:	9c 93       	st	X, r25
    385e:	fe 01       	movw	r30, r28
    3860:	e9 5b       	subi	r30, 0xB9	; 185
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	80 81       	ld	r24, Z
    3866:	91 81       	ldd	r25, Z+1	; 0x01
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <lcd_animation+0x103a>
    386c:	fe 01       	movw	r30, r28
    386e:	e9 5b       	subi	r30, 0xB9	; 185
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
    _delay_ms(500);
    lcd_str(".");
    3876:	8e e8       	ldi	r24, 0x8E	; 142
    3878:	91 e0       	ldi	r25, 0x01	; 1
    387a:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    387e:	fe 01       	movw	r30, r28
    3880:	ed 5b       	subi	r30, 0xBD	; 189
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a8 ec       	ldi	r26, 0xC8	; 200
    388a:	b3 e4       	ldi	r27, 0x43	; 67
    388c:	80 83       	st	Z, r24
    388e:	91 83       	std	Z+1, r25	; 0x01
    3890:	a2 83       	std	Z+2, r26	; 0x02
    3892:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	8e 01       	movw	r16, r28
    3896:	01 5c       	subi	r16, 0xC1	; 193
    3898:	1f 4f       	sbci	r17, 0xFF	; 255
    389a:	fe 01       	movw	r30, r28
    389c:	ed 5b       	subi	r30, 0xBD	; 189
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a e7       	ldi	r20, 0x7A	; 122
    38ae:	55 e4       	ldi	r21, 0x45	; 69
    38b0:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	f8 01       	movw	r30, r16
    38ba:	80 83       	st	Z, r24
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	a2 83       	std	Z+2, r26	; 0x02
    38c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c2:	fe 01       	movw	r30, r28
    38c4:	ff 96       	adiw	r30, 0x3f	; 63
    38c6:	60 81       	ld	r22, Z
    38c8:	71 81       	ldd	r23, Z+1	; 0x01
    38ca:	82 81       	ldd	r24, Z+2	; 0x02
    38cc:	93 81       	ldd	r25, Z+3	; 0x03
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e8       	ldi	r20, 0x80	; 128
    38d4:	5f e3       	ldi	r21, 0x3F	; 63
    38d6:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    38da:	88 23       	and	r24, r24
    38dc:	2c f4       	brge	.+10     	; 0x38e8 <lcd_animation+0x10ba>
		__ticks = 1;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	9e af       	std	Y+62, r25	; 0x3e
    38e4:	8d af       	std	Y+61, r24	; 0x3d
    38e6:	46 c0       	rjmp	.+140    	; 0x3974 <lcd_animation+0x1146>
	else if (__tmp > 65535)
    38e8:	fe 01       	movw	r30, r28
    38ea:	ff 96       	adiw	r30, 0x3f	; 63
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	82 81       	ldd	r24, Z+2	; 0x02
    38f2:	93 81       	ldd	r25, Z+3	; 0x03
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	4f e7       	ldi	r20, 0x7F	; 127
    38fa:	57 e4       	ldi	r21, 0x47	; 71
    38fc:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    3900:	18 16       	cp	r1, r24
    3902:	64 f5       	brge	.+88     	; 0x395c <lcd_animation+0x112e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3904:	fe 01       	movw	r30, r28
    3906:	ed 5b       	subi	r30, 0xBD	; 189
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e2       	ldi	r20, 0x20	; 32
    3918:	51 e4       	ldi	r21, 0x41	; 65
    391a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	bc 01       	movw	r22, r24
    3924:	cd 01       	movw	r24, r26
    3926:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	9e af       	std	Y+62, r25	; 0x3e
    3930:	8d af       	std	Y+61, r24	; 0x3d
    3932:	0f c0       	rjmp	.+30     	; 0x3952 <lcd_animation+0x1124>
    3934:	80 e9       	ldi	r24, 0x90	; 144
    3936:	91 e0       	ldi	r25, 0x01	; 1
    3938:	9c af       	std	Y+60, r25	; 0x3c
    393a:	8b af       	std	Y+59, r24	; 0x3b
    393c:	8b ad       	ldd	r24, Y+59	; 0x3b
    393e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	f1 f7       	brne	.-4      	; 0x3940 <lcd_animation+0x1112>
    3944:	9c af       	std	Y+60, r25	; 0x3c
    3946:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3948:	8d ad       	ldd	r24, Y+61	; 0x3d
    394a:	9e ad       	ldd	r25, Y+62	; 0x3e
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	9e af       	std	Y+62, r25	; 0x3e
    3950:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3952:	8d ad       	ldd	r24, Y+61	; 0x3d
    3954:	9e ad       	ldd	r25, Y+62	; 0x3e
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	69 f7       	brne	.-38     	; 0x3934 <lcd_animation+0x1106>
    395a:	16 c0       	rjmp	.+44     	; 0x3988 <lcd_animation+0x115a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395c:	fe 01       	movw	r30, r28
    395e:	ff 96       	adiw	r30, 0x3f	; 63
    3960:	60 81       	ld	r22, Z
    3962:	71 81       	ldd	r23, Z+1	; 0x01
    3964:	82 81       	ldd	r24, Z+2	; 0x02
    3966:	93 81       	ldd	r25, Z+3	; 0x03
    3968:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	9e af       	std	Y+62, r25	; 0x3e
    3972:	8d af       	std	Y+61, r24	; 0x3d
    3974:	8d ad       	ldd	r24, Y+61	; 0x3d
    3976:	9e ad       	ldd	r25, Y+62	; 0x3e
    3978:	9a af       	std	Y+58, r25	; 0x3a
    397a:	89 af       	std	Y+57, r24	; 0x39
    397c:	89 ad       	ldd	r24, Y+57	; 0x39
    397e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <lcd_animation+0x1152>
    3984:	9a af       	std	Y+58, r25	; 0x3a
    3986:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(400);
    lcd_str(".");
    3988:	8e e8       	ldi	r24, 0x8E	; 142
    398a:	91 e0       	ldi	r25, 0x01	; 1
    398c:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	a6 e9       	ldi	r26, 0x96	; 150
    3996:	b3 e4       	ldi	r27, 0x43	; 67
    3998:	8d ab       	std	Y+53, r24	; 0x35
    399a:	9e ab       	std	Y+54, r25	; 0x36
    399c:	af ab       	std	Y+55, r26	; 0x37
    399e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a0:	6d a9       	ldd	r22, Y+53	; 0x35
    39a2:	7e a9       	ldd	r23, Y+54	; 0x36
    39a4:	8f a9       	ldd	r24, Y+55	; 0x37
    39a6:	98 ad       	ldd	r25, Y+56	; 0x38
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	4a e7       	ldi	r20, 0x7A	; 122
    39ae:	55 e4       	ldi	r21, 0x45	; 69
    39b0:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	89 ab       	std	Y+49, r24	; 0x31
    39ba:	9a ab       	std	Y+50, r25	; 0x32
    39bc:	ab ab       	std	Y+51, r26	; 0x33
    39be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39c0:	69 a9       	ldd	r22, Y+49	; 0x31
    39c2:	7a a9       	ldd	r23, Y+50	; 0x32
    39c4:	8b a9       	ldd	r24, Y+51	; 0x33
    39c6:	9c a9       	ldd	r25, Y+52	; 0x34
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e8       	ldi	r20, 0x80	; 128
    39ce:	5f e3       	ldi	r21, 0x3F	; 63
    39d0:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    39d4:	88 23       	and	r24, r24
    39d6:	2c f4       	brge	.+10     	; 0x39e2 <lcd_animation+0x11b4>
		__ticks = 1;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	98 ab       	std	Y+48, r25	; 0x30
    39de:	8f a7       	std	Y+47, r24	; 0x2f
    39e0:	3f c0       	rjmp	.+126    	; 0x3a60 <lcd_animation+0x1232>
	else if (__tmp > 65535)
    39e2:	69 a9       	ldd	r22, Y+49	; 0x31
    39e4:	7a a9       	ldd	r23, Y+50	; 0x32
    39e6:	8b a9       	ldd	r24, Y+51	; 0x33
    39e8:	9c a9       	ldd	r25, Y+52	; 0x34
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	3f ef       	ldi	r19, 0xFF	; 255
    39ee:	4f e7       	ldi	r20, 0x7F	; 127
    39f0:	57 e4       	ldi	r21, 0x47	; 71
    39f2:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    39f6:	18 16       	cp	r1, r24
    39f8:	4c f5       	brge	.+82     	; 0x3a4c <lcd_animation+0x121e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fa:	6d a9       	ldd	r22, Y+53	; 0x35
    39fc:	7e a9       	ldd	r23, Y+54	; 0x36
    39fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3a00:	98 ad       	ldd	r25, Y+56	; 0x38
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e2       	ldi	r20, 0x20	; 32
    3a08:	51 e4       	ldi	r21, 0x41	; 65
    3a0a:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	98 ab       	std	Y+48, r25	; 0x30
    3a20:	8f a7       	std	Y+47, r24	; 0x2f
    3a22:	0f c0       	rjmp	.+30     	; 0x3a42 <lcd_animation+0x1214>
    3a24:	80 e9       	ldi	r24, 0x90	; 144
    3a26:	91 e0       	ldi	r25, 0x01	; 1
    3a28:	9e a7       	std	Y+46, r25	; 0x2e
    3a2a:	8d a7       	std	Y+45, r24	; 0x2d
    3a2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <lcd_animation+0x1202>
    3a34:	9e a7       	std	Y+46, r25	; 0x2e
    3a36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	98 ab       	std	Y+48, r25	; 0x30
    3a40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a44:	98 a9       	ldd	r25, Y+48	; 0x30
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	69 f7       	brne	.-38     	; 0x3a24 <lcd_animation+0x11f6>
    3a4a:	14 c0       	rjmp	.+40     	; 0x3a74 <lcd_animation+0x1246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a4e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a50:	8b a9       	ldd	r24, Y+51	; 0x33
    3a52:	9c a9       	ldd	r25, Y+52	; 0x34
    3a54:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	98 ab       	std	Y+48, r25	; 0x30
    3a5e:	8f a7       	std	Y+47, r24	; 0x2f
    3a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a62:	98 a9       	ldd	r25, Y+48	; 0x30
    3a64:	9c a7       	std	Y+44, r25	; 0x2c
    3a66:	8b a7       	std	Y+43, r24	; 0x2b
    3a68:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <lcd_animation+0x123e>
    3a70:	9c a7       	std	Y+44, r25	; 0x2c
    3a72:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(300);
    lcd_str(".");
    3a74:	8e e8       	ldi	r24, 0x8E	; 142
    3a76:	91 e0       	ldi	r25, 0x01	; 1
    3a78:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	a8 e4       	ldi	r26, 0x48	; 72
    3a82:	b3 e4       	ldi	r27, 0x43	; 67
    3a84:	8f a3       	std	Y+39, r24	; 0x27
    3a86:	98 a7       	std	Y+40, r25	; 0x28
    3a88:	a9 a7       	std	Y+41, r26	; 0x29
    3a8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a90:	89 a5       	ldd	r24, Y+41	; 0x29
    3a92:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	4a e7       	ldi	r20, 0x7A	; 122
    3a9a:	55 e4       	ldi	r21, 0x45	; 69
    3a9c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	8b a3       	std	Y+35, r24	; 0x23
    3aa6:	9c a3       	std	Y+36, r25	; 0x24
    3aa8:	ad a3       	std	Y+37, r26	; 0x25
    3aaa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aac:	6b a1       	ldd	r22, Y+35	; 0x23
    3aae:	7c a1       	ldd	r23, Y+36	; 0x24
    3ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e8       	ldi	r20, 0x80	; 128
    3aba:	5f e3       	ldi	r21, 0x3F	; 63
    3abc:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3ac0:	88 23       	and	r24, r24
    3ac2:	2c f4       	brge	.+10     	; 0x3ace <lcd_animation+0x12a0>
		__ticks = 1;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
    3acc:	3f c0       	rjmp	.+126    	; 0x3b4c <lcd_animation+0x131e>
	else if (__tmp > 65535)
    3ace:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	3f ef       	ldi	r19, 0xFF	; 255
    3ada:	4f e7       	ldi	r20, 0x7F	; 127
    3adc:	57 e4       	ldi	r21, 0x47	; 71
    3ade:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    3ae2:	18 16       	cp	r1, r24
    3ae4:	4c f5       	brge	.+82     	; 0x3b38 <lcd_animation+0x130a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ae8:	78 a5       	ldd	r23, Y+40	; 0x28
    3aea:	89 a5       	ldd	r24, Y+41	; 0x29
    3aec:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e2       	ldi	r20, 0x20	; 32
    3af4:	51 e4       	ldi	r21, 0x41	; 65
    3af6:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	bc 01       	movw	r22, r24
    3b00:	cd 01       	movw	r24, r26
    3b02:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	9a a3       	std	Y+34, r25	; 0x22
    3b0c:	89 a3       	std	Y+33, r24	; 0x21
    3b0e:	0f c0       	rjmp	.+30     	; 0x3b2e <lcd_animation+0x1300>
    3b10:	80 e9       	ldi	r24, 0x90	; 144
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	98 a3       	std	Y+32, r25	; 0x20
    3b16:	8f 8f       	std	Y+31, r24	; 0x1f
    3b18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b1a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <lcd_animation+0x12ee>
    3b20:	98 a3       	std	Y+32, r25	; 0x20
    3b22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b24:	89 a1       	ldd	r24, Y+33	; 0x21
    3b26:	9a a1       	ldd	r25, Y+34	; 0x22
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	9a a3       	std	Y+34, r25	; 0x22
    3b2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b30:	9a a1       	ldd	r25, Y+34	; 0x22
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	69 f7       	brne	.-38     	; 0x3b10 <lcd_animation+0x12e2>
    3b36:	14 c0       	rjmp	.+40     	; 0x3b60 <lcd_animation+0x1332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b38:	6b a1       	ldd	r22, Y+35	; 0x23
    3b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b40:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	9a a3       	std	Y+34, r25	; 0x22
    3b4a:	89 a3       	std	Y+33, r24	; 0x21
    3b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b50:	9e 8f       	std	Y+30, r25	; 0x1e
    3b52:	8d 8f       	std	Y+29, r24	; 0x1d
    3b54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <lcd_animation+0x132a>
    3b5c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b5e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(200);
    lcd_str(".");
    3b60:	8e e8       	ldi	r24, 0x8E	; 142
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	a8 ec       	ldi	r26, 0xC8	; 200
    3b6e:	b2 e4       	ldi	r27, 0x42	; 66
    3b70:	89 8f       	std	Y+25, r24	; 0x19
    3b72:	9a 8f       	std	Y+26, r25	; 0x1a
    3b74:	ab 8f       	std	Y+27, r26	; 0x1b
    3b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b78:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	4a e7       	ldi	r20, 0x7A	; 122
    3b86:	55 e4       	ldi	r21, 0x45	; 69
    3b88:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	8d 8b       	std	Y+21, r24	; 0x15
    3b92:	9e 8b       	std	Y+22, r25	; 0x16
    3b94:	af 8b       	std	Y+23, r26	; 0x17
    3b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b98:	6d 89       	ldd	r22, Y+21	; 0x15
    3b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e8       	ldi	r20, 0x80	; 128
    3ba6:	5f e3       	ldi	r21, 0x3F	; 63
    3ba8:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3bac:	88 23       	and	r24, r24
    3bae:	2c f4       	brge	.+10     	; 0x3bba <lcd_animation+0x138c>
		__ticks = 1;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	9c 8b       	std	Y+20, r25	; 0x14
    3bb6:	8b 8b       	std	Y+19, r24	; 0x13
    3bb8:	3f c0       	rjmp	.+126    	; 0x3c38 <lcd_animation+0x140a>
	else if (__tmp > 65535)
    3bba:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	3f ef       	ldi	r19, 0xFF	; 255
    3bc6:	4f e7       	ldi	r20, 0x7F	; 127
    3bc8:	57 e4       	ldi	r21, 0x47	; 71
    3bca:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    3bce:	18 16       	cp	r1, r24
    3bd0:	4c f5       	brge	.+82     	; 0x3c24 <lcd_animation+0x13f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	bc 01       	movw	r22, r24
    3bec:	cd 01       	movw	r24, r26
    3bee:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	9c 8b       	std	Y+20, r25	; 0x14
    3bf8:	8b 8b       	std	Y+19, r24	; 0x13
    3bfa:	0f c0       	rjmp	.+30     	; 0x3c1a <lcd_animation+0x13ec>
    3bfc:	80 e9       	ldi	r24, 0x90	; 144
    3bfe:	91 e0       	ldi	r25, 0x01	; 1
    3c00:	9a 8b       	std	Y+18, r25	; 0x12
    3c02:	89 8b       	std	Y+17, r24	; 0x11
    3c04:	89 89       	ldd	r24, Y+17	; 0x11
    3c06:	9a 89       	ldd	r25, Y+18	; 0x12
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <lcd_animation+0x13da>
    3c0c:	9a 8b       	std	Y+18, r25	; 0x12
    3c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c10:	8b 89       	ldd	r24, Y+19	; 0x13
    3c12:	9c 89       	ldd	r25, Y+20	; 0x14
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	9c 8b       	std	Y+20, r25	; 0x14
    3c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	69 f7       	brne	.-38     	; 0x3bfc <lcd_animation+0x13ce>
    3c22:	14 c0       	rjmp	.+40     	; 0x3c4c <lcd_animation+0x141e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c24:	6d 89       	ldd	r22, Y+21	; 0x15
    3c26:	7e 89       	ldd	r23, Y+22	; 0x16
    3c28:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	9c 8b       	std	Y+20, r25	; 0x14
    3c36:	8b 8b       	std	Y+19, r24	; 0x13
    3c38:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3c:	98 8b       	std	Y+16, r25	; 0x10
    3c3e:	8f 87       	std	Y+15, r24	; 0x0f
    3c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c42:	98 89       	ldd	r25, Y+16	; 0x10
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <lcd_animation+0x1416>
    3c48:	98 8b       	std	Y+16, r25	; 0x10
    3c4a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(100);

    lcd_clear();
    3c4c:	0e 94 0d 14 	call	0x281a	; 0x281a <lcd_clear>
    lcd_xy(0,0);
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	60 e0       	ldi	r22, 0x00	; 0
    3c54:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <lcd_xy>
    lcd_str("   PRESS KEYS   ");
    3c58:	81 ea       	ldi	r24, 0xA1	; 161
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
    3c5c:	0e 94 9f 10 	call	0x213e	; 0x213e <lcd_str>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	aa e7       	ldi	r26, 0x7A	; 122
    3c66:	b4 e4       	ldi	r27, 0x44	; 68
    3c68:	8b 87       	std	Y+11, r24	; 0x0b
    3c6a:	9c 87       	std	Y+12, r25	; 0x0c
    3c6c:	ad 87       	std	Y+13, r26	; 0x0d
    3c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	4a e7       	ldi	r20, 0x7A	; 122
    3c7e:	55 e4       	ldi	r21, 0x45	; 69
    3c80:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	8f 83       	std	Y+7, r24	; 0x07
    3c8a:	98 87       	std	Y+8, r25	; 0x08
    3c8c:	a9 87       	std	Y+9, r26	; 0x09
    3c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c90:	6f 81       	ldd	r22, Y+7	; 0x07
    3c92:	78 85       	ldd	r23, Y+8	; 0x08
    3c94:	89 85       	ldd	r24, Y+9	; 0x09
    3c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e8       	ldi	r20, 0x80	; 128
    3c9e:	5f e3       	ldi	r21, 0x3F	; 63
    3ca0:	0e 94 b9 22 	call	0x4572	; 0x4572 <__ltsf2>
    3ca4:	88 23       	and	r24, r24
    3ca6:	2c f4       	brge	.+10     	; 0x3cb2 <lcd_animation+0x1484>
		__ticks = 1;
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	9e 83       	std	Y+6, r25	; 0x06
    3cae:	8d 83       	std	Y+5, r24	; 0x05
    3cb0:	3f c0       	rjmp	.+126    	; 0x3d30 <lcd_animation+0x1502>
	else if (__tmp > 65535)
    3cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb4:	78 85       	ldd	r23, Y+8	; 0x08
    3cb6:	89 85       	ldd	r24, Y+9	; 0x09
    3cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	3f ef       	ldi	r19, 0xFF	; 255
    3cbe:	4f e7       	ldi	r20, 0x7F	; 127
    3cc0:	57 e4       	ldi	r21, 0x47	; 71
    3cc2:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__gtsf2>
    3cc6:	18 16       	cp	r1, r24
    3cc8:	4c f5       	brge	.+82     	; 0x3d1c <lcd_animation+0x14ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e2       	ldi	r20, 0x20	; 32
    3cd8:	51 e4       	ldi	r21, 0x41	; 65
    3cda:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsf3>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	bc 01       	movw	r22, r24
    3ce4:	cd 01       	movw	r24, r26
    3ce6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9e 83       	std	Y+6, r25	; 0x06
    3cf0:	8d 83       	std	Y+5, r24	; 0x05
    3cf2:	0f c0       	rjmp	.+30     	; 0x3d12 <lcd_animation+0x14e4>
    3cf4:	80 e9       	ldi	r24, 0x90	; 144
    3cf6:	91 e0       	ldi	r25, 0x01	; 1
    3cf8:	9c 83       	std	Y+4, r25	; 0x04
    3cfa:	8b 83       	std	Y+3, r24	; 0x03
    3cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <lcd_animation+0x14d2>
    3d04:	9c 83       	std	Y+4, r25	; 0x04
    3d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d08:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	9e 83       	std	Y+6, r25	; 0x06
    3d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	69 f7       	brne	.-38     	; 0x3cf4 <lcd_animation+0x14c6>
    3d1a:	14 c0       	rjmp	.+40     	; 0x3d44 <lcd_animation+0x1516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1e:	78 85       	ldd	r23, Y+8	; 0x08
    3d20:	89 85       	ldd	r24, Y+9	; 0x09
    3d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d24:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	9e 83       	std	Y+6, r25	; 0x06
    3d2e:	8d 83       	std	Y+5, r24	; 0x05
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	9e 81       	ldd	r25, Y+6	; 0x06
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 83       	std	Y+1, r24	; 0x01
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	f1 f7       	brne	.-4      	; 0x3d3c <lcd_animation+0x150e>
    3d40:	9a 83       	std	Y+2, r25	; 0x02
    3d42:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
}
    3d44:	c0 52       	subi	r28, 0x20	; 32
    3d46:	df 4f       	sbci	r29, 0xFF	; 255
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	1f 91       	pop	r17
    3d58:	0f 91       	pop	r16
    3d5a:	08 95       	ret

00003d5c <main>:
************************************************/

#include "GPIO.h"
#include "LCD.h"

int main(void){
    3d5c:	df 93       	push	r29
    3d5e:	cf 93       	push	r28
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    gpio_init();                   //Input Output initialization for all pins
    3d64:	0e 94 9d 00 	call	0x13a	; 0x13a <gpio_init>
    lcd_init();                    //LCD initialization
    3d68:	0e 94 45 07 	call	0xe8a	; 0xe8a <lcd_init>
    intrrupt_init();               //All interrupt  initialization
    3d6c:	0e 94 09 02 	call	0x412	; 0x412 <intrrupt_init>
    ADC_init();                    //ADC  initialization
    3d70:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
    lcd_animation();               //LCD initialization
    3d74:	0e 94 17 14 	call	0x282e	; 0x282e <lcd_animation>
    while(1){
        hornCallback();            //Function to call all horn logic
    3d78:	0e 94 5d 02 	call	0x4ba	; 0x4ba <hornCallback>
    3d7c:	fd cf       	rjmp	.-6      	; 0x3d78 <main+0x1c>

00003d7e <pwm>:
Files Info: Fast PWM mode function definitions
************************************************/
#include "PWM.h"

//fast PWM mode calling function
void pwm(unsigned int num){
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	00 d0       	rcall	.+0      	; 0x3d84 <pwm+0x6>
    3d84:	cd b7       	in	r28, 0x3d	; 61
    3d86:	de b7       	in	r29, 0x3e	; 62
    3d88:	9a 83       	std	Y+2, r25	; 0x02
    3d8a:	89 83       	std	Y+1, r24	; 0x01
    TCCR0A |=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
    3d8c:	a4 e4       	ldi	r26, 0x44	; 68
    3d8e:	b0 e0       	ldi	r27, 0x00	; 0
    3d90:	e4 e4       	ldi	r30, 0x44	; 68
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	80 81       	ld	r24, Z
    3d96:	83 68       	ori	r24, 0x83	; 131
    3d98:	8c 93       	st	X, r24
    OCR0A=num;
    3d9a:	e7 e4       	ldi	r30, 0x47	; 71
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	80 83       	st	Z, r24
    TCCR0B |=(1<<CS00);
    3da2:	a5 e4       	ldi	r26, 0x45	; 69
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	e5 e4       	ldi	r30, 0x45	; 69
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	80 81       	ld	r24, Z
    3dac:	81 60       	ori	r24, 0x01	; 1
    3dae:	8c 93       	st	X, r24
}
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	cf 91       	pop	r28
    3db6:	df 91       	pop	r29
    3db8:	08 95       	ret

00003dba <__fixunssfsi>:
    3dba:	ef 92       	push	r14
    3dbc:	ff 92       	push	r15
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	7b 01       	movw	r14, r22
    3dc4:	8c 01       	movw	r16, r24
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	5f e4       	ldi	r21, 0x4F	; 79
    3dce:	0e 94 89 22 	call	0x4512	; 0x4512 <__gesf2>
    3dd2:	88 23       	and	r24, r24
    3dd4:	8c f0       	brlt	.+34     	; 0x3df8 <__fixunssfsi+0x3e>
    3dd6:	c8 01       	movw	r24, r16
    3dd8:	b7 01       	movw	r22, r14
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e0       	ldi	r20, 0x00	; 0
    3de0:	5f e4       	ldi	r21, 0x4F	; 79
    3de2:	0e 94 55 20 	call	0x40aa	; 0x40aa <__subsf3>
    3de6:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <__fixsfsi>
    3dea:	9b 01       	movw	r18, r22
    3dec:	ac 01       	movw	r20, r24
    3dee:	20 50       	subi	r18, 0x00	; 0
    3df0:	30 40       	sbci	r19, 0x00	; 0
    3df2:	40 40       	sbci	r20, 0x00	; 0
    3df4:	50 48       	sbci	r21, 0x80	; 128
    3df6:	06 c0       	rjmp	.+12     	; 0x3e04 <__fixunssfsi+0x4a>
    3df8:	c8 01       	movw	r24, r16
    3dfa:	b7 01       	movw	r22, r14
    3dfc:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <__fixsfsi>
    3e00:	9b 01       	movw	r18, r22
    3e02:	ac 01       	movw	r20, r24
    3e04:	b9 01       	movw	r22, r18
    3e06:	ca 01       	movw	r24, r20
    3e08:	1f 91       	pop	r17
    3e0a:	0f 91       	pop	r16
    3e0c:	ff 90       	pop	r15
    3e0e:	ef 90       	pop	r14
    3e10:	08 95       	ret

00003e12 <_fpadd_parts>:
    3e12:	a0 e0       	ldi	r26, 0x00	; 0
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	ef e0       	ldi	r30, 0x0F	; 15
    3e18:	ff e1       	ldi	r31, 0x1F	; 31
    3e1a:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <__prologue_saves__>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	2b 01       	movw	r4, r22
    3e22:	fa 01       	movw	r30, r20
    3e24:	9c 91       	ld	r25, X
    3e26:	92 30       	cpi	r25, 0x02	; 2
    3e28:	08 f4       	brcc	.+2      	; 0x3e2c <_fpadd_parts+0x1a>
    3e2a:	39 c1       	rjmp	.+626    	; 0x409e <_fpadd_parts+0x28c>
    3e2c:	eb 01       	movw	r28, r22
    3e2e:	88 81       	ld	r24, Y
    3e30:	82 30       	cpi	r24, 0x02	; 2
    3e32:	08 f4       	brcc	.+2      	; 0x3e36 <_fpadd_parts+0x24>
    3e34:	33 c1       	rjmp	.+614    	; 0x409c <_fpadd_parts+0x28a>
    3e36:	94 30       	cpi	r25, 0x04	; 4
    3e38:	69 f4       	brne	.+26     	; 0x3e54 <_fpadd_parts+0x42>
    3e3a:	84 30       	cpi	r24, 0x04	; 4
    3e3c:	09 f0       	breq	.+2      	; 0x3e40 <_fpadd_parts+0x2e>
    3e3e:	2f c1       	rjmp	.+606    	; 0x409e <_fpadd_parts+0x28c>
    3e40:	11 96       	adiw	r26, 0x01	; 1
    3e42:	9c 91       	ld	r25, X
    3e44:	11 97       	sbiw	r26, 0x01	; 1
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	98 17       	cp	r25, r24
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <_fpadd_parts+0x3c>
    3e4c:	28 c1       	rjmp	.+592    	; 0x409e <_fpadd_parts+0x28c>
    3e4e:	a2 eb       	ldi	r26, 0xB2	; 178
    3e50:	b1 e0       	ldi	r27, 0x01	; 1
    3e52:	25 c1       	rjmp	.+586    	; 0x409e <_fpadd_parts+0x28c>
    3e54:	84 30       	cpi	r24, 0x04	; 4
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <_fpadd_parts+0x48>
    3e58:	21 c1       	rjmp	.+578    	; 0x409c <_fpadd_parts+0x28a>
    3e5a:	82 30       	cpi	r24, 0x02	; 2
    3e5c:	a9 f4       	brne	.+42     	; 0x3e88 <_fpadd_parts+0x76>
    3e5e:	92 30       	cpi	r25, 0x02	; 2
    3e60:	09 f0       	breq	.+2      	; 0x3e64 <_fpadd_parts+0x52>
    3e62:	1d c1       	rjmp	.+570    	; 0x409e <_fpadd_parts+0x28c>
    3e64:	9a 01       	movw	r18, r20
    3e66:	ad 01       	movw	r20, r26
    3e68:	88 e0       	ldi	r24, 0x08	; 8
    3e6a:	ea 01       	movw	r28, r20
    3e6c:	09 90       	ld	r0, Y+
    3e6e:	ae 01       	movw	r20, r28
    3e70:	e9 01       	movw	r28, r18
    3e72:	09 92       	st	Y+, r0
    3e74:	9e 01       	movw	r18, r28
    3e76:	81 50       	subi	r24, 0x01	; 1
    3e78:	c1 f7       	brne	.-16     	; 0x3e6a <_fpadd_parts+0x58>
    3e7a:	e2 01       	movw	r28, r4
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	11 96       	adiw	r26, 0x01	; 1
    3e80:	9c 91       	ld	r25, X
    3e82:	89 23       	and	r24, r25
    3e84:	81 83       	std	Z+1, r24	; 0x01
    3e86:	08 c1       	rjmp	.+528    	; 0x4098 <_fpadd_parts+0x286>
    3e88:	92 30       	cpi	r25, 0x02	; 2
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <_fpadd_parts+0x7c>
    3e8c:	07 c1       	rjmp	.+526    	; 0x409c <_fpadd_parts+0x28a>
    3e8e:	12 96       	adiw	r26, 0x02	; 2
    3e90:	2d 90       	ld	r2, X+
    3e92:	3c 90       	ld	r3, X
    3e94:	13 97       	sbiw	r26, 0x03	; 3
    3e96:	eb 01       	movw	r28, r22
    3e98:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e9c:	14 96       	adiw	r26, 0x04	; 4
    3e9e:	ad 90       	ld	r10, X+
    3ea0:	bd 90       	ld	r11, X+
    3ea2:	cd 90       	ld	r12, X+
    3ea4:	dc 90       	ld	r13, X
    3ea6:	17 97       	sbiw	r26, 0x07	; 7
    3ea8:	ec 80       	ldd	r14, Y+4	; 0x04
    3eaa:	fd 80       	ldd	r15, Y+5	; 0x05
    3eac:	0e 81       	ldd	r16, Y+6	; 0x06
    3eae:	1f 81       	ldd	r17, Y+7	; 0x07
    3eb0:	91 01       	movw	r18, r2
    3eb2:	28 1b       	sub	r18, r24
    3eb4:	39 0b       	sbc	r19, r25
    3eb6:	b9 01       	movw	r22, r18
    3eb8:	37 ff       	sbrs	r19, 7
    3eba:	04 c0       	rjmp	.+8      	; 0x3ec4 <_fpadd_parts+0xb2>
    3ebc:	66 27       	eor	r22, r22
    3ebe:	77 27       	eor	r23, r23
    3ec0:	62 1b       	sub	r22, r18
    3ec2:	73 0b       	sbc	r23, r19
    3ec4:	60 32       	cpi	r22, 0x20	; 32
    3ec6:	71 05       	cpc	r23, r1
    3ec8:	0c f0       	brlt	.+2      	; 0x3ecc <_fpadd_parts+0xba>
    3eca:	61 c0       	rjmp	.+194    	; 0x3f8e <_fpadd_parts+0x17c>
    3ecc:	12 16       	cp	r1, r18
    3ece:	13 06       	cpc	r1, r19
    3ed0:	6c f5       	brge	.+90     	; 0x3f2c <_fpadd_parts+0x11a>
    3ed2:	37 01       	movw	r6, r14
    3ed4:	48 01       	movw	r8, r16
    3ed6:	06 2e       	mov	r0, r22
    3ed8:	04 c0       	rjmp	.+8      	; 0x3ee2 <_fpadd_parts+0xd0>
    3eda:	96 94       	lsr	r9
    3edc:	87 94       	ror	r8
    3ede:	77 94       	ror	r7
    3ee0:	67 94       	ror	r6
    3ee2:	0a 94       	dec	r0
    3ee4:	d2 f7       	brpl	.-12     	; 0x3eda <_fpadd_parts+0xc8>
    3ee6:	21 e0       	ldi	r18, 0x01	; 1
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	40 e0       	ldi	r20, 0x00	; 0
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	04 c0       	rjmp	.+8      	; 0x3ef8 <_fpadd_parts+0xe6>
    3ef0:	22 0f       	add	r18, r18
    3ef2:	33 1f       	adc	r19, r19
    3ef4:	44 1f       	adc	r20, r20
    3ef6:	55 1f       	adc	r21, r21
    3ef8:	6a 95       	dec	r22
    3efa:	d2 f7       	brpl	.-12     	; 0x3ef0 <_fpadd_parts+0xde>
    3efc:	21 50       	subi	r18, 0x01	; 1
    3efe:	30 40       	sbci	r19, 0x00	; 0
    3f00:	40 40       	sbci	r20, 0x00	; 0
    3f02:	50 40       	sbci	r21, 0x00	; 0
    3f04:	2e 21       	and	r18, r14
    3f06:	3f 21       	and	r19, r15
    3f08:	40 23       	and	r20, r16
    3f0a:	51 23       	and	r21, r17
    3f0c:	21 15       	cp	r18, r1
    3f0e:	31 05       	cpc	r19, r1
    3f10:	41 05       	cpc	r20, r1
    3f12:	51 05       	cpc	r21, r1
    3f14:	21 f0       	breq	.+8      	; 0x3f1e <_fpadd_parts+0x10c>
    3f16:	21 e0       	ldi	r18, 0x01	; 1
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	50 e0       	ldi	r21, 0x00	; 0
    3f1e:	79 01       	movw	r14, r18
    3f20:	8a 01       	movw	r16, r20
    3f22:	e6 28       	or	r14, r6
    3f24:	f7 28       	or	r15, r7
    3f26:	08 29       	or	r16, r8
    3f28:	19 29       	or	r17, r9
    3f2a:	3c c0       	rjmp	.+120    	; 0x3fa4 <_fpadd_parts+0x192>
    3f2c:	23 2b       	or	r18, r19
    3f2e:	d1 f1       	breq	.+116    	; 0x3fa4 <_fpadd_parts+0x192>
    3f30:	26 0e       	add	r2, r22
    3f32:	37 1e       	adc	r3, r23
    3f34:	35 01       	movw	r6, r10
    3f36:	46 01       	movw	r8, r12
    3f38:	06 2e       	mov	r0, r22
    3f3a:	04 c0       	rjmp	.+8      	; 0x3f44 <_fpadd_parts+0x132>
    3f3c:	96 94       	lsr	r9
    3f3e:	87 94       	ror	r8
    3f40:	77 94       	ror	r7
    3f42:	67 94       	ror	r6
    3f44:	0a 94       	dec	r0
    3f46:	d2 f7       	brpl	.-12     	; 0x3f3c <_fpadd_parts+0x12a>
    3f48:	21 e0       	ldi	r18, 0x01	; 1
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	04 c0       	rjmp	.+8      	; 0x3f5a <_fpadd_parts+0x148>
    3f52:	22 0f       	add	r18, r18
    3f54:	33 1f       	adc	r19, r19
    3f56:	44 1f       	adc	r20, r20
    3f58:	55 1f       	adc	r21, r21
    3f5a:	6a 95       	dec	r22
    3f5c:	d2 f7       	brpl	.-12     	; 0x3f52 <_fpadd_parts+0x140>
    3f5e:	21 50       	subi	r18, 0x01	; 1
    3f60:	30 40       	sbci	r19, 0x00	; 0
    3f62:	40 40       	sbci	r20, 0x00	; 0
    3f64:	50 40       	sbci	r21, 0x00	; 0
    3f66:	2a 21       	and	r18, r10
    3f68:	3b 21       	and	r19, r11
    3f6a:	4c 21       	and	r20, r12
    3f6c:	5d 21       	and	r21, r13
    3f6e:	21 15       	cp	r18, r1
    3f70:	31 05       	cpc	r19, r1
    3f72:	41 05       	cpc	r20, r1
    3f74:	51 05       	cpc	r21, r1
    3f76:	21 f0       	breq	.+8      	; 0x3f80 <_fpadd_parts+0x16e>
    3f78:	21 e0       	ldi	r18, 0x01	; 1
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	50 e0       	ldi	r21, 0x00	; 0
    3f80:	59 01       	movw	r10, r18
    3f82:	6a 01       	movw	r12, r20
    3f84:	a6 28       	or	r10, r6
    3f86:	b7 28       	or	r11, r7
    3f88:	c8 28       	or	r12, r8
    3f8a:	d9 28       	or	r13, r9
    3f8c:	0b c0       	rjmp	.+22     	; 0x3fa4 <_fpadd_parts+0x192>
    3f8e:	82 15       	cp	r24, r2
    3f90:	93 05       	cpc	r25, r3
    3f92:	2c f0       	brlt	.+10     	; 0x3f9e <_fpadd_parts+0x18c>
    3f94:	1c 01       	movw	r2, r24
    3f96:	aa 24       	eor	r10, r10
    3f98:	bb 24       	eor	r11, r11
    3f9a:	65 01       	movw	r12, r10
    3f9c:	03 c0       	rjmp	.+6      	; 0x3fa4 <_fpadd_parts+0x192>
    3f9e:	ee 24       	eor	r14, r14
    3fa0:	ff 24       	eor	r15, r15
    3fa2:	87 01       	movw	r16, r14
    3fa4:	11 96       	adiw	r26, 0x01	; 1
    3fa6:	9c 91       	ld	r25, X
    3fa8:	d2 01       	movw	r26, r4
    3faa:	11 96       	adiw	r26, 0x01	; 1
    3fac:	8c 91       	ld	r24, X
    3fae:	98 17       	cp	r25, r24
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <_fpadd_parts+0x1a2>
    3fb2:	45 c0       	rjmp	.+138    	; 0x403e <_fpadd_parts+0x22c>
    3fb4:	99 23       	and	r25, r25
    3fb6:	39 f0       	breq	.+14     	; 0x3fc6 <_fpadd_parts+0x1b4>
    3fb8:	a8 01       	movw	r20, r16
    3fba:	97 01       	movw	r18, r14
    3fbc:	2a 19       	sub	r18, r10
    3fbe:	3b 09       	sbc	r19, r11
    3fc0:	4c 09       	sbc	r20, r12
    3fc2:	5d 09       	sbc	r21, r13
    3fc4:	06 c0       	rjmp	.+12     	; 0x3fd2 <_fpadd_parts+0x1c0>
    3fc6:	a6 01       	movw	r20, r12
    3fc8:	95 01       	movw	r18, r10
    3fca:	2e 19       	sub	r18, r14
    3fcc:	3f 09       	sbc	r19, r15
    3fce:	40 0b       	sbc	r20, r16
    3fd0:	51 0b       	sbc	r21, r17
    3fd2:	57 fd       	sbrc	r21, 7
    3fd4:	08 c0       	rjmp	.+16     	; 0x3fe6 <_fpadd_parts+0x1d4>
    3fd6:	11 82       	std	Z+1, r1	; 0x01
    3fd8:	33 82       	std	Z+3, r3	; 0x03
    3fda:	22 82       	std	Z+2, r2	; 0x02
    3fdc:	24 83       	std	Z+4, r18	; 0x04
    3fde:	35 83       	std	Z+5, r19	; 0x05
    3fe0:	46 83       	std	Z+6, r20	; 0x06
    3fe2:	57 83       	std	Z+7, r21	; 0x07
    3fe4:	1d c0       	rjmp	.+58     	; 0x4020 <_fpadd_parts+0x20e>
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	81 83       	std	Z+1, r24	; 0x01
    3fea:	33 82       	std	Z+3, r3	; 0x03
    3fec:	22 82       	std	Z+2, r2	; 0x02
    3fee:	88 27       	eor	r24, r24
    3ff0:	99 27       	eor	r25, r25
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	82 1b       	sub	r24, r18
    3ff6:	93 0b       	sbc	r25, r19
    3ff8:	a4 0b       	sbc	r26, r20
    3ffa:	b5 0b       	sbc	r27, r21
    3ffc:	84 83       	std	Z+4, r24	; 0x04
    3ffe:	95 83       	std	Z+5, r25	; 0x05
    4000:	a6 83       	std	Z+6, r26	; 0x06
    4002:	b7 83       	std	Z+7, r27	; 0x07
    4004:	0d c0       	rjmp	.+26     	; 0x4020 <_fpadd_parts+0x20e>
    4006:	22 0f       	add	r18, r18
    4008:	33 1f       	adc	r19, r19
    400a:	44 1f       	adc	r20, r20
    400c:	55 1f       	adc	r21, r21
    400e:	24 83       	std	Z+4, r18	; 0x04
    4010:	35 83       	std	Z+5, r19	; 0x05
    4012:	46 83       	std	Z+6, r20	; 0x06
    4014:	57 83       	std	Z+7, r21	; 0x07
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	93 83       	std	Z+3, r25	; 0x03
    401e:	82 83       	std	Z+2, r24	; 0x02
    4020:	24 81       	ldd	r18, Z+4	; 0x04
    4022:	35 81       	ldd	r19, Z+5	; 0x05
    4024:	46 81       	ldd	r20, Z+6	; 0x06
    4026:	57 81       	ldd	r21, Z+7	; 0x07
    4028:	da 01       	movw	r26, r20
    402a:	c9 01       	movw	r24, r18
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	a1 09       	sbc	r26, r1
    4030:	b1 09       	sbc	r27, r1
    4032:	8f 5f       	subi	r24, 0xFF	; 255
    4034:	9f 4f       	sbci	r25, 0xFF	; 255
    4036:	af 4f       	sbci	r26, 0xFF	; 255
    4038:	bf 43       	sbci	r27, 0x3F	; 63
    403a:	28 f3       	brcs	.-54     	; 0x4006 <_fpadd_parts+0x1f4>
    403c:	0b c0       	rjmp	.+22     	; 0x4054 <_fpadd_parts+0x242>
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	33 82       	std	Z+3, r3	; 0x03
    4042:	22 82       	std	Z+2, r2	; 0x02
    4044:	ea 0c       	add	r14, r10
    4046:	fb 1c       	adc	r15, r11
    4048:	0c 1d       	adc	r16, r12
    404a:	1d 1d       	adc	r17, r13
    404c:	e4 82       	std	Z+4, r14	; 0x04
    404e:	f5 82       	std	Z+5, r15	; 0x05
    4050:	06 83       	std	Z+6, r16	; 0x06
    4052:	17 83       	std	Z+7, r17	; 0x07
    4054:	83 e0       	ldi	r24, 0x03	; 3
    4056:	80 83       	st	Z, r24
    4058:	24 81       	ldd	r18, Z+4	; 0x04
    405a:	35 81       	ldd	r19, Z+5	; 0x05
    405c:	46 81       	ldd	r20, Z+6	; 0x06
    405e:	57 81       	ldd	r21, Z+7	; 0x07
    4060:	57 ff       	sbrs	r21, 7
    4062:	1a c0       	rjmp	.+52     	; 0x4098 <_fpadd_parts+0x286>
    4064:	c9 01       	movw	r24, r18
    4066:	aa 27       	eor	r26, r26
    4068:	97 fd       	sbrc	r25, 7
    406a:	a0 95       	com	r26
    406c:	ba 2f       	mov	r27, r26
    406e:	81 70       	andi	r24, 0x01	; 1
    4070:	90 70       	andi	r25, 0x00	; 0
    4072:	a0 70       	andi	r26, 0x00	; 0
    4074:	b0 70       	andi	r27, 0x00	; 0
    4076:	56 95       	lsr	r21
    4078:	47 95       	ror	r20
    407a:	37 95       	ror	r19
    407c:	27 95       	ror	r18
    407e:	82 2b       	or	r24, r18
    4080:	93 2b       	or	r25, r19
    4082:	a4 2b       	or	r26, r20
    4084:	b5 2b       	or	r27, r21
    4086:	84 83       	std	Z+4, r24	; 0x04
    4088:	95 83       	std	Z+5, r25	; 0x05
    408a:	a6 83       	std	Z+6, r26	; 0x06
    408c:	b7 83       	std	Z+7, r27	; 0x07
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	01 96       	adiw	r24, 0x01	; 1
    4094:	93 83       	std	Z+3, r25	; 0x03
    4096:	82 83       	std	Z+2, r24	; 0x02
    4098:	df 01       	movw	r26, r30
    409a:	01 c0       	rjmp	.+2      	; 0x409e <_fpadd_parts+0x28c>
    409c:	d2 01       	movw	r26, r4
    409e:	cd 01       	movw	r24, r26
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	e2 e1       	ldi	r30, 0x12	; 18
    40a6:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <__epilogue_restores__>

000040aa <__subsf3>:
    40aa:	a0 e2       	ldi	r26, 0x20	; 32
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	eb e5       	ldi	r30, 0x5B	; 91
    40b0:	f0 e2       	ldi	r31, 0x20	; 32
    40b2:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__prologue_saves__+0x18>
    40b6:	69 83       	std	Y+1, r22	; 0x01
    40b8:	7a 83       	std	Y+2, r23	; 0x02
    40ba:	8b 83       	std	Y+3, r24	; 0x03
    40bc:	9c 83       	std	Y+4, r25	; 0x04
    40be:	2d 83       	std	Y+5, r18	; 0x05
    40c0:	3e 83       	std	Y+6, r19	; 0x06
    40c2:	4f 83       	std	Y+7, r20	; 0x07
    40c4:	58 87       	std	Y+8, r21	; 0x08
    40c6:	e9 e0       	ldi	r30, 0x09	; 9
    40c8:	ee 2e       	mov	r14, r30
    40ca:	f1 2c       	mov	r15, r1
    40cc:	ec 0e       	add	r14, r28
    40ce:	fd 1e       	adc	r15, r29
    40d0:	ce 01       	movw	r24, r28
    40d2:	01 96       	adiw	r24, 0x01	; 1
    40d4:	b7 01       	movw	r22, r14
    40d6:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    40da:	8e 01       	movw	r16, r28
    40dc:	0f 5e       	subi	r16, 0xEF	; 239
    40de:	1f 4f       	sbci	r17, 0xFF	; 255
    40e0:	ce 01       	movw	r24, r28
    40e2:	05 96       	adiw	r24, 0x05	; 5
    40e4:	b8 01       	movw	r22, r16
    40e6:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    40ea:	8a 89       	ldd	r24, Y+18	; 0x12
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	89 27       	eor	r24, r25
    40f0:	8a 8b       	std	Y+18, r24	; 0x12
    40f2:	c7 01       	movw	r24, r14
    40f4:	b8 01       	movw	r22, r16
    40f6:	ae 01       	movw	r20, r28
    40f8:	47 5e       	subi	r20, 0xE7	; 231
    40fa:	5f 4f       	sbci	r21, 0xFF	; 255
    40fc:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <_fpadd_parts>
    4100:	0e 94 3d 23 	call	0x467a	; 0x467a <__pack_f>
    4104:	a0 96       	adiw	r28, 0x20	; 32
    4106:	e6 e0       	ldi	r30, 0x06	; 6
    4108:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__epilogue_restores__+0x18>

0000410c <__addsf3>:
    410c:	a0 e2       	ldi	r26, 0x20	; 32
    410e:	b0 e0       	ldi	r27, 0x00	; 0
    4110:	ec e8       	ldi	r30, 0x8C	; 140
    4112:	f0 e2       	ldi	r31, 0x20	; 32
    4114:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__prologue_saves__+0x18>
    4118:	69 83       	std	Y+1, r22	; 0x01
    411a:	7a 83       	std	Y+2, r23	; 0x02
    411c:	8b 83       	std	Y+3, r24	; 0x03
    411e:	9c 83       	std	Y+4, r25	; 0x04
    4120:	2d 83       	std	Y+5, r18	; 0x05
    4122:	3e 83       	std	Y+6, r19	; 0x06
    4124:	4f 83       	std	Y+7, r20	; 0x07
    4126:	58 87       	std	Y+8, r21	; 0x08
    4128:	f9 e0       	ldi	r31, 0x09	; 9
    412a:	ef 2e       	mov	r14, r31
    412c:	f1 2c       	mov	r15, r1
    412e:	ec 0e       	add	r14, r28
    4130:	fd 1e       	adc	r15, r29
    4132:	ce 01       	movw	r24, r28
    4134:	01 96       	adiw	r24, 0x01	; 1
    4136:	b7 01       	movw	r22, r14
    4138:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    413c:	8e 01       	movw	r16, r28
    413e:	0f 5e       	subi	r16, 0xEF	; 239
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	ce 01       	movw	r24, r28
    4144:	05 96       	adiw	r24, 0x05	; 5
    4146:	b8 01       	movw	r22, r16
    4148:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    414c:	c7 01       	movw	r24, r14
    414e:	b8 01       	movw	r22, r16
    4150:	ae 01       	movw	r20, r28
    4152:	47 5e       	subi	r20, 0xE7	; 231
    4154:	5f 4f       	sbci	r21, 0xFF	; 255
    4156:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <_fpadd_parts>
    415a:	0e 94 3d 23 	call	0x467a	; 0x467a <__pack_f>
    415e:	a0 96       	adiw	r28, 0x20	; 32
    4160:	e6 e0       	ldi	r30, 0x06	; 6
    4162:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__epilogue_restores__+0x18>

00004166 <__mulsf3>:
    4166:	a0 e2       	ldi	r26, 0x20	; 32
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e9 eb       	ldi	r30, 0xB9	; 185
    416c:	f0 e2       	ldi	r31, 0x20	; 32
    416e:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <__prologue_saves__>
    4172:	69 83       	std	Y+1, r22	; 0x01
    4174:	7a 83       	std	Y+2, r23	; 0x02
    4176:	8b 83       	std	Y+3, r24	; 0x03
    4178:	9c 83       	std	Y+4, r25	; 0x04
    417a:	2d 83       	std	Y+5, r18	; 0x05
    417c:	3e 83       	std	Y+6, r19	; 0x06
    417e:	4f 83       	std	Y+7, r20	; 0x07
    4180:	58 87       	std	Y+8, r21	; 0x08
    4182:	ce 01       	movw	r24, r28
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	be 01       	movw	r22, r28
    4188:	67 5f       	subi	r22, 0xF7	; 247
    418a:	7f 4f       	sbci	r23, 0xFF	; 255
    418c:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    4190:	ce 01       	movw	r24, r28
    4192:	05 96       	adiw	r24, 0x05	; 5
    4194:	be 01       	movw	r22, r28
    4196:	6f 5e       	subi	r22, 0xEF	; 239
    4198:	7f 4f       	sbci	r23, 0xFF	; 255
    419a:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    419e:	99 85       	ldd	r25, Y+9	; 0x09
    41a0:	92 30       	cpi	r25, 0x02	; 2
    41a2:	88 f0       	brcs	.+34     	; 0x41c6 <__mulsf3+0x60>
    41a4:	89 89       	ldd	r24, Y+17	; 0x11
    41a6:	82 30       	cpi	r24, 0x02	; 2
    41a8:	c8 f0       	brcs	.+50     	; 0x41dc <__mulsf3+0x76>
    41aa:	94 30       	cpi	r25, 0x04	; 4
    41ac:	19 f4       	brne	.+6      	; 0x41b4 <__mulsf3+0x4e>
    41ae:	82 30       	cpi	r24, 0x02	; 2
    41b0:	51 f4       	brne	.+20     	; 0x41c6 <__mulsf3+0x60>
    41b2:	04 c0       	rjmp	.+8      	; 0x41bc <__mulsf3+0x56>
    41b4:	84 30       	cpi	r24, 0x04	; 4
    41b6:	29 f4       	brne	.+10     	; 0x41c2 <__mulsf3+0x5c>
    41b8:	92 30       	cpi	r25, 0x02	; 2
    41ba:	81 f4       	brne	.+32     	; 0x41dc <__mulsf3+0x76>
    41bc:	82 eb       	ldi	r24, 0xB2	; 178
    41be:	91 e0       	ldi	r25, 0x01	; 1
    41c0:	c6 c0       	rjmp	.+396    	; 0x434e <__mulsf3+0x1e8>
    41c2:	92 30       	cpi	r25, 0x02	; 2
    41c4:	49 f4       	brne	.+18     	; 0x41d8 <__mulsf3+0x72>
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ca:	8a 89       	ldd	r24, Y+18	; 0x12
    41cc:	98 13       	cpse	r25, r24
    41ce:	21 e0       	ldi	r18, 0x01	; 1
    41d0:	2a 87       	std	Y+10, r18	; 0x0a
    41d2:	ce 01       	movw	r24, r28
    41d4:	09 96       	adiw	r24, 0x09	; 9
    41d6:	bb c0       	rjmp	.+374    	; 0x434e <__mulsf3+0x1e8>
    41d8:	82 30       	cpi	r24, 0x02	; 2
    41da:	49 f4       	brne	.+18     	; 0x41ee <__mulsf3+0x88>
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e0:	8a 89       	ldd	r24, Y+18	; 0x12
    41e2:	98 13       	cpse	r25, r24
    41e4:	21 e0       	ldi	r18, 0x01	; 1
    41e6:	2a 8b       	std	Y+18, r18	; 0x12
    41e8:	ce 01       	movw	r24, r28
    41ea:	41 96       	adiw	r24, 0x11	; 17
    41ec:	b0 c0       	rjmp	.+352    	; 0x434e <__mulsf3+0x1e8>
    41ee:	2d 84       	ldd	r2, Y+13	; 0x0d
    41f0:	3e 84       	ldd	r3, Y+14	; 0x0e
    41f2:	4f 84       	ldd	r4, Y+15	; 0x0f
    41f4:	58 88       	ldd	r5, Y+16	; 0x10
    41f6:	6d 88       	ldd	r6, Y+21	; 0x15
    41f8:	7e 88       	ldd	r7, Y+22	; 0x16
    41fa:	8f 88       	ldd	r8, Y+23	; 0x17
    41fc:	98 8c       	ldd	r9, Y+24	; 0x18
    41fe:	ee 24       	eor	r14, r14
    4200:	ff 24       	eor	r15, r15
    4202:	87 01       	movw	r16, r14
    4204:	aa 24       	eor	r10, r10
    4206:	bb 24       	eor	r11, r11
    4208:	65 01       	movw	r12, r10
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	70 e0       	ldi	r23, 0x00	; 0
    4212:	e0 e0       	ldi	r30, 0x00	; 0
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	c1 01       	movw	r24, r2
    4218:	81 70       	andi	r24, 0x01	; 1
    421a:	90 70       	andi	r25, 0x00	; 0
    421c:	89 2b       	or	r24, r25
    421e:	e9 f0       	breq	.+58     	; 0x425a <__mulsf3+0xf4>
    4220:	e6 0c       	add	r14, r6
    4222:	f7 1c       	adc	r15, r7
    4224:	08 1d       	adc	r16, r8
    4226:	19 1d       	adc	r17, r9
    4228:	9a 01       	movw	r18, r20
    422a:	ab 01       	movw	r20, r22
    422c:	2a 0d       	add	r18, r10
    422e:	3b 1d       	adc	r19, r11
    4230:	4c 1d       	adc	r20, r12
    4232:	5d 1d       	adc	r21, r13
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	a0 e0       	ldi	r26, 0x00	; 0
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	e6 14       	cp	r14, r6
    423e:	f7 04       	cpc	r15, r7
    4240:	08 05       	cpc	r16, r8
    4242:	19 05       	cpc	r17, r9
    4244:	20 f4       	brcc	.+8      	; 0x424e <__mulsf3+0xe8>
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	a0 e0       	ldi	r26, 0x00	; 0
    424c:	b0 e0       	ldi	r27, 0x00	; 0
    424e:	ba 01       	movw	r22, r20
    4250:	a9 01       	movw	r20, r18
    4252:	48 0f       	add	r20, r24
    4254:	59 1f       	adc	r21, r25
    4256:	6a 1f       	adc	r22, r26
    4258:	7b 1f       	adc	r23, r27
    425a:	aa 0c       	add	r10, r10
    425c:	bb 1c       	adc	r11, r11
    425e:	cc 1c       	adc	r12, r12
    4260:	dd 1c       	adc	r13, r13
    4262:	97 fe       	sbrs	r9, 7
    4264:	08 c0       	rjmp	.+16     	; 0x4276 <__mulsf3+0x110>
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	a0 e0       	ldi	r26, 0x00	; 0
    426c:	b0 e0       	ldi	r27, 0x00	; 0
    426e:	a8 2a       	or	r10, r24
    4270:	b9 2a       	or	r11, r25
    4272:	ca 2a       	or	r12, r26
    4274:	db 2a       	or	r13, r27
    4276:	31 96       	adiw	r30, 0x01	; 1
    4278:	e0 32       	cpi	r30, 0x20	; 32
    427a:	f1 05       	cpc	r31, r1
    427c:	49 f0       	breq	.+18     	; 0x4290 <__mulsf3+0x12a>
    427e:	66 0c       	add	r6, r6
    4280:	77 1c       	adc	r7, r7
    4282:	88 1c       	adc	r8, r8
    4284:	99 1c       	adc	r9, r9
    4286:	56 94       	lsr	r5
    4288:	47 94       	ror	r4
    428a:	37 94       	ror	r3
    428c:	27 94       	ror	r2
    428e:	c3 cf       	rjmp	.-122    	; 0x4216 <__mulsf3+0xb0>
    4290:	fa 85       	ldd	r31, Y+10	; 0x0a
    4292:	ea 89       	ldd	r30, Y+18	; 0x12
    4294:	2b 89       	ldd	r18, Y+19	; 0x13
    4296:	3c 89       	ldd	r19, Y+20	; 0x14
    4298:	8b 85       	ldd	r24, Y+11	; 0x0b
    429a:	9c 85       	ldd	r25, Y+12	; 0x0c
    429c:	28 0f       	add	r18, r24
    429e:	39 1f       	adc	r19, r25
    42a0:	2e 5f       	subi	r18, 0xFE	; 254
    42a2:	3f 4f       	sbci	r19, 0xFF	; 255
    42a4:	17 c0       	rjmp	.+46     	; 0x42d4 <__mulsf3+0x16e>
    42a6:	ca 01       	movw	r24, r20
    42a8:	81 70       	andi	r24, 0x01	; 1
    42aa:	90 70       	andi	r25, 0x00	; 0
    42ac:	89 2b       	or	r24, r25
    42ae:	61 f0       	breq	.+24     	; 0x42c8 <__mulsf3+0x162>
    42b0:	16 95       	lsr	r17
    42b2:	07 95       	ror	r16
    42b4:	f7 94       	ror	r15
    42b6:	e7 94       	ror	r14
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	a0 e0       	ldi	r26, 0x00	; 0
    42be:	b0 e8       	ldi	r27, 0x80	; 128
    42c0:	e8 2a       	or	r14, r24
    42c2:	f9 2a       	or	r15, r25
    42c4:	0a 2b       	or	r16, r26
    42c6:	1b 2b       	or	r17, r27
    42c8:	76 95       	lsr	r23
    42ca:	67 95       	ror	r22
    42cc:	57 95       	ror	r21
    42ce:	47 95       	ror	r20
    42d0:	2f 5f       	subi	r18, 0xFF	; 255
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	77 fd       	sbrc	r23, 7
    42d6:	e7 cf       	rjmp	.-50     	; 0x42a6 <__mulsf3+0x140>
    42d8:	0c c0       	rjmp	.+24     	; 0x42f2 <__mulsf3+0x18c>
    42da:	44 0f       	add	r20, r20
    42dc:	55 1f       	adc	r21, r21
    42de:	66 1f       	adc	r22, r22
    42e0:	77 1f       	adc	r23, r23
    42e2:	17 fd       	sbrc	r17, 7
    42e4:	41 60       	ori	r20, 0x01	; 1
    42e6:	ee 0c       	add	r14, r14
    42e8:	ff 1c       	adc	r15, r15
    42ea:	00 1f       	adc	r16, r16
    42ec:	11 1f       	adc	r17, r17
    42ee:	21 50       	subi	r18, 0x01	; 1
    42f0:	30 40       	sbci	r19, 0x00	; 0
    42f2:	40 30       	cpi	r20, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	59 07       	cpc	r21, r25
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	69 07       	cpc	r22, r25
    42fc:	90 e4       	ldi	r25, 0x40	; 64
    42fe:	79 07       	cpc	r23, r25
    4300:	60 f3       	brcs	.-40     	; 0x42da <__mulsf3+0x174>
    4302:	2b 8f       	std	Y+27, r18	; 0x1b
    4304:	3c 8f       	std	Y+28, r19	; 0x1c
    4306:	db 01       	movw	r26, r22
    4308:	ca 01       	movw	r24, r20
    430a:	8f 77       	andi	r24, 0x7F	; 127
    430c:	90 70       	andi	r25, 0x00	; 0
    430e:	a0 70       	andi	r26, 0x00	; 0
    4310:	b0 70       	andi	r27, 0x00	; 0
    4312:	80 34       	cpi	r24, 0x40	; 64
    4314:	91 05       	cpc	r25, r1
    4316:	a1 05       	cpc	r26, r1
    4318:	b1 05       	cpc	r27, r1
    431a:	61 f4       	brne	.+24     	; 0x4334 <__mulsf3+0x1ce>
    431c:	47 fd       	sbrc	r20, 7
    431e:	0a c0       	rjmp	.+20     	; 0x4334 <__mulsf3+0x1ce>
    4320:	e1 14       	cp	r14, r1
    4322:	f1 04       	cpc	r15, r1
    4324:	01 05       	cpc	r16, r1
    4326:	11 05       	cpc	r17, r1
    4328:	29 f0       	breq	.+10     	; 0x4334 <__mulsf3+0x1ce>
    432a:	40 5c       	subi	r20, 0xC0	; 192
    432c:	5f 4f       	sbci	r21, 0xFF	; 255
    432e:	6f 4f       	sbci	r22, 0xFF	; 255
    4330:	7f 4f       	sbci	r23, 0xFF	; 255
    4332:	40 78       	andi	r20, 0x80	; 128
    4334:	1a 8e       	std	Y+26, r1	; 0x1a
    4336:	fe 17       	cp	r31, r30
    4338:	11 f0       	breq	.+4      	; 0x433e <__mulsf3+0x1d8>
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	8a 8f       	std	Y+26, r24	; 0x1a
    433e:	4d 8f       	std	Y+29, r20	; 0x1d
    4340:	5e 8f       	std	Y+30, r21	; 0x1e
    4342:	6f 8f       	std	Y+31, r22	; 0x1f
    4344:	78 a3       	std	Y+32, r23	; 0x20
    4346:	83 e0       	ldi	r24, 0x03	; 3
    4348:	89 8f       	std	Y+25, r24	; 0x19
    434a:	ce 01       	movw	r24, r28
    434c:	49 96       	adiw	r24, 0x19	; 25
    434e:	0e 94 3d 23 	call	0x467a	; 0x467a <__pack_f>
    4352:	a0 96       	adiw	r28, 0x20	; 32
    4354:	e2 e1       	ldi	r30, 0x12	; 18
    4356:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <__epilogue_restores__>

0000435a <__divsf3>:
    435a:	a8 e1       	ldi	r26, 0x18	; 24
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	e3 eb       	ldi	r30, 0xB3	; 179
    4360:	f1 e2       	ldi	r31, 0x21	; 33
    4362:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__prologue_saves__+0x10>
    4366:	69 83       	std	Y+1, r22	; 0x01
    4368:	7a 83       	std	Y+2, r23	; 0x02
    436a:	8b 83       	std	Y+3, r24	; 0x03
    436c:	9c 83       	std	Y+4, r25	; 0x04
    436e:	2d 83       	std	Y+5, r18	; 0x05
    4370:	3e 83       	std	Y+6, r19	; 0x06
    4372:	4f 83       	std	Y+7, r20	; 0x07
    4374:	58 87       	std	Y+8, r21	; 0x08
    4376:	b9 e0       	ldi	r27, 0x09	; 9
    4378:	eb 2e       	mov	r14, r27
    437a:	f1 2c       	mov	r15, r1
    437c:	ec 0e       	add	r14, r28
    437e:	fd 1e       	adc	r15, r29
    4380:	ce 01       	movw	r24, r28
    4382:	01 96       	adiw	r24, 0x01	; 1
    4384:	b7 01       	movw	r22, r14
    4386:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    438a:	8e 01       	movw	r16, r28
    438c:	0f 5e       	subi	r16, 0xEF	; 239
    438e:	1f 4f       	sbci	r17, 0xFF	; 255
    4390:	ce 01       	movw	r24, r28
    4392:	05 96       	adiw	r24, 0x05	; 5
    4394:	b8 01       	movw	r22, r16
    4396:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    439a:	29 85       	ldd	r18, Y+9	; 0x09
    439c:	22 30       	cpi	r18, 0x02	; 2
    439e:	08 f4       	brcc	.+2      	; 0x43a2 <__divsf3+0x48>
    43a0:	7e c0       	rjmp	.+252    	; 0x449e <__divsf3+0x144>
    43a2:	39 89       	ldd	r19, Y+17	; 0x11
    43a4:	32 30       	cpi	r19, 0x02	; 2
    43a6:	10 f4       	brcc	.+4      	; 0x43ac <__divsf3+0x52>
    43a8:	b8 01       	movw	r22, r16
    43aa:	7c c0       	rjmp	.+248    	; 0x44a4 <__divsf3+0x14a>
    43ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    43ae:	9a 89       	ldd	r25, Y+18	; 0x12
    43b0:	89 27       	eor	r24, r25
    43b2:	8a 87       	std	Y+10, r24	; 0x0a
    43b4:	24 30       	cpi	r18, 0x04	; 4
    43b6:	11 f0       	breq	.+4      	; 0x43bc <__divsf3+0x62>
    43b8:	22 30       	cpi	r18, 0x02	; 2
    43ba:	31 f4       	brne	.+12     	; 0x43c8 <__divsf3+0x6e>
    43bc:	23 17       	cp	r18, r19
    43be:	09 f0       	breq	.+2      	; 0x43c2 <__divsf3+0x68>
    43c0:	6e c0       	rjmp	.+220    	; 0x449e <__divsf3+0x144>
    43c2:	62 eb       	ldi	r22, 0xB2	; 178
    43c4:	71 e0       	ldi	r23, 0x01	; 1
    43c6:	6e c0       	rjmp	.+220    	; 0x44a4 <__divsf3+0x14a>
    43c8:	34 30       	cpi	r19, 0x04	; 4
    43ca:	39 f4       	brne	.+14     	; 0x43da <__divsf3+0x80>
    43cc:	1d 86       	std	Y+13, r1	; 0x0d
    43ce:	1e 86       	std	Y+14, r1	; 0x0e
    43d0:	1f 86       	std	Y+15, r1	; 0x0f
    43d2:	18 8a       	std	Y+16, r1	; 0x10
    43d4:	1c 86       	std	Y+12, r1	; 0x0c
    43d6:	1b 86       	std	Y+11, r1	; 0x0b
    43d8:	04 c0       	rjmp	.+8      	; 0x43e2 <__divsf3+0x88>
    43da:	32 30       	cpi	r19, 0x02	; 2
    43dc:	21 f4       	brne	.+8      	; 0x43e6 <__divsf3+0x8c>
    43de:	84 e0       	ldi	r24, 0x04	; 4
    43e0:	89 87       	std	Y+9, r24	; 0x09
    43e2:	b7 01       	movw	r22, r14
    43e4:	5f c0       	rjmp	.+190    	; 0x44a4 <__divsf3+0x14a>
    43e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    43e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    43ea:	8b 89       	ldd	r24, Y+19	; 0x13
    43ec:	9c 89       	ldd	r25, Y+20	; 0x14
    43ee:	28 1b       	sub	r18, r24
    43f0:	39 0b       	sbc	r19, r25
    43f2:	3c 87       	std	Y+12, r19	; 0x0c
    43f4:	2b 87       	std	Y+11, r18	; 0x0b
    43f6:	ed 84       	ldd	r14, Y+13	; 0x0d
    43f8:	fe 84       	ldd	r15, Y+14	; 0x0e
    43fa:	0f 85       	ldd	r16, Y+15	; 0x0f
    43fc:	18 89       	ldd	r17, Y+16	; 0x10
    43fe:	ad 88       	ldd	r10, Y+21	; 0x15
    4400:	be 88       	ldd	r11, Y+22	; 0x16
    4402:	cf 88       	ldd	r12, Y+23	; 0x17
    4404:	d8 8c       	ldd	r13, Y+24	; 0x18
    4406:	ea 14       	cp	r14, r10
    4408:	fb 04       	cpc	r15, r11
    440a:	0c 05       	cpc	r16, r12
    440c:	1d 05       	cpc	r17, r13
    440e:	40 f4       	brcc	.+16     	; 0x4420 <__divsf3+0xc6>
    4410:	ee 0c       	add	r14, r14
    4412:	ff 1c       	adc	r15, r15
    4414:	00 1f       	adc	r16, r16
    4416:	11 1f       	adc	r17, r17
    4418:	21 50       	subi	r18, 0x01	; 1
    441a:	30 40       	sbci	r19, 0x00	; 0
    441c:	3c 87       	std	Y+12, r19	; 0x0c
    441e:	2b 87       	std	Y+11, r18	; 0x0b
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e0       	ldi	r20, 0x00	; 0
    4426:	50 e0       	ldi	r21, 0x00	; 0
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	a0 e0       	ldi	r26, 0x00	; 0
    442e:	b0 e4       	ldi	r27, 0x40	; 64
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	ea 14       	cp	r14, r10
    4436:	fb 04       	cpc	r15, r11
    4438:	0c 05       	cpc	r16, r12
    443a:	1d 05       	cpc	r17, r13
    443c:	40 f0       	brcs	.+16     	; 0x444e <__divsf3+0xf4>
    443e:	28 2b       	or	r18, r24
    4440:	39 2b       	or	r19, r25
    4442:	4a 2b       	or	r20, r26
    4444:	5b 2b       	or	r21, r27
    4446:	ea 18       	sub	r14, r10
    4448:	fb 08       	sbc	r15, r11
    444a:	0c 09       	sbc	r16, r12
    444c:	1d 09       	sbc	r17, r13
    444e:	b6 95       	lsr	r27
    4450:	a7 95       	ror	r26
    4452:	97 95       	ror	r25
    4454:	87 95       	ror	r24
    4456:	ee 0c       	add	r14, r14
    4458:	ff 1c       	adc	r15, r15
    445a:	00 1f       	adc	r16, r16
    445c:	11 1f       	adc	r17, r17
    445e:	6f 5f       	subi	r22, 0xFF	; 255
    4460:	7f 4f       	sbci	r23, 0xFF	; 255
    4462:	6f 31       	cpi	r22, 0x1F	; 31
    4464:	71 05       	cpc	r23, r1
    4466:	31 f7       	brne	.-52     	; 0x4434 <__divsf3+0xda>
    4468:	da 01       	movw	r26, r20
    446a:	c9 01       	movw	r24, r18
    446c:	8f 77       	andi	r24, 0x7F	; 127
    446e:	90 70       	andi	r25, 0x00	; 0
    4470:	a0 70       	andi	r26, 0x00	; 0
    4472:	b0 70       	andi	r27, 0x00	; 0
    4474:	80 34       	cpi	r24, 0x40	; 64
    4476:	91 05       	cpc	r25, r1
    4478:	a1 05       	cpc	r26, r1
    447a:	b1 05       	cpc	r27, r1
    447c:	61 f4       	brne	.+24     	; 0x4496 <__divsf3+0x13c>
    447e:	27 fd       	sbrc	r18, 7
    4480:	0a c0       	rjmp	.+20     	; 0x4496 <__divsf3+0x13c>
    4482:	e1 14       	cp	r14, r1
    4484:	f1 04       	cpc	r15, r1
    4486:	01 05       	cpc	r16, r1
    4488:	11 05       	cpc	r17, r1
    448a:	29 f0       	breq	.+10     	; 0x4496 <__divsf3+0x13c>
    448c:	20 5c       	subi	r18, 0xC0	; 192
    448e:	3f 4f       	sbci	r19, 0xFF	; 255
    4490:	4f 4f       	sbci	r20, 0xFF	; 255
    4492:	5f 4f       	sbci	r21, 0xFF	; 255
    4494:	20 78       	andi	r18, 0x80	; 128
    4496:	2d 87       	std	Y+13, r18	; 0x0d
    4498:	3e 87       	std	Y+14, r19	; 0x0e
    449a:	4f 87       	std	Y+15, r20	; 0x0f
    449c:	58 8b       	std	Y+16, r21	; 0x10
    449e:	be 01       	movw	r22, r28
    44a0:	67 5f       	subi	r22, 0xF7	; 247
    44a2:	7f 4f       	sbci	r23, 0xFF	; 255
    44a4:	cb 01       	movw	r24, r22
    44a6:	0e 94 3d 23 	call	0x467a	; 0x467a <__pack_f>
    44aa:	68 96       	adiw	r28, 0x18	; 24
    44ac:	ea e0       	ldi	r30, 0x0A	; 10
    44ae:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__epilogue_restores__+0x10>

000044b2 <__gtsf2>:
    44b2:	a8 e1       	ldi	r26, 0x18	; 24
    44b4:	b0 e0       	ldi	r27, 0x00	; 0
    44b6:	ef e5       	ldi	r30, 0x5F	; 95
    44b8:	f2 e2       	ldi	r31, 0x22	; 34
    44ba:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__prologue_saves__+0x18>
    44be:	69 83       	std	Y+1, r22	; 0x01
    44c0:	7a 83       	std	Y+2, r23	; 0x02
    44c2:	8b 83       	std	Y+3, r24	; 0x03
    44c4:	9c 83       	std	Y+4, r25	; 0x04
    44c6:	2d 83       	std	Y+5, r18	; 0x05
    44c8:	3e 83       	std	Y+6, r19	; 0x06
    44ca:	4f 83       	std	Y+7, r20	; 0x07
    44cc:	58 87       	std	Y+8, r21	; 0x08
    44ce:	89 e0       	ldi	r24, 0x09	; 9
    44d0:	e8 2e       	mov	r14, r24
    44d2:	f1 2c       	mov	r15, r1
    44d4:	ec 0e       	add	r14, r28
    44d6:	fd 1e       	adc	r15, r29
    44d8:	ce 01       	movw	r24, r28
    44da:	01 96       	adiw	r24, 0x01	; 1
    44dc:	b7 01       	movw	r22, r14
    44de:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    44e2:	8e 01       	movw	r16, r28
    44e4:	0f 5e       	subi	r16, 0xEF	; 239
    44e6:	1f 4f       	sbci	r17, 0xFF	; 255
    44e8:	ce 01       	movw	r24, r28
    44ea:	05 96       	adiw	r24, 0x05	; 5
    44ec:	b8 01       	movw	r22, r16
    44ee:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    44f2:	89 85       	ldd	r24, Y+9	; 0x09
    44f4:	82 30       	cpi	r24, 0x02	; 2
    44f6:	40 f0       	brcs	.+16     	; 0x4508 <__gtsf2+0x56>
    44f8:	89 89       	ldd	r24, Y+17	; 0x11
    44fa:	82 30       	cpi	r24, 0x02	; 2
    44fc:	28 f0       	brcs	.+10     	; 0x4508 <__gtsf2+0x56>
    44fe:	c7 01       	movw	r24, r14
    4500:	b8 01       	movw	r22, r16
    4502:	0e 94 8a 24 	call	0x4914	; 0x4914 <__fpcmp_parts_f>
    4506:	01 c0       	rjmp	.+2      	; 0x450a <__gtsf2+0x58>
    4508:	8f ef       	ldi	r24, 0xFF	; 255
    450a:	68 96       	adiw	r28, 0x18	; 24
    450c:	e6 e0       	ldi	r30, 0x06	; 6
    450e:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__epilogue_restores__+0x18>

00004512 <__gesf2>:
    4512:	a8 e1       	ldi	r26, 0x18	; 24
    4514:	b0 e0       	ldi	r27, 0x00	; 0
    4516:	ef e8       	ldi	r30, 0x8F	; 143
    4518:	f2 e2       	ldi	r31, 0x22	; 34
    451a:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__prologue_saves__+0x18>
    451e:	69 83       	std	Y+1, r22	; 0x01
    4520:	7a 83       	std	Y+2, r23	; 0x02
    4522:	8b 83       	std	Y+3, r24	; 0x03
    4524:	9c 83       	std	Y+4, r25	; 0x04
    4526:	2d 83       	std	Y+5, r18	; 0x05
    4528:	3e 83       	std	Y+6, r19	; 0x06
    452a:	4f 83       	std	Y+7, r20	; 0x07
    452c:	58 87       	std	Y+8, r21	; 0x08
    452e:	89 e0       	ldi	r24, 0x09	; 9
    4530:	e8 2e       	mov	r14, r24
    4532:	f1 2c       	mov	r15, r1
    4534:	ec 0e       	add	r14, r28
    4536:	fd 1e       	adc	r15, r29
    4538:	ce 01       	movw	r24, r28
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	b7 01       	movw	r22, r14
    453e:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    4542:	8e 01       	movw	r16, r28
    4544:	0f 5e       	subi	r16, 0xEF	; 239
    4546:	1f 4f       	sbci	r17, 0xFF	; 255
    4548:	ce 01       	movw	r24, r28
    454a:	05 96       	adiw	r24, 0x05	; 5
    454c:	b8 01       	movw	r22, r16
    454e:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    4552:	89 85       	ldd	r24, Y+9	; 0x09
    4554:	82 30       	cpi	r24, 0x02	; 2
    4556:	40 f0       	brcs	.+16     	; 0x4568 <__gesf2+0x56>
    4558:	89 89       	ldd	r24, Y+17	; 0x11
    455a:	82 30       	cpi	r24, 0x02	; 2
    455c:	28 f0       	brcs	.+10     	; 0x4568 <__gesf2+0x56>
    455e:	c7 01       	movw	r24, r14
    4560:	b8 01       	movw	r22, r16
    4562:	0e 94 8a 24 	call	0x4914	; 0x4914 <__fpcmp_parts_f>
    4566:	01 c0       	rjmp	.+2      	; 0x456a <__gesf2+0x58>
    4568:	8f ef       	ldi	r24, 0xFF	; 255
    456a:	68 96       	adiw	r28, 0x18	; 24
    456c:	e6 e0       	ldi	r30, 0x06	; 6
    456e:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__epilogue_restores__+0x18>

00004572 <__ltsf2>:
    4572:	a8 e1       	ldi	r26, 0x18	; 24
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	ef eb       	ldi	r30, 0xBF	; 191
    4578:	f2 e2       	ldi	r31, 0x22	; 34
    457a:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__prologue_saves__+0x18>
    457e:	69 83       	std	Y+1, r22	; 0x01
    4580:	7a 83       	std	Y+2, r23	; 0x02
    4582:	8b 83       	std	Y+3, r24	; 0x03
    4584:	9c 83       	std	Y+4, r25	; 0x04
    4586:	2d 83       	std	Y+5, r18	; 0x05
    4588:	3e 83       	std	Y+6, r19	; 0x06
    458a:	4f 83       	std	Y+7, r20	; 0x07
    458c:	58 87       	std	Y+8, r21	; 0x08
    458e:	89 e0       	ldi	r24, 0x09	; 9
    4590:	e8 2e       	mov	r14, r24
    4592:	f1 2c       	mov	r15, r1
    4594:	ec 0e       	add	r14, r28
    4596:	fd 1e       	adc	r15, r29
    4598:	ce 01       	movw	r24, r28
    459a:	01 96       	adiw	r24, 0x01	; 1
    459c:	b7 01       	movw	r22, r14
    459e:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    45a2:	8e 01       	movw	r16, r28
    45a4:	0f 5e       	subi	r16, 0xEF	; 239
    45a6:	1f 4f       	sbci	r17, 0xFF	; 255
    45a8:	ce 01       	movw	r24, r28
    45aa:	05 96       	adiw	r24, 0x05	; 5
    45ac:	b8 01       	movw	r22, r16
    45ae:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    45b2:	89 85       	ldd	r24, Y+9	; 0x09
    45b4:	82 30       	cpi	r24, 0x02	; 2
    45b6:	40 f0       	brcs	.+16     	; 0x45c8 <__ltsf2+0x56>
    45b8:	89 89       	ldd	r24, Y+17	; 0x11
    45ba:	82 30       	cpi	r24, 0x02	; 2
    45bc:	28 f0       	brcs	.+10     	; 0x45c8 <__ltsf2+0x56>
    45be:	c7 01       	movw	r24, r14
    45c0:	b8 01       	movw	r22, r16
    45c2:	0e 94 8a 24 	call	0x4914	; 0x4914 <__fpcmp_parts_f>
    45c6:	01 c0       	rjmp	.+2      	; 0x45ca <__ltsf2+0x58>
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	68 96       	adiw	r28, 0x18	; 24
    45cc:	e6 e0       	ldi	r30, 0x06	; 6
    45ce:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__epilogue_restores__+0x18>

000045d2 <__fixsfsi>:
    45d2:	ac e0       	ldi	r26, 0x0C	; 12
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	ef ee       	ldi	r30, 0xEF	; 239
    45d8:	f2 e2       	ldi	r31, 0x22	; 34
    45da:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__prologue_saves__+0x20>
    45de:	69 83       	std	Y+1, r22	; 0x01
    45e0:	7a 83       	std	Y+2, r23	; 0x02
    45e2:	8b 83       	std	Y+3, r24	; 0x03
    45e4:	9c 83       	std	Y+4, r25	; 0x04
    45e6:	ce 01       	movw	r24, r28
    45e8:	01 96       	adiw	r24, 0x01	; 1
    45ea:	be 01       	movw	r22, r28
    45ec:	6b 5f       	subi	r22, 0xFB	; 251
    45ee:	7f 4f       	sbci	r23, 0xFF	; 255
    45f0:	0e 94 12 24 	call	0x4824	; 0x4824 <__unpack_f>
    45f4:	8d 81       	ldd	r24, Y+5	; 0x05
    45f6:	82 30       	cpi	r24, 0x02	; 2
    45f8:	61 f1       	breq	.+88     	; 0x4652 <__fixsfsi+0x80>
    45fa:	82 30       	cpi	r24, 0x02	; 2
    45fc:	50 f1       	brcs	.+84     	; 0x4652 <__fixsfsi+0x80>
    45fe:	84 30       	cpi	r24, 0x04	; 4
    4600:	21 f4       	brne	.+8      	; 0x460a <__fixsfsi+0x38>
    4602:	8e 81       	ldd	r24, Y+6	; 0x06
    4604:	88 23       	and	r24, r24
    4606:	51 f1       	breq	.+84     	; 0x465c <__fixsfsi+0x8a>
    4608:	2e c0       	rjmp	.+92     	; 0x4666 <__fixsfsi+0x94>
    460a:	2f 81       	ldd	r18, Y+7	; 0x07
    460c:	38 85       	ldd	r19, Y+8	; 0x08
    460e:	37 fd       	sbrc	r19, 7
    4610:	20 c0       	rjmp	.+64     	; 0x4652 <__fixsfsi+0x80>
    4612:	6e 81       	ldd	r22, Y+6	; 0x06
    4614:	2f 31       	cpi	r18, 0x1F	; 31
    4616:	31 05       	cpc	r19, r1
    4618:	1c f0       	brlt	.+6      	; 0x4620 <__fixsfsi+0x4e>
    461a:	66 23       	and	r22, r22
    461c:	f9 f0       	breq	.+62     	; 0x465c <__fixsfsi+0x8a>
    461e:	23 c0       	rjmp	.+70     	; 0x4666 <__fixsfsi+0x94>
    4620:	8e e1       	ldi	r24, 0x1E	; 30
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	82 1b       	sub	r24, r18
    4626:	93 0b       	sbc	r25, r19
    4628:	29 85       	ldd	r18, Y+9	; 0x09
    462a:	3a 85       	ldd	r19, Y+10	; 0x0a
    462c:	4b 85       	ldd	r20, Y+11	; 0x0b
    462e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4630:	04 c0       	rjmp	.+8      	; 0x463a <__fixsfsi+0x68>
    4632:	56 95       	lsr	r21
    4634:	47 95       	ror	r20
    4636:	37 95       	ror	r19
    4638:	27 95       	ror	r18
    463a:	8a 95       	dec	r24
    463c:	d2 f7       	brpl	.-12     	; 0x4632 <__fixsfsi+0x60>
    463e:	66 23       	and	r22, r22
    4640:	b1 f0       	breq	.+44     	; 0x466e <__fixsfsi+0x9c>
    4642:	50 95       	com	r21
    4644:	40 95       	com	r20
    4646:	30 95       	com	r19
    4648:	21 95       	neg	r18
    464a:	3f 4f       	sbci	r19, 0xFF	; 255
    464c:	4f 4f       	sbci	r20, 0xFF	; 255
    464e:	5f 4f       	sbci	r21, 0xFF	; 255
    4650:	0e c0       	rjmp	.+28     	; 0x466e <__fixsfsi+0x9c>
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	40 e0       	ldi	r20, 0x00	; 0
    4658:	50 e0       	ldi	r21, 0x00	; 0
    465a:	09 c0       	rjmp	.+18     	; 0x466e <__fixsfsi+0x9c>
    465c:	2f ef       	ldi	r18, 0xFF	; 255
    465e:	3f ef       	ldi	r19, 0xFF	; 255
    4660:	4f ef       	ldi	r20, 0xFF	; 255
    4662:	5f e7       	ldi	r21, 0x7F	; 127
    4664:	04 c0       	rjmp	.+8      	; 0x466e <__fixsfsi+0x9c>
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	40 e0       	ldi	r20, 0x00	; 0
    466c:	50 e8       	ldi	r21, 0x80	; 128
    466e:	b9 01       	movw	r22, r18
    4670:	ca 01       	movw	r24, r20
    4672:	2c 96       	adiw	r28, 0x0c	; 12
    4674:	e2 e0       	ldi	r30, 0x02	; 2
    4676:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <__epilogue_restores__+0x20>

0000467a <__pack_f>:
    467a:	df 92       	push	r13
    467c:	ef 92       	push	r14
    467e:	ff 92       	push	r15
    4680:	0f 93       	push	r16
    4682:	1f 93       	push	r17
    4684:	fc 01       	movw	r30, r24
    4686:	e4 80       	ldd	r14, Z+4	; 0x04
    4688:	f5 80       	ldd	r15, Z+5	; 0x05
    468a:	06 81       	ldd	r16, Z+6	; 0x06
    468c:	17 81       	ldd	r17, Z+7	; 0x07
    468e:	d1 80       	ldd	r13, Z+1	; 0x01
    4690:	80 81       	ld	r24, Z
    4692:	82 30       	cpi	r24, 0x02	; 2
    4694:	48 f4       	brcc	.+18     	; 0x46a8 <__pack_f+0x2e>
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	a0 e1       	ldi	r26, 0x10	; 16
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	e8 2a       	or	r14, r24
    46a0:	f9 2a       	or	r15, r25
    46a2:	0a 2b       	or	r16, r26
    46a4:	1b 2b       	or	r17, r27
    46a6:	a5 c0       	rjmp	.+330    	; 0x47f2 <__pack_f+0x178>
    46a8:	84 30       	cpi	r24, 0x04	; 4
    46aa:	09 f4       	brne	.+2      	; 0x46ae <__pack_f+0x34>
    46ac:	9f c0       	rjmp	.+318    	; 0x47ec <__pack_f+0x172>
    46ae:	82 30       	cpi	r24, 0x02	; 2
    46b0:	21 f4       	brne	.+8      	; 0x46ba <__pack_f+0x40>
    46b2:	ee 24       	eor	r14, r14
    46b4:	ff 24       	eor	r15, r15
    46b6:	87 01       	movw	r16, r14
    46b8:	05 c0       	rjmp	.+10     	; 0x46c4 <__pack_f+0x4a>
    46ba:	e1 14       	cp	r14, r1
    46bc:	f1 04       	cpc	r15, r1
    46be:	01 05       	cpc	r16, r1
    46c0:	11 05       	cpc	r17, r1
    46c2:	19 f4       	brne	.+6      	; 0x46ca <__pack_f+0x50>
    46c4:	e0 e0       	ldi	r30, 0x00	; 0
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	96 c0       	rjmp	.+300    	; 0x47f6 <__pack_f+0x17c>
    46ca:	62 81       	ldd	r22, Z+2	; 0x02
    46cc:	73 81       	ldd	r23, Z+3	; 0x03
    46ce:	9f ef       	ldi	r25, 0xFF	; 255
    46d0:	62 38       	cpi	r22, 0x82	; 130
    46d2:	79 07       	cpc	r23, r25
    46d4:	0c f0       	brlt	.+2      	; 0x46d8 <__pack_f+0x5e>
    46d6:	5b c0       	rjmp	.+182    	; 0x478e <__pack_f+0x114>
    46d8:	22 e8       	ldi	r18, 0x82	; 130
    46da:	3f ef       	ldi	r19, 0xFF	; 255
    46dc:	26 1b       	sub	r18, r22
    46de:	37 0b       	sbc	r19, r23
    46e0:	2a 31       	cpi	r18, 0x1A	; 26
    46e2:	31 05       	cpc	r19, r1
    46e4:	2c f0       	brlt	.+10     	; 0x46f0 <__pack_f+0x76>
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e0       	ldi	r20, 0x00	; 0
    46ec:	50 e0       	ldi	r21, 0x00	; 0
    46ee:	2a c0       	rjmp	.+84     	; 0x4744 <__pack_f+0xca>
    46f0:	b8 01       	movw	r22, r16
    46f2:	a7 01       	movw	r20, r14
    46f4:	02 2e       	mov	r0, r18
    46f6:	04 c0       	rjmp	.+8      	; 0x4700 <__pack_f+0x86>
    46f8:	76 95       	lsr	r23
    46fa:	67 95       	ror	r22
    46fc:	57 95       	ror	r21
    46fe:	47 95       	ror	r20
    4700:	0a 94       	dec	r0
    4702:	d2 f7       	brpl	.-12     	; 0x46f8 <__pack_f+0x7e>
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	a0 e0       	ldi	r26, 0x00	; 0
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	04 c0       	rjmp	.+8      	; 0x4716 <__pack_f+0x9c>
    470e:	88 0f       	add	r24, r24
    4710:	99 1f       	adc	r25, r25
    4712:	aa 1f       	adc	r26, r26
    4714:	bb 1f       	adc	r27, r27
    4716:	2a 95       	dec	r18
    4718:	d2 f7       	brpl	.-12     	; 0x470e <__pack_f+0x94>
    471a:	01 97       	sbiw	r24, 0x01	; 1
    471c:	a1 09       	sbc	r26, r1
    471e:	b1 09       	sbc	r27, r1
    4720:	8e 21       	and	r24, r14
    4722:	9f 21       	and	r25, r15
    4724:	a0 23       	and	r26, r16
    4726:	b1 23       	and	r27, r17
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	a1 05       	cpc	r26, r1
    472c:	b1 05       	cpc	r27, r1
    472e:	21 f0       	breq	.+8      	; 0x4738 <__pack_f+0xbe>
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	a0 e0       	ldi	r26, 0x00	; 0
    4736:	b0 e0       	ldi	r27, 0x00	; 0
    4738:	9a 01       	movw	r18, r20
    473a:	ab 01       	movw	r20, r22
    473c:	28 2b       	or	r18, r24
    473e:	39 2b       	or	r19, r25
    4740:	4a 2b       	or	r20, r26
    4742:	5b 2b       	or	r21, r27
    4744:	da 01       	movw	r26, r20
    4746:	c9 01       	movw	r24, r18
    4748:	8f 77       	andi	r24, 0x7F	; 127
    474a:	90 70       	andi	r25, 0x00	; 0
    474c:	a0 70       	andi	r26, 0x00	; 0
    474e:	b0 70       	andi	r27, 0x00	; 0
    4750:	80 34       	cpi	r24, 0x40	; 64
    4752:	91 05       	cpc	r25, r1
    4754:	a1 05       	cpc	r26, r1
    4756:	b1 05       	cpc	r27, r1
    4758:	39 f4       	brne	.+14     	; 0x4768 <__pack_f+0xee>
    475a:	27 ff       	sbrs	r18, 7
    475c:	09 c0       	rjmp	.+18     	; 0x4770 <__pack_f+0xf6>
    475e:	20 5c       	subi	r18, 0xC0	; 192
    4760:	3f 4f       	sbci	r19, 0xFF	; 255
    4762:	4f 4f       	sbci	r20, 0xFF	; 255
    4764:	5f 4f       	sbci	r21, 0xFF	; 255
    4766:	04 c0       	rjmp	.+8      	; 0x4770 <__pack_f+0xf6>
    4768:	21 5c       	subi	r18, 0xC1	; 193
    476a:	3f 4f       	sbci	r19, 0xFF	; 255
    476c:	4f 4f       	sbci	r20, 0xFF	; 255
    476e:	5f 4f       	sbci	r21, 0xFF	; 255
    4770:	e0 e0       	ldi	r30, 0x00	; 0
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	20 30       	cpi	r18, 0x00	; 0
    4776:	a0 e0       	ldi	r26, 0x00	; 0
    4778:	3a 07       	cpc	r19, r26
    477a:	a0 e0       	ldi	r26, 0x00	; 0
    477c:	4a 07       	cpc	r20, r26
    477e:	a0 e4       	ldi	r26, 0x40	; 64
    4780:	5a 07       	cpc	r21, r26
    4782:	10 f0       	brcs	.+4      	; 0x4788 <__pack_f+0x10e>
    4784:	e1 e0       	ldi	r30, 0x01	; 1
    4786:	f0 e0       	ldi	r31, 0x00	; 0
    4788:	79 01       	movw	r14, r18
    478a:	8a 01       	movw	r16, r20
    478c:	27 c0       	rjmp	.+78     	; 0x47dc <__pack_f+0x162>
    478e:	60 38       	cpi	r22, 0x80	; 128
    4790:	71 05       	cpc	r23, r1
    4792:	64 f5       	brge	.+88     	; 0x47ec <__pack_f+0x172>
    4794:	fb 01       	movw	r30, r22
    4796:	e1 58       	subi	r30, 0x81	; 129
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	d8 01       	movw	r26, r16
    479c:	c7 01       	movw	r24, r14
    479e:	8f 77       	andi	r24, 0x7F	; 127
    47a0:	90 70       	andi	r25, 0x00	; 0
    47a2:	a0 70       	andi	r26, 0x00	; 0
    47a4:	b0 70       	andi	r27, 0x00	; 0
    47a6:	80 34       	cpi	r24, 0x40	; 64
    47a8:	91 05       	cpc	r25, r1
    47aa:	a1 05       	cpc	r26, r1
    47ac:	b1 05       	cpc	r27, r1
    47ae:	39 f4       	brne	.+14     	; 0x47be <__pack_f+0x144>
    47b0:	e7 fe       	sbrs	r14, 7
    47b2:	0d c0       	rjmp	.+26     	; 0x47ce <__pack_f+0x154>
    47b4:	80 e4       	ldi	r24, 0x40	; 64
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	a0 e0       	ldi	r26, 0x00	; 0
    47ba:	b0 e0       	ldi	r27, 0x00	; 0
    47bc:	04 c0       	rjmp	.+8      	; 0x47c6 <__pack_f+0x14c>
    47be:	8f e3       	ldi	r24, 0x3F	; 63
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	a0 e0       	ldi	r26, 0x00	; 0
    47c4:	b0 e0       	ldi	r27, 0x00	; 0
    47c6:	e8 0e       	add	r14, r24
    47c8:	f9 1e       	adc	r15, r25
    47ca:	0a 1f       	adc	r16, r26
    47cc:	1b 1f       	adc	r17, r27
    47ce:	17 ff       	sbrs	r17, 7
    47d0:	05 c0       	rjmp	.+10     	; 0x47dc <__pack_f+0x162>
    47d2:	16 95       	lsr	r17
    47d4:	07 95       	ror	r16
    47d6:	f7 94       	ror	r15
    47d8:	e7 94       	ror	r14
    47da:	31 96       	adiw	r30, 0x01	; 1
    47dc:	87 e0       	ldi	r24, 0x07	; 7
    47de:	16 95       	lsr	r17
    47e0:	07 95       	ror	r16
    47e2:	f7 94       	ror	r15
    47e4:	e7 94       	ror	r14
    47e6:	8a 95       	dec	r24
    47e8:	d1 f7       	brne	.-12     	; 0x47de <__pack_f+0x164>
    47ea:	05 c0       	rjmp	.+10     	; 0x47f6 <__pack_f+0x17c>
    47ec:	ee 24       	eor	r14, r14
    47ee:	ff 24       	eor	r15, r15
    47f0:	87 01       	movw	r16, r14
    47f2:	ef ef       	ldi	r30, 0xFF	; 255
    47f4:	f0 e0       	ldi	r31, 0x00	; 0
    47f6:	6e 2f       	mov	r22, r30
    47f8:	67 95       	ror	r22
    47fa:	66 27       	eor	r22, r22
    47fc:	67 95       	ror	r22
    47fe:	90 2f       	mov	r25, r16
    4800:	9f 77       	andi	r25, 0x7F	; 127
    4802:	d7 94       	ror	r13
    4804:	dd 24       	eor	r13, r13
    4806:	d7 94       	ror	r13
    4808:	8e 2f       	mov	r24, r30
    480a:	86 95       	lsr	r24
    480c:	49 2f       	mov	r20, r25
    480e:	46 2b       	or	r20, r22
    4810:	58 2f       	mov	r21, r24
    4812:	5d 29       	or	r21, r13
    4814:	b7 01       	movw	r22, r14
    4816:	ca 01       	movw	r24, r20
    4818:	1f 91       	pop	r17
    481a:	0f 91       	pop	r16
    481c:	ff 90       	pop	r15
    481e:	ef 90       	pop	r14
    4820:	df 90       	pop	r13
    4822:	08 95       	ret

00004824 <__unpack_f>:
    4824:	fc 01       	movw	r30, r24
    4826:	db 01       	movw	r26, r22
    4828:	40 81       	ld	r20, Z
    482a:	51 81       	ldd	r21, Z+1	; 0x01
    482c:	22 81       	ldd	r18, Z+2	; 0x02
    482e:	62 2f       	mov	r22, r18
    4830:	6f 77       	andi	r22, 0x7F	; 127
    4832:	70 e0       	ldi	r23, 0x00	; 0
    4834:	22 1f       	adc	r18, r18
    4836:	22 27       	eor	r18, r18
    4838:	22 1f       	adc	r18, r18
    483a:	93 81       	ldd	r25, Z+3	; 0x03
    483c:	89 2f       	mov	r24, r25
    483e:	88 0f       	add	r24, r24
    4840:	82 2b       	or	r24, r18
    4842:	28 2f       	mov	r18, r24
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	99 1f       	adc	r25, r25
    4848:	99 27       	eor	r25, r25
    484a:	99 1f       	adc	r25, r25
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	9c 93       	st	X, r25
    4850:	11 97       	sbiw	r26, 0x01	; 1
    4852:	21 15       	cp	r18, r1
    4854:	31 05       	cpc	r19, r1
    4856:	a9 f5       	brne	.+106    	; 0x48c2 <__unpack_f+0x9e>
    4858:	41 15       	cp	r20, r1
    485a:	51 05       	cpc	r21, r1
    485c:	61 05       	cpc	r22, r1
    485e:	71 05       	cpc	r23, r1
    4860:	11 f4       	brne	.+4      	; 0x4866 <__unpack_f+0x42>
    4862:	82 e0       	ldi	r24, 0x02	; 2
    4864:	37 c0       	rjmp	.+110    	; 0x48d4 <__unpack_f+0xb0>
    4866:	82 e8       	ldi	r24, 0x82	; 130
    4868:	9f ef       	ldi	r25, 0xFF	; 255
    486a:	13 96       	adiw	r26, 0x03	; 3
    486c:	9c 93       	st	X, r25
    486e:	8e 93       	st	-X, r24
    4870:	12 97       	sbiw	r26, 0x02	; 2
    4872:	9a 01       	movw	r18, r20
    4874:	ab 01       	movw	r20, r22
    4876:	67 e0       	ldi	r22, 0x07	; 7
    4878:	22 0f       	add	r18, r18
    487a:	33 1f       	adc	r19, r19
    487c:	44 1f       	adc	r20, r20
    487e:	55 1f       	adc	r21, r21
    4880:	6a 95       	dec	r22
    4882:	d1 f7       	brne	.-12     	; 0x4878 <__unpack_f+0x54>
    4884:	83 e0       	ldi	r24, 0x03	; 3
    4886:	8c 93       	st	X, r24
    4888:	0d c0       	rjmp	.+26     	; 0x48a4 <__unpack_f+0x80>
    488a:	22 0f       	add	r18, r18
    488c:	33 1f       	adc	r19, r19
    488e:	44 1f       	adc	r20, r20
    4890:	55 1f       	adc	r21, r21
    4892:	12 96       	adiw	r26, 0x02	; 2
    4894:	8d 91       	ld	r24, X+
    4896:	9c 91       	ld	r25, X
    4898:	13 97       	sbiw	r26, 0x03	; 3
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	13 96       	adiw	r26, 0x03	; 3
    489e:	9c 93       	st	X, r25
    48a0:	8e 93       	st	-X, r24
    48a2:	12 97       	sbiw	r26, 0x02	; 2
    48a4:	20 30       	cpi	r18, 0x00	; 0
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	38 07       	cpc	r19, r24
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	48 07       	cpc	r20, r24
    48ae:	80 e4       	ldi	r24, 0x40	; 64
    48b0:	58 07       	cpc	r21, r24
    48b2:	58 f3       	brcs	.-42     	; 0x488a <__unpack_f+0x66>
    48b4:	14 96       	adiw	r26, 0x04	; 4
    48b6:	2d 93       	st	X+, r18
    48b8:	3d 93       	st	X+, r19
    48ba:	4d 93       	st	X+, r20
    48bc:	5c 93       	st	X, r21
    48be:	17 97       	sbiw	r26, 0x07	; 7
    48c0:	08 95       	ret
    48c2:	2f 3f       	cpi	r18, 0xFF	; 255
    48c4:	31 05       	cpc	r19, r1
    48c6:	79 f4       	brne	.+30     	; 0x48e6 <__unpack_f+0xc2>
    48c8:	41 15       	cp	r20, r1
    48ca:	51 05       	cpc	r21, r1
    48cc:	61 05       	cpc	r22, r1
    48ce:	71 05       	cpc	r23, r1
    48d0:	19 f4       	brne	.+6      	; 0x48d8 <__unpack_f+0xb4>
    48d2:	84 e0       	ldi	r24, 0x04	; 4
    48d4:	8c 93       	st	X, r24
    48d6:	08 95       	ret
    48d8:	64 ff       	sbrs	r22, 4
    48da:	03 c0       	rjmp	.+6      	; 0x48e2 <__unpack_f+0xbe>
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	8c 93       	st	X, r24
    48e0:	12 c0       	rjmp	.+36     	; 0x4906 <__unpack_f+0xe2>
    48e2:	1c 92       	st	X, r1
    48e4:	10 c0       	rjmp	.+32     	; 0x4906 <__unpack_f+0xe2>
    48e6:	2f 57       	subi	r18, 0x7F	; 127
    48e8:	30 40       	sbci	r19, 0x00	; 0
    48ea:	13 96       	adiw	r26, 0x03	; 3
    48ec:	3c 93       	st	X, r19
    48ee:	2e 93       	st	-X, r18
    48f0:	12 97       	sbiw	r26, 0x02	; 2
    48f2:	83 e0       	ldi	r24, 0x03	; 3
    48f4:	8c 93       	st	X, r24
    48f6:	87 e0       	ldi	r24, 0x07	; 7
    48f8:	44 0f       	add	r20, r20
    48fa:	55 1f       	adc	r21, r21
    48fc:	66 1f       	adc	r22, r22
    48fe:	77 1f       	adc	r23, r23
    4900:	8a 95       	dec	r24
    4902:	d1 f7       	brne	.-12     	; 0x48f8 <__unpack_f+0xd4>
    4904:	70 64       	ori	r23, 0x40	; 64
    4906:	14 96       	adiw	r26, 0x04	; 4
    4908:	4d 93       	st	X+, r20
    490a:	5d 93       	st	X+, r21
    490c:	6d 93       	st	X+, r22
    490e:	7c 93       	st	X, r23
    4910:	17 97       	sbiw	r26, 0x07	; 7
    4912:	08 95       	ret

00004914 <__fpcmp_parts_f>:
    4914:	1f 93       	push	r17
    4916:	dc 01       	movw	r26, r24
    4918:	fb 01       	movw	r30, r22
    491a:	9c 91       	ld	r25, X
    491c:	92 30       	cpi	r25, 0x02	; 2
    491e:	08 f4       	brcc	.+2      	; 0x4922 <__fpcmp_parts_f+0xe>
    4920:	47 c0       	rjmp	.+142    	; 0x49b0 <__fpcmp_parts_f+0x9c>
    4922:	80 81       	ld	r24, Z
    4924:	82 30       	cpi	r24, 0x02	; 2
    4926:	08 f4       	brcc	.+2      	; 0x492a <__fpcmp_parts_f+0x16>
    4928:	43 c0       	rjmp	.+134    	; 0x49b0 <__fpcmp_parts_f+0x9c>
    492a:	94 30       	cpi	r25, 0x04	; 4
    492c:	51 f4       	brne	.+20     	; 0x4942 <__fpcmp_parts_f+0x2e>
    492e:	11 96       	adiw	r26, 0x01	; 1
    4930:	1c 91       	ld	r17, X
    4932:	84 30       	cpi	r24, 0x04	; 4
    4934:	99 f5       	brne	.+102    	; 0x499c <__fpcmp_parts_f+0x88>
    4936:	81 81       	ldd	r24, Z+1	; 0x01
    4938:	68 2f       	mov	r22, r24
    493a:	70 e0       	ldi	r23, 0x00	; 0
    493c:	61 1b       	sub	r22, r17
    493e:	71 09       	sbc	r23, r1
    4940:	3f c0       	rjmp	.+126    	; 0x49c0 <__fpcmp_parts_f+0xac>
    4942:	84 30       	cpi	r24, 0x04	; 4
    4944:	21 f0       	breq	.+8      	; 0x494e <__fpcmp_parts_f+0x3a>
    4946:	92 30       	cpi	r25, 0x02	; 2
    4948:	31 f4       	brne	.+12     	; 0x4956 <__fpcmp_parts_f+0x42>
    494a:	82 30       	cpi	r24, 0x02	; 2
    494c:	b9 f1       	breq	.+110    	; 0x49bc <__fpcmp_parts_f+0xa8>
    494e:	81 81       	ldd	r24, Z+1	; 0x01
    4950:	88 23       	and	r24, r24
    4952:	89 f1       	breq	.+98     	; 0x49b6 <__fpcmp_parts_f+0xa2>
    4954:	2d c0       	rjmp	.+90     	; 0x49b0 <__fpcmp_parts_f+0x9c>
    4956:	11 96       	adiw	r26, 0x01	; 1
    4958:	1c 91       	ld	r17, X
    495a:	11 97       	sbiw	r26, 0x01	; 1
    495c:	82 30       	cpi	r24, 0x02	; 2
    495e:	f1 f0       	breq	.+60     	; 0x499c <__fpcmp_parts_f+0x88>
    4960:	81 81       	ldd	r24, Z+1	; 0x01
    4962:	18 17       	cp	r17, r24
    4964:	d9 f4       	brne	.+54     	; 0x499c <__fpcmp_parts_f+0x88>
    4966:	12 96       	adiw	r26, 0x02	; 2
    4968:	2d 91       	ld	r18, X+
    496a:	3c 91       	ld	r19, X
    496c:	13 97       	sbiw	r26, 0x03	; 3
    496e:	82 81       	ldd	r24, Z+2	; 0x02
    4970:	93 81       	ldd	r25, Z+3	; 0x03
    4972:	82 17       	cp	r24, r18
    4974:	93 07       	cpc	r25, r19
    4976:	94 f0       	brlt	.+36     	; 0x499c <__fpcmp_parts_f+0x88>
    4978:	28 17       	cp	r18, r24
    497a:	39 07       	cpc	r19, r25
    497c:	bc f0       	brlt	.+46     	; 0x49ac <__fpcmp_parts_f+0x98>
    497e:	14 96       	adiw	r26, 0x04	; 4
    4980:	8d 91       	ld	r24, X+
    4982:	9d 91       	ld	r25, X+
    4984:	0d 90       	ld	r0, X+
    4986:	bc 91       	ld	r27, X
    4988:	a0 2d       	mov	r26, r0
    498a:	24 81       	ldd	r18, Z+4	; 0x04
    498c:	35 81       	ldd	r19, Z+5	; 0x05
    498e:	46 81       	ldd	r20, Z+6	; 0x06
    4990:	57 81       	ldd	r21, Z+7	; 0x07
    4992:	28 17       	cp	r18, r24
    4994:	39 07       	cpc	r19, r25
    4996:	4a 07       	cpc	r20, r26
    4998:	5b 07       	cpc	r21, r27
    499a:	18 f4       	brcc	.+6      	; 0x49a2 <__fpcmp_parts_f+0x8e>
    499c:	11 23       	and	r17, r17
    499e:	41 f0       	breq	.+16     	; 0x49b0 <__fpcmp_parts_f+0x9c>
    49a0:	0a c0       	rjmp	.+20     	; 0x49b6 <__fpcmp_parts_f+0xa2>
    49a2:	82 17       	cp	r24, r18
    49a4:	93 07       	cpc	r25, r19
    49a6:	a4 07       	cpc	r26, r20
    49a8:	b5 07       	cpc	r27, r21
    49aa:	40 f4       	brcc	.+16     	; 0x49bc <__fpcmp_parts_f+0xa8>
    49ac:	11 23       	and	r17, r17
    49ae:	19 f0       	breq	.+6      	; 0x49b6 <__fpcmp_parts_f+0xa2>
    49b0:	61 e0       	ldi	r22, 0x01	; 1
    49b2:	70 e0       	ldi	r23, 0x00	; 0
    49b4:	05 c0       	rjmp	.+10     	; 0x49c0 <__fpcmp_parts_f+0xac>
    49b6:	6f ef       	ldi	r22, 0xFF	; 255
    49b8:	7f ef       	ldi	r23, 0xFF	; 255
    49ba:	02 c0       	rjmp	.+4      	; 0x49c0 <__fpcmp_parts_f+0xac>
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	70 e0       	ldi	r23, 0x00	; 0
    49c0:	cb 01       	movw	r24, r22
    49c2:	1f 91       	pop	r17
    49c4:	08 95       	ret

000049c6 <__divmodhi4>:
    49c6:	97 fb       	bst	r25, 7
    49c8:	09 2e       	mov	r0, r25
    49ca:	07 26       	eor	r0, r23
    49cc:	0a d0       	rcall	.+20     	; 0x49e2 <__divmodhi4_neg1>
    49ce:	77 fd       	sbrc	r23, 7
    49d0:	04 d0       	rcall	.+8      	; 0x49da <__divmodhi4_neg2>
    49d2:	0c d0       	rcall	.+24     	; 0x49ec <__udivmodhi4>
    49d4:	06 d0       	rcall	.+12     	; 0x49e2 <__divmodhi4_neg1>
    49d6:	00 20       	and	r0, r0
    49d8:	1a f4       	brpl	.+6      	; 0x49e0 <__divmodhi4_exit>

000049da <__divmodhi4_neg2>:
    49da:	70 95       	com	r23
    49dc:	61 95       	neg	r22
    49de:	7f 4f       	sbci	r23, 0xFF	; 255

000049e0 <__divmodhi4_exit>:
    49e0:	08 95       	ret

000049e2 <__divmodhi4_neg1>:
    49e2:	f6 f7       	brtc	.-4      	; 0x49e0 <__divmodhi4_exit>
    49e4:	90 95       	com	r25
    49e6:	81 95       	neg	r24
    49e8:	9f 4f       	sbci	r25, 0xFF	; 255
    49ea:	08 95       	ret

000049ec <__udivmodhi4>:
    49ec:	aa 1b       	sub	r26, r26
    49ee:	bb 1b       	sub	r27, r27
    49f0:	51 e1       	ldi	r21, 0x11	; 17
    49f2:	07 c0       	rjmp	.+14     	; 0x4a02 <__udivmodhi4_ep>

000049f4 <__udivmodhi4_loop>:
    49f4:	aa 1f       	adc	r26, r26
    49f6:	bb 1f       	adc	r27, r27
    49f8:	a6 17       	cp	r26, r22
    49fa:	b7 07       	cpc	r27, r23
    49fc:	10 f0       	brcs	.+4      	; 0x4a02 <__udivmodhi4_ep>
    49fe:	a6 1b       	sub	r26, r22
    4a00:	b7 0b       	sbc	r27, r23

00004a02 <__udivmodhi4_ep>:
    4a02:	88 1f       	adc	r24, r24
    4a04:	99 1f       	adc	r25, r25
    4a06:	5a 95       	dec	r21
    4a08:	a9 f7       	brne	.-22     	; 0x49f4 <__udivmodhi4_loop>
    4a0a:	80 95       	com	r24
    4a0c:	90 95       	com	r25
    4a0e:	bc 01       	movw	r22, r24
    4a10:	cd 01       	movw	r24, r26
    4a12:	08 95       	ret

00004a14 <__prologue_saves__>:
    4a14:	2f 92       	push	r2
    4a16:	3f 92       	push	r3
    4a18:	4f 92       	push	r4
    4a1a:	5f 92       	push	r5
    4a1c:	6f 92       	push	r6
    4a1e:	7f 92       	push	r7
    4a20:	8f 92       	push	r8
    4a22:	9f 92       	push	r9
    4a24:	af 92       	push	r10
    4a26:	bf 92       	push	r11
    4a28:	cf 92       	push	r12
    4a2a:	df 92       	push	r13
    4a2c:	ef 92       	push	r14
    4a2e:	ff 92       	push	r15
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
    4a34:	cf 93       	push	r28
    4a36:	df 93       	push	r29
    4a38:	cd b7       	in	r28, 0x3d	; 61
    4a3a:	de b7       	in	r29, 0x3e	; 62
    4a3c:	ca 1b       	sub	r28, r26
    4a3e:	db 0b       	sbc	r29, r27
    4a40:	0f b6       	in	r0, 0x3f	; 63
    4a42:	f8 94       	cli
    4a44:	de bf       	out	0x3e, r29	; 62
    4a46:	0f be       	out	0x3f, r0	; 63
    4a48:	cd bf       	out	0x3d, r28	; 61
    4a4a:	09 94       	ijmp

00004a4c <__epilogue_restores__>:
    4a4c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a4e:	39 88       	ldd	r3, Y+17	; 0x11
    4a50:	48 88       	ldd	r4, Y+16	; 0x10
    4a52:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a54:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a56:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a58:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a5e:	b9 84       	ldd	r11, Y+9	; 0x09
    4a60:	c8 84       	ldd	r12, Y+8	; 0x08
    4a62:	df 80       	ldd	r13, Y+7	; 0x07
    4a64:	ee 80       	ldd	r14, Y+6	; 0x06
    4a66:	fd 80       	ldd	r15, Y+5	; 0x05
    4a68:	0c 81       	ldd	r16, Y+4	; 0x04
    4a6a:	1b 81       	ldd	r17, Y+3	; 0x03
    4a6c:	aa 81       	ldd	r26, Y+2	; 0x02
    4a6e:	b9 81       	ldd	r27, Y+1	; 0x01
    4a70:	ce 0f       	add	r28, r30
    4a72:	d1 1d       	adc	r29, r1
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	ed 01       	movw	r28, r26
    4a80:	08 95       	ret

00004a82 <itoa>:
    4a82:	fb 01       	movw	r30, r22
    4a84:	9f 01       	movw	r18, r30
    4a86:	e8 94       	clt
    4a88:	42 30       	cpi	r20, 0x02	; 2
    4a8a:	c4 f0       	brlt	.+48     	; 0x4abc <itoa+0x3a>
    4a8c:	45 32       	cpi	r20, 0x25	; 37
    4a8e:	b4 f4       	brge	.+44     	; 0x4abc <itoa+0x3a>
    4a90:	4a 30       	cpi	r20, 0x0A	; 10
    4a92:	29 f4       	brne	.+10     	; 0x4a9e <itoa+0x1c>
    4a94:	97 fb       	bst	r25, 7
    4a96:	1e f4       	brtc	.+6      	; 0x4a9e <itoa+0x1c>
    4a98:	90 95       	com	r25
    4a9a:	81 95       	neg	r24
    4a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a9e:	64 2f       	mov	r22, r20
    4aa0:	77 27       	eor	r23, r23
    4aa2:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__udivmodhi4>
    4aa6:	80 5d       	subi	r24, 0xD0	; 208
    4aa8:	8a 33       	cpi	r24, 0x3A	; 58
    4aaa:	0c f0       	brlt	.+2      	; 0x4aae <itoa+0x2c>
    4aac:	89 5d       	subi	r24, 0xD9	; 217
    4aae:	81 93       	st	Z+, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	00 97       	sbiw	r24, 0x00	; 0
    4ab4:	a1 f7       	brne	.-24     	; 0x4a9e <itoa+0x1c>
    4ab6:	16 f4       	brtc	.+4      	; 0x4abc <itoa+0x3a>
    4ab8:	5d e2       	ldi	r21, 0x2D	; 45
    4aba:	51 93       	st	Z+, r21
    4abc:	10 82       	st	Z, r1
    4abe:	c9 01       	movw	r24, r18
    4ac0:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <strrev>

00004ac4 <strrev>:
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	67 2f       	mov	r22, r23
    4aca:	71 91       	ld	r23, Z+
    4acc:	77 23       	and	r23, r23
    4ace:	e1 f7       	brne	.-8      	; 0x4ac8 <strrev+0x4>
    4ad0:	32 97       	sbiw	r30, 0x02	; 2
    4ad2:	04 c0       	rjmp	.+8      	; 0x4adc <strrev+0x18>
    4ad4:	7c 91       	ld	r23, X
    4ad6:	6d 93       	st	X+, r22
    4ad8:	70 83       	st	Z, r23
    4ada:	62 91       	ld	r22, -Z
    4adc:	ae 17       	cp	r26, r30
    4ade:	bf 07       	cpc	r27, r31
    4ae0:	c8 f3       	brcs	.-14     	; 0x4ad4 <strrev+0x10>
    4ae2:	08 95       	ret

00004ae4 <_exit>:
    4ae4:	f8 94       	cli

00004ae6 <__stop_program>:
    4ae6:	ff cf       	rjmp	.-2      	; 0x4ae6 <__stop_program>
